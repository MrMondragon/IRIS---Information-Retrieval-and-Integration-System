<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippetCollection xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<CodeSnippetMembers>
						<Member>
							<Name>Application - Compiling, Resources, and Settings</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippets>
								<Snippet>
									<Header>
										<Title>Activate a Running Application by Name</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Activates a running application using the name of the application.</Description>
										<Shortcut>appActNa</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>applicationName</ID>
													<Type>String</Type>
													<ToolTip>Replace with the name of the application. This is often the title of the application window.</ToolTip>
													<Default>"Untitled - Notepad"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">AppActivate($applicationName$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Activate a Running Application by Process ID</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Activates a running application using the process ID of the application.</Description>
										<Shortcut>appActPro</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>applicationFileName</ID>
													<Type>String</Type>
													<ToolTip>Replace with the filename of the application to be executed.</ToolTip>
													<Default>"NOTEPAD.EXE"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim processID As Integer

processID = Shell($applicationFileName$, AppWinStyle.NormalFocus)

AppActivate(processID)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Capture Output from a Console Application</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Saves the output from a command console application to a string.</Description>
										<Shortcut>appOutCap</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>System.Diagnostics</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>consoleExeFile</ID>
													<Type>String</Type>
													<ToolTip>Replace with file name of the console application to execute.</ToolTip>
													<Default>"ConsoleApplication.exe"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim consoleApp As New Process
With consoleApp
    .StartInfo.UseShellExecute = False
    .StartInfo.RedirectStandardOutput = True
    .StartInfo.FileName = $consoleExeFile$
    .Start()
    .WaitForExit()
End With

Dim output As String = consoleApp.StandardOutput.ReadToEnd()

									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Change the Foreground and Background Colors in a Console Window</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Changes the background and text color of the console window.</Description>
										<Shortcut>appChanCol</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>background</ID>
													<Type>ConsoleColor</Type>
													<ToolTip>Replace with the new background color.</ToolTip>
													<Default>ConsoleColor.DarkRed</Default>
												</Literal>
												<Literal>
													<ID>foreground</ID>
													<Type>ConsoleColor</Type>
													<ToolTip>Replace with the new foreground color.</ToolTip>
													<Default>ConsoleColor.Gray</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Console.BackgroundColor = $background$
Console.ForegroundColor = $foreground$
Console.Clear()

									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Check for Current Version using ClickOnce</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Checks for current version using ClickOnce.</Description>
										<Shortcut>appCOVersion</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Deployment.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Deployment</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>currentVersion</ID>
													<Type>Version</Type>
													<ToolTip>The Version object that stores the currently running version of the application.</ToolTip>
													<Default>currentAppVersion</Default>
												</Literal>
												<Literal>
													<ID>lastUpdate</ID>
													<Type>Date</Type>
													<ToolTip>The Date object that stores the date of the last update.</ToolTip>
													<Default>lastUpdateDate</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">	If My.Application.IsNetworkDeployed Then

		$currentVersion$ = My.Application.Deployment.CurrentVersion
		$lastUpdate$ = My.Application.Deployment.TimeOfLastUpdateCheck

	End If</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Check for Update to ClickOnce Application</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Checks whether updates to the application areavailable for download.</Description>
										<Shortcut>appCheckUp</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Deployment.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Deployment</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method body" Language="">If My.Application.IsNetworkDeployed() 
	If My.Application.Deployment.CheckForUpdate() Then

 	End If

End If</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Clear the Console Window</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Clears the console window.</Description>
										<Shortcut>appWinClear</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method body" Language="">Console.Clear()
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Delete File from Isolated Storage</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Deletes file from isolated storage.</Description>
										<Shortcut>appIsoDel</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.IO.IsolatedStorage</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>pathToFile</ID>
													<Type>String</Type>
													<ToolTip>The full path to file in isolated storage.</ToolTip>
													<Default>"FullPath\FileName.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim isolatedStorage As IsolatedStorageFile
        isolatedStorage = IsolatedStorageFile.GetStore(IsolatedStorageScope.User Or IsolatedStorageScope.Assembly, Nothing, Nothing)
        isolatedStorage.DeleteFile($pathToFile$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Determine the Amount of Isolated Storage Available. </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Determines the Amount of Isolated Storage Available.</Description>
										<Shortcut>appIsoAmt</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.IO.IsolatedStorage</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method body" Language="">	Dim isolatedStorage As IsolatedStorageFile = IsolatedStorageFile.GetStore(IsolatedStorageScope.User Or IsolatedStorageScope.Assembly Or IsolatedStorageScope.Domain, Nothing, Nothing)
	Dim spaceAvailable As ULong = isolatedStorage.MaximumSize - isolatedStorage.CurrentSize
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Determine the Scope of Isolated Storage</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Determines the scope of the isolated storage.</Description>
										<Shortcut>appIsoScope</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.IO.IsolatedStorage</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>isolatedStorageFile</ID>
													<Type>IsolatedStorageFile</Type>
													<ToolTip>The IsolatedStorageFile object that represents the isolated storage in the file system.</ToolTip>
													<Default>isolatedStorage</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim scope As IsolatedStorageScope = $isolatedStorageFile$.Scope</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Download Files Synchronously with ClickOnce</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Downloads files synchronously using ClickOnce.</Description>
										<Shortcut>appDownload</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Deployment.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Deployment</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>fileDownloadGroup</ID>
													<Type>String</Type>
													<ToolTip>The name of file download group.</ToolTip>
													<Default>"Media"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">        If My.Application.IsNetworkDeployed Then
            If Not(My.Application.Deployment.IsFileGroupDownloaded($fileDownloadGroup$)) Then
                 My.Application.Deployment.DownloadFileGroup($fileDownloadGroup$)
            End If
        End If</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Find the Names of Resources in an Assembly</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Returns a list of all the resources in an assembly.</Description>
										<Shortcut>appRes</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.Reflection</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>executingAssembly</ID>
													<Type>Assembly</Type>
													<ToolTip>The object to store the currently executing assembly.</ToolTip>
													<Default>executingAssembly</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">$executingAssembly$ = Assembly.GetExecutingAssembly()
Dim resources() As string = $executingAssembly$.GetManifestResourceNames
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Load a Cursor File from an Assembly</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Sets the cursor of a Windows form from a cursor file that is an embedded resource of the application.</Description>
										<Shortcut>appCur</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Windows.Forms.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Reflection</Namespace>
										</Import>
										<Import>
											<Namespace>System.Windows.Forms</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>cursorFilename</ID>
													<Type>String</Type>
													<ToolTip>The name of the cursor file embedded as a resource.</ToolTip>
													<Default>"CursorResourceName"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim newCursor As New Cursor(My.Resources.ResourceManager.GetStream($cursorFilename$))
Me.Cursor = newCursor
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Load an Assembly at Run Time</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Loads an assembly at run time.</Description>
										<Shortcut>appLoad</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.Reflection</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>fileName</ID>
													<Type>String</Type>
													<ToolTip>The full path to the assembly file.</ToolTip>
													<Default>"C:\Folder\AssemblyName.dll"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>loadedAssembly</ID>
													<Type>Assembly</Type>
													<ToolTip>The Assembly object that stores the assembly being loaded.</ToolTip>
													<Default>loadedAssembly</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">$loadedAssembly$ = Assembly.LoadFile($fileName$)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Make an Asynchronous Method Call</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Makes an asynchronous method call using the BackgroundWorker component.</Description>
										<Shortcut>appAsynchMeth</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Threading</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>backgroundWorkerInstance</ID>
													<Type>System.ComponentModel.BackgroundWorker</Type>
													<ToolTip>BackgroundWorker component instance to manage the background thread.Can be created by dragging a BackgroundWorker component instance from the Toolbox.</ToolTip>
													<Default>BackgroundWorker1</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method decl" Language="">    Private Sub startBackgroundTask()
        ' Execute the Background Task
        $backgroundWorkerInstance$.RunWorkerAsync()
    End Sub

    Private Sub $backgroundWorkerInstance$_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles $backgroundWorkerInstance$.DoWork
        ' This method will execute in the background thread created by the BackgroundWorker componet

    End Sub

    Private Sub $backgroundWorkerInstance$_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles $backgroundWorkerInstance$.RunWorkerCompleted
        ' This event fires when the DoWork event completes

    End Sub</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Read and Write from the Console Window</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Writes a prompt and then reads in the user request. It is run from a console application.</Description>
										<Shortcut>appConRW</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>prompt</ID>
													<Type>String</Type>
													<ToolTip>Replace with the input prompt.</ToolTip>
													<Default>"Type in a sentence and hit Enter:"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>inputFromConsole</ID>
													<Type>String</Type>
													<ToolTip>The String variable that stores the input from the console window.</ToolTip>
													<Default>inputFromConsole</Default>
												</Literal>
												<Literal>
													<ID>outputToConsole</ID>
													<Type>String</Type>
													<ToolTip>The String variable that stores the output to the console window.</ToolTip>
													<Default>outputToConsole</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Console.WriteLine($prompt$)
$inputFromConsole$ = Console.ReadLine()
Console.WriteLine($outputToConsole$)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Read Command Line Arguments</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Iterates through the command line arguments.</Description>
										<Shortcut>appArgs</Shortcut>
										<Keywords>
											<Keyword>command line arguments</Keyword>
											<Keyword>Command</Keyword>
										</Keywords>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method body" Language="">For Each argument As String In My.Application.CommandLineArgs

Next

									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Read Text from Isolated Storage</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Reads the text from a file in isolated storage.</Description>
										<Shortcut>appIsoRead</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
										<Import>
											<Namespace>System.IO.IsolatedStorage</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>fileName</ID>
													<Type>String</Type>
													<ToolTip>The name of the file is in isolated storage.</ToolTip>
													<Default>"myfile.txt"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>inputText</ID>
													<Type>String</Type>
													<ToolTip>The String variable that stores the contents of the file</ToolTip>
													<Default>InputText</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim isolatedStore As IsolatedStorageFile = IsolatedStorageFile.GetStore(IsolatedStorageScope.User Or IsolatedStorageScope.Assembly, Nothing, Nothing)

        Dim isolatedStream As New IsolatedStorageFileStream($FileName$, FileMode.Open, isolatedStore)

        Using reader As New StreamReader(isolatedStream)
            $InputText$ = reader.ReadToEnd
        End Using</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Retrieve an Image that Is an Application Resource</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Assigns an image resource in the My Application designer to the PictureBox1's Image property.</Description>
										<Shortcut>appImage</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Windows.Forms.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>pictureBox</ID>
													<Type>PictureBox</Type>
													<ToolTip>The PictureBox object displaying the image resource.</ToolTip>
													<Default>PictureBox1</Default>
												</Literal>
												<Literal>
													<ID>resourceName</ID>
													<Type>Object</Type>
													<ToolTip>Replace with resource name created in the My.Application designer.</ToolTip>
													<Default>ImageResource</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">$pictureBox$.Image = My.Resources.$resourceName$
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Retrieve a Text File from an Assembly's Resources</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Retrieves the text from a file that is an embedded resource of an assembly.</Description>
										<Shortcut>appResText</Shortcut>
									</Header>
									<References>
									</References>
									<Imports>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
										<Import>
											<Namespace>System.Reflection</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>ResourceName</ID>
													<Type>String</Type>
													<ToolTip>The name of the resource.</ToolTip>
													<Default>"AssemblyName.Filename.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim executingAssembly As Assembly = Assembly.GetExecutingAssembly
        Dim appStream As Stream = executingAssembly.GetManifestResourceStream($ResourceName$)
        Dim textStream As New StreamReader(appStream)
        Dim text As String = textStream.ReadToEnd</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Save Text in Isolated Storage</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Writes a string to the assembly or user-isolated storage.</Description>
										<Shortcut>appIsoSave</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
										<Import>
											<Namespace>System.IO.IsolatedStorage</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>fileName</ID>
													<Type>String</Type>
													<ToolTip>The file name of the file in isolated storage.</ToolTip>
													<Default>"TestStore.txt"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>fileContents</ID>
													<Type>String</Type>
													<ToolTip>The String variable that stores the value to be written to the file in the store.</ToolTip>
													<Default>"The Data"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">	Dim isolatedStore As IsolatedStorageFile = IsolatedStorageFile.GetStore(IsolatedStorageScope.User Or IsolatedStorageScope.Assembly, Nothing, Nothing)
      Dim isoStream As New IsolatedStorageFileStream($fileName$, FileMode.Append, FileAccess.Write, isolatedStore)

      Using writer As New StreamWriter(isoStream)
		writer.WriteLine($fileContents$)
	End Using</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Send Keystrokes to an Application </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Sends keystrokes to an application.</Description>
										<Shortcut>appKeys</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Windows.Forms.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Windows.Forms</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>key</ID>
													<Type>String</Type>
													<ToolTip>Replace with the key code to send to active application.</ToolTip>
													<Default>"{ENTER}"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">SendKeys.SendWait($key$)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Stop an Application</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Closes all the running instances of Notepad.</Description>
										<Shortcut>appStop</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Diagnostics</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>processName</ID>
													<Type>String</Type>
													<ToolTip>Replace with the friendly name of the process.</ToolTip>
													<Default>"Untitled - Notepad"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">	For Each proc As Process In Process.GetProcessesByName($processName$)
		proc.CloseMainWindow()
	Next</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Update Application Asynchronously using ClickOnce</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Updates ClickOnce application asynchronously.</Description>
										<Shortcut>appUpdateAsync</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Deployment.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Deployment</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method body" Language="">If My.Application.IsNetworkDeployed Then
	My.Application.Deployment.UpdateAsync()
End If</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Update Application Synchronously using ClickOnce</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Update a ClickOnce application Synchronous.</Description>
										<Shortcut>appUpdateSync</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Deployment.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method body" Language="">If My.Application.IsNetworkDeployed Then
    My.Application.Deployment.Update()
End If</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Write a Message to the Application Log</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Writes a message to the application log.</Description>
										<Shortcut>appEvent</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>messageText</ID>
													<Type>String</Type>
													<ToolTip>Replace with log string.</ToolTip>
													<Default>"Action complete."</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">My.Application.Log.WriteEntry($messageText$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Write to a Text file</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Writes a message to the application event log.</Description>
										<Shortcut>appLog</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>fileName</ID>
													<Type>String</Type>
													<ToolTip>The String variable that stores the filename to be written to.</ToolTip>
													<Default>"TheFile.txt"</Default>
												</Literal>
												<Literal>
													<ID>textContents</ID>
													<Type>String</Type>
													<ToolTip>The text to be written to the file.</ToolTip>
													<Default>"TextContents"</Default>
												</Literal>
												<Literal>
													<ID>append</ID>
													<Type>Boolean</Type>
													<ToolTip>Specifies whether text should be added to the end of the file (true) or overwrite existing contents (false).</ToolTip>
													<Default>False</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">My.Computer.FileSystem.WriteAllText($fileName$, $textContents$, $append$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
  							</CodeSnippets>
						</Member>
						<Member>
							<Name>Collections and Arrays</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippets>
								<Snippet>
									<Header>
										<Title>Convert an ArrayList to a Strongly Typed Array</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Converts an ArrayList to a strongly typed array using ToArray(Type)</Description>
										<Shortcut>arrConv</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Collections</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Datatype</ID>
													<Type />
													<ToolTip>Replace with the type to convert to.</ToolTip>
													<Default>String</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>ExistingArray</ID>
													<Type>ArrayList</Type>
													<ToolTip>Replace with the existing ArrayList to convert.</ToolTip>
													<Default>existingArrayList</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim newArray() As $Datatype$ = CType($ExistingArray$.ToArray(GetType($Datatype$)), $Datatype$())
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Create a list with items of a single type.</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Creates a collection to hold a specific type of items.</Description>
										<Shortcut>colCreate</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>type</ID>
													<ToolTip>Replace with the type of items the collection should hold.</ToolTip>
													<Default>String</Default>
												</Literal>
												<Literal>
													<ID>storageVar</ID>
													<ToolTip>Replace with an identifier for the backing storage.</ToolTip>
													<Default>names</Default>
												</Literal>
												<Literal>
													<ID>item</ID>
													<ToolTip>Replace with an item to fill the collection with. </ToolTip>
													<Default>"John"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">' Backing storage -- a generic list
Dim $storageVar$ As New List(Of $type$)() 

' Add an item to the Collection
$storageVar$.Add($item$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Create a keyed collection with one item type.</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Creates a dictionary to hold specific types of items indexed by key.</Description>
										<Shortcut>colCreateKey</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Collections.Generic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Collections</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>storageVar</ID>
													<ToolTip>Replace with an identifier for the backing storage.</ToolTip>
													<Default>stateCaps</Default>
												</Literal>
												<Literal>
													<ID>keyType</ID>
													<ToolTip>Replace with the type of the keys in the collection. </ToolTip>
													<Default>String</Default>
												</Literal>
												<Literal>
													<ID>itemType</ID>
													<ToolTip>Replace with the type of item the collection holds. </ToolTip>
													<Default>String</Default>
												</Literal>
												<Literal>
													<ID>keyValue1</ID>
													<ToolTip>Replace with the key for the first item. </ToolTip>
													<Default>"WA"</Default>
												</Literal>
												<Literal>
													<ID>keyValue2</ID>
													<ToolTip>Replace with the key for the second item. </ToolTip>
													<Default>"NM"</Default>
												</Literal>
												<Literal>
													<ID>value1</ID>
													<ToolTip>Replace with the value for the first item. </ToolTip>
													<Default>"Olympia"</Default>
												</Literal>
												<Literal>
													<ID>value2</ID>
													<ToolTip>Replace with the value for the second item. </ToolTip>
													<Default>"Santa Fe"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">' Backing storage -- a generic dictionary
Dim $storageVar$ As New Dictionary(Of $keyType$, $itemType$)

' Add items to the dictionary
$storageVar$.Add( $keyValue1$ , $value1$)
$storageVar$.Add( $keyValue2$ , $value2$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Create a sorted dictionary.</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Creates a sorted dictionary to hold a specific type of items.</Description>
										<Shortcut>colCreateSort</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>keyType</ID>
													<ToolTip>Type of key.</ToolTip>
													<Default>Integer</Default>
												</Literal>
												<Literal>
													<ID>itemType</ID>
													<ToolTip>Replace with the type of item the collection should hold.</ToolTip>
													<Default>String</Default>
												</Literal>
												<Literal>
													<ID>storageVar</ID>
													<ToolTip>Replace with an identifier for the backing storage.</ToolTip>
													<Default>sortedStudents</Default>
												</Literal>
												<Literal>
													<ID>keyValue1</ID>
													<ToolTip>Replace with the key for the first value.</ToolTip>
													<Default>1</Default>
												</Literal>
												<Literal>
													<ID>keyValue2</ID>
													<ToolTip>Replace with the key for the second value.</ToolTip>
													<Default>2</Default>
												</Literal>
												<Literal>
													<ID>itemValue1</ID>
													<ToolTip>Replace with the item for the first value.</ToolTip>
													<Default>"Mary Chase"</Default>
												</Literal>
												<Literal>
													<ID>itemValue2</ID>
													<ToolTip>Replace with the item for the second value.</ToolTip>
													<Default>"Barnaby Williams"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">
		          ' Backing storage -- a generic dictionary
        Dim $storageVar$ As New SortedDictionary(Of $keyType$, $itemType$)

        ' Add items to the dictionary
        $storageVar$.Add($keyValue1$, $itemValue1$)
        $storageVar$.Add($keyValue2$, $itemValue2$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Define a type comparer to be used in sorting routines.</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</Description>
										<Shortcut>arrComp</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.Collections.Generic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>compareID</ID>
													<ToolTip>Replace with an identifier for the type of comparer.</ToolTip>
													<Default>IntegerComparer</Default>
												</Literal>
												<Literal>
													<ID>compType</ID>
													<ToolTip>Replace with the type of item the comparer compares.</ToolTip>
													<Default>Integer</Default>
												</Literal>
												<Literal>
													<ID>param1</ID>
													<ToolTip>Replace with the first object to compare.</ToolTip>
													<Default>param1</Default>
												</Literal>
												<Literal>
													<ID>param2</ID>
													<ToolTip>Replace with the second object to compare.</ToolTip>
													<Default>param2</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="type decl" Language="">
		       Public Class $compareID$
        Inherits Comparer(Of $compType$)

        Public Overrides Function Compare(ByVal $param1$ As $compType$, ByVal $param2$ As $compType$) As Integer
            If $param1$ &lt; $param2$ Then
				' result = &lt;0 if param1 &lt; param2
				Return -1
            ElseIf $param1$ > $param2$ Then
				' result = >0 if param1 > param2
				Return 1
            Else
				' result = 0 if param1 = param2
				Return 0
            End If
        End Function
    End Class</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Index into a strongly typed dictionary using a key.</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Indexes into strongly typed dictionary by using a key.</Description>
										<Shortcut>colIndex</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.Collections.Generic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>itemVar</ID>
													<ToolTip>Replace with the identifier for the item variable.</ToolTip>
													<Default>capitol</Default>
												</Literal>
												<Literal>
													<ID>itemType</ID>
													<ToolTip>Replace with the type of items in the collection.</ToolTip>
													<Default>String</Default>
												</Literal>
												<Literal>
													<ID>key</ID>
													<ToolTip>Replace with the key at which the value is stored.</ToolTip>
													<Default>"NM"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>storageVar</ID>
													<ToolTip>Replace with the collection object to index into.</ToolTip>
													<Default>stateCaps</Default>
													<Type>System.Collections.IDictionary</Type>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">
		  Dim $itemVar$ As $itemType$ = $storageVar$.Item($key$)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Initialize a One-Dimensional Array </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Initializes a one-dimensional array.</Description>
										<Keywords>
										</Keywords>
										<Shortcut>arrInit</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>OneD</ID>
													<Type>Object</Type>
													<ToolTip>Replace with a comma-separated list of values.</ToolTip>
													<Default>1, 2, 3</Default>
												</Literal>
												<Literal>
													<ID>TwoD</ID>
													<Type>Object</Type>
													<ToolTip>Replace with comma-delimited lists of values.</ToolTip>
													<Default>{{5.8, 6.6}, {7.4, 8.2}}</Default>
												</Literal>
												<Literal>
													<ID>Jagged</ID>
													<Type>Object</Type>
													<ToolTip>Replace with array declarations.</ToolTip>
													<Default>{New Integer() {1, 2}, New Integer() {3, 4}}</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim oneDimArray() As Integer = {$OneD$}</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Iterate through a collection.</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Iterates through specific item types in a collection.</Description>
										<Shortcut>colIter</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
									</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>itemVar</ID>
													<ToolTip>Replace with the identifier for the item in the collection.</ToolTip>
													<Default>name</Default>
												</Literal>
												<Literal>
													<ID>itemType</ID>
													<ToolTip>Replace with the type of an items that are in the collection.</ToolTip>
													<Default>String</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>colVar</ID>
													<Type>IEnumerable</Type>
													<ToolTip>Replace with the collection to iterate over.</ToolTip>
													<Default>names</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">
		          ' Iterate through a collection
        For Each $itemVar$ As $itemType$ In $colVar$

        Next</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Iterate through a dictionary.</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Iterates through all the items in a dictionary.</Description>
										<Shortcut>colIterDict</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
									</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>itemVar</ID>
													<ToolTip>Replace with an identifier for an item in the collection.</ToolTip>
													<Default>capitol</Default>
												</Literal>
												<Literal>
													<ID>itemType</ID>
													<ToolTip>Replace with the type of an items in the collection.</ToolTip>
													<Default>String</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>dicVar</ID>
													<Type>IDictionary(Of TKey, TValue)</Type>
													<ToolTip>Replace with the dictionary variable to iterate over.</ToolTip>
													<Default>stateCaps</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">
		          ' Iterate through a dictionary
        For Each $itemVar$ As $itemType$ In $dicVar$.Values

        Next
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Iterate through a sorted dictionary by key.</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Iterates through all the items in a dictionary based on the sorted list of keys.</Description>
										<Shortcut>colIterSort</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>itemVar</ID>
													<ToolTip>Replace with an identifier for an item in the collection.</ToolTip>
													<Default>student</Default>
												</Literal>
												<Literal>
													<ID>keyVar</ID>
													<ToolTip>Replace with an identifier for a key in the collection.</ToolTip>
													<Default>rank</Default>
												</Literal>
												<Literal>
													<ID>keyType</ID>
													<ToolTip>Replace with the type of a key in the collection.</ToolTip>
													<Default>Integer</Default>
												</Literal>
												<Literal>
													<ID>itemType</ID>
													<ToolTip>Replace with the type of items in the collection.</ToolTip>
													<Default>String</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>dicVar</ID>
													<Type>IDictionary(Of TKey, TValue)</Type>
													<ToolTip>Replace with the sorted dictionary to iterate over.</ToolTip>
													<Default>sortedStudents</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">
		   ' Loop through the items based on key
        For Each $keyVar$ As $keyType$ In $dicVar$.Keys
            Dim $itemVar$ As $itemType$ = $dicVar$.Item($keyVar$)

        Next</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Locate an Element in an Array </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Finds the index of a given element in an array.</Description>
										<Keywords>
										</Keywords>
										<Shortcut>arrLoc</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>SearchString</ID>
													<Type>String</Type>
													<ToolTip>Replace with the value to search for.</ToolTip>
													<Default>"value"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>arrayName</ID>
													<Type>Array</Type>
													<ToolTip>Replace with the name of the array you want to search.</ToolTip>
													<Default>myArray</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim index As Integer
        index = Array.IndexOf($arrayName$, $SearchString$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Sort An Array</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Declares an array of String objects, populates it, and then sorts it alphabetically.</Description>
										<Keywords>
										</Keywords>
										<Shortcut>arrSort</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>InitialValues</ID>
													<Type>Object</Type>
													<ToolTip>Replace with the initial values of the array.</ToolTip>
													<Default>{"lion", "turtle", "ostrich"}</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
								<Code Delimiter="$" Kind="method body" Language="">Dim animals() As String = $InitialValues$
Array.Sort(animals)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
							</CodeSnippets>
						</Member>
						<Member>
							<Name>Common Code Patterns</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippetMembers>
								<Member>
									<Name>Conditionals and Loops</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Build Only Selected Portions of the Source Code by Using #If</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Uses the #If compiler directive to control which block of code is compiled into the assembly.</Description>
												<Shortcut>ifCond</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>condition</ID>
															<Type>Boolean</Type>
															<ToolTip>The condition which determines whether the code within the scope of the #If construct is included in compilation.</ToolTip>
															<Default>True</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">#If $condition$ Then

#Else

#End If</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Do...Loop Until Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Loops until a condition is True.</Description>
												<Shortcut>DoLoopUn</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Condition</ID>
															<Type></Type>
															<ToolTip>Replace with an expression that evaluates to True or False. Loop executes until value changes to True.</ToolTip>
															<Default>True</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Do

Loop Until $Condition$</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Do...Loop While Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Loops while a condition is True.</Description>
												<Shortcut>DoLoopWh</Shortcut>
											</Header>
											<Imports>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Condition</ID>
															<Type></Type>
															<ToolTip>Replace with an expression that evaluates to True or False. Loop executes until value changes to False.</ToolTip>
															<Default>True</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Do

Loop While $Condition$</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Do Until...Loop Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Loops until a condition is True.</Description>
												<Shortcut>DoUntil</Shortcut>
											</Header>
											<Imports>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Condition</ID>
															<Type>Object</Type>
															<ToolTip>Replace with an expression that evaluates to True or False.</ToolTip>
															<Default>False</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Do Until $Condition$

Loop</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Do While...Loop Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Loops while a condition is True.</Description>
												<Shortcut>DoWhile</Shortcut>
											</Header>
											<Imports>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Condition</ID>
															<Type>Boolean</Type>
															<ToolTip>Replace with an expression that evaluates to True or False. Loop executes until value changes to False.</ToolTip>
															<Default>True</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Do While $Condition$

Loop</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>For Each...Next Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Loops through a collection of items.</Description>
												<Shortcut>ForEach</Shortcut>
											</Header>
											<Imports>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Variable</ID>
															<Type>Object</Type>
															<ToolTip>Replace with the variable name of the item.</ToolTip>
															<Default>Item</Default>
														</Literal>
														<Literal>
															<ID>ObjectType</ID>
															<Type>Object</Type>
															<ToolTip>Replace with the type of the items in the group.</ToolTip>
															<Default>String</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>CollectionObject</ID>
															<Type>Object</Type>
															<ToolTip>Replace with an object whose items you want to iterate over.</ToolTip>
															<Default>CollectionObject</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">For Each $Variable$ As $ObjectType$ In $CollectionObject$

Next</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>For...Next Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Loops through a sequence of numbers.</Description>
												<Shortcut>For</Shortcut>
											</Header>
											<Imports>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>LowerBound</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with an Integer value.</ToolTip>
															<Default>1</Default>
														</Literal>
														<Literal>
															<ID>UpperBound</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with an Integer value.</ToolTip>
															<Default>10</Default>
														</Literal>
														<Literal>
															<ID>Variable</ID>
															<Type>Object</Type>
															<ToolTip>Replace with the counter variable name.</ToolTip>
															<Default>index</Default>
														</Literal>
														<Literal>
															<ID>CounterType</ID>
															<Type>Object</Type>
															<ToolTip>Replace with a numeric type.</ToolTip>
															<Default>Integer</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">For $Variable$ As $CounterType$ = $LowerBound$ To $UpperBound$

Next</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>If...Else...End If Statement </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Inserts an If...Else...End If statement.</Description>
												<Keywords></Keywords>
												<Shortcut>IfElse</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Condition</ID>
															<Type>Boolean</Type>
															<ToolTip>Replace with an expression that evaluates to either True or False.</ToolTip>
															<Default>True</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">If $Condition$ Then

Else

End If</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>If...ElseIf...Else...End If Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Inserts an If...ElseIf...Else...End If statement.</Description>
												<Shortcut>IfElseIf</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Condition1</ID>
															<Type>Boolean</Type>
															<ToolTip>Replace with an expression that evaluates to either True or False.</ToolTip>
															<Default>True</Default>
														</Literal>
														<Literal>
															<ID>Condition2</ID>
															<Type>Boolean</Type>
															<ToolTip>Replace with an expression that evaluates to either True or False.</ToolTip>
															<Default>False</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">If $Condition1$ Then

ElseIf $Condition2$ Then

Else

End If</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>If..End If Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Inserts an If..End If statement.</Description>
												<Shortcut>If</Shortcut>
											</Header>
											<Imports>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Condition</ID>
															<Type>Boolean</Type>
															<ToolTip>Replace with an expression that evaluates to either True or False.</ToolTip>
															<Default>True</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">If $Condition$ Then

End If</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Select Case Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Inserts a Select Case statement.</Description>
												<Shortcut>Select</Shortcut>
											</Header>
											<Imports>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Case1</ID>
															<Type></Type>
															<ToolTip>Replace with a valid value of the expression.</ToolTip>
															<Default>1</Default>
														</Literal>
														<Literal>
															<ID>Case2</ID>
															<Type></Type>
															<ToolTip>Replace with another valid value of the expression.</ToolTip>
															<Default>2</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>Variable</ID>
															<Type>Object</Type>
															<ToolTip>Replace with an expression.</ToolTip>
															<Default>VariableName</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">
  Select Case $Variable$
    Case $Case1$

    Case $Case2$

    Case Else

End Select</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>While...End While Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Inserts a While...End While statement.</Description>
												<Shortcut>While</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Condition</ID>
															<Type>Object</Type>
															<ToolTip>Replace with an expression that evaluates to True or False.</ToolTip>
															<Default>True</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">While $Condition$

End While</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Exception Handling</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Define An Exception Class</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Provides a basic implementation for a new exception class.</Description>
												<Keywords>
													<Keyword>Exception</Keyword>
													<Keyword>Error</Keyword>
													<Keyword>Handling</Keyword>
												</Keywords>
												<Shortcut>Except</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>exceptionName</ID>
															<ToolTip>Rename class to description of exception.</ToolTip>
															<Default>ProblemException</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="type decl" Language="">  _
Public Class $ExceptionName$
    Inherits ApplicationException

    Public Sub New(ByVal message As String)
        MyBase.New(message)
    End Sub

    Public Sub New(ByVal message As String, ByVal inner As Exception)
        MyBase.New(message, inner)
    End Sub

    Public Sub New( _
        ByVal info As System.Runtime.Serialization.SerializationInfo, _
        ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
    End Sub
End Class</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Throw an Exception </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Throws an Exception.</Description>
												<Keywords>
												</Keywords>
												<Shortcut>Throw</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>exceptionType</ID>
															<Type>Exception</Type>
															<ToolTip>Replace with the type of Exception to throw.</ToolTip>
															<Default>ApplicationException</Default>
														</Literal>
														<Literal>
															<ID>exceptionMsg</ID>
															<Type>String</Type>
															<ToolTip>Replace with the exception message.</ToolTip>
															<Default>"Exception Occured"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Throw New $exceptionType$($exceptionMsg$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Try...Catch...End Try Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Inserts a Try...Catch...End Try statement.</Description>
												<Shortcut>TryC</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>ExceptionType</ID>
															<Type>Exception</Type>
															<ToolTip>Replace with the specific exception type you want to catch.</ToolTip>
															<Default>ApplicationException</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Try

Catch ex As $ExceptionType$
	
End Try</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Try...Catch...Finally...End Try Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Inserts a Try...Catch...Finally...End Try statement.</Description>
												<Shortcut>TryCF</Shortcut>
											</Header>
											<Imports>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>ExceptionType</ID>
															<Type>Exception</Type>
															<ToolTip>Replace this with the specific Exception Type to catch.</ToolTip>
															<Default>ApplicationException</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Try

Catch ex As $ExceptionType$

Finally

End Try</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Try...Finally...End Try Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Inserts a Try...Finally...End Try statement.</Description>
												<Shortcut>TryF</Shortcut>
											</Header>
											<Imports>
											</Imports>
											<Declarations>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Try

Finally

End Try</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Using Statement</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Inserts a Using statement.</Description>
												<Shortcut>Using</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>ObjectType</ID>
															<Type></Type>
															<ToolTip>Replace with a Type or a New statement.</ToolTip>
															<Default>New Object</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>DisposeObject</ID>
															<Type>Object</Type>
															<ToolTip>Replace with the variable name of the object.</ToolTip>
															<Default>resource</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Using $DisposeObject$ As $ObjectType$

End Using</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Properties and Procedures</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Define an Addition Operator (+)</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines the addition (+) operator on a class. </Description>
												<Keywords>
													<Keyword>operators</Keyword>
													<Keyword>overloading operators</Keyword>
													<Keyword>overloading</Keyword>
												</Keywords>
												<Shortcut>OpAdd</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
 														<Literal>
															<ID>ClassName</ID>
															<Type>
															</Type>
															<ToolTip>Replace with the name of the class you are implementing.</ToolTip>
															<Default>MyClass</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="type decl" Language="">Public Shared Operator +(ByVal class1 As $ClassName$, ByVal class2 As $ClassName$) As $ClassName$

End Operator</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Function to Call a Windows API</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines a function to call a Windows API.</Description>
												<Keywords>
													<Keyword>pinvoke</Keyword>
													<Keyword>declare</Keyword>
													<Keyword>win32</Keyword>
												</Keywords>
												<Shortcut>WinApi</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>dllName</ID>
															<Type />
															<ToolTip>Replace with the name of the .dll file that contains the API method.</ToolTip>
															<Default>"user32.dll"</Default>
														</Literal>
														<Literal>
															<ID>apiName</ID>
															<Type />
															<ToolTip>Replace with the name of the method in the .dll file.</ToolTip>
															<Default>"MessageBox"</Default>
														</Literal>
														<Literal>
															<ID>parameters</ID>
															<Type />
															<ToolTip>Replace with the parameters as declared in the .dll file.</ToolTip>
															<Default>ByVal hWnd As Integer, ByVal txt As String, ByVal caption As String, ByVal Type As Integer</Default>
														</Literal>
														<Literal>
															<ID>matchingCall</ID>
															<Type />
															<ToolTip>Replace with the name you want to call from your project.</ToolTip>
															<Default>Win32MessageBox</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Declare Function $matchingCall$ Lib $dllName$ Alias $apiName$ ($parameters$) As Integer</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define Comparison Operators (&gt; and &lt;)</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines the comparison operators (&gt; and &lt;).</Description>
												<Shortcut>OpComp</Shortcut>
											</Header>
											<Imports>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>TypeName</ID>
															<Type />
															<ToolTip>Replace with your class name.</ToolTip>
															<Default>MyClass</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Public Shared Operator >(ByVal left As $TypeName$, _
        ByVal right As $TypeName$) As Boolean

    End Operator

    Public Shared Operator &lt;(ByVal left As $TypeName$, _
        ByVal right As $TypeName$) As Boolean

    End Operator</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a CType Operator</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines the CType Operators on a class.</Description>
												<Keywords>
													<Keyword>overloading operators</Keyword>
													<Keyword>CType</Keyword>
													<Keyword>DirectCast</Keyword>
													<Keyword>conversion operators</Keyword>
													<Keyword>narrowing</Keyword>
													<Keyword>Operator keyword</Keyword>
												</Keywords>
												<Shortcut>OpCType</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>DataType</ID>
															<Type />
															<ToolTip>Replace with the type of the data you want to convert to your custom class.</ToolTip>
															<Default>String</Default>
														</Literal>
														<Literal>
															<ID>ClassName</ID>
															<Type />
															<ToolTip>Replace with the name of the class you are implementing.</ToolTip>
															<Default>MyClass</Default>
														</Literal>
														<Literal>
															<ID>ReturnValue</ID>
															<Type />
															<ToolTip>Replace with the return value.</ToolTip>
															<Default>"Replace Me"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="type decl" Language="">Public Shared Narrowing Operator CType(ByVal initialData As $DataType$) As $ClassName$
          Return New $ClassName$()
        End Operator
        
        Public Shared Widening Operator CType(ByVal initialData As $ClassName$) As $DataType$
          Return $ReturnValue$
        End Operator</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Declare an Event</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Declares an event.</Description>
												<Shortcut>Event</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>EventName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the event name.</ToolTip>
															<Default>PropertyChanged</Default>
														</Literal>
														<Literal>
															<ID>EventArgsType</ID>
															<Type>EventArgs</Type>
															<ToolTip>Replace with EventArgs type.</ToolTip>
															<Default>EventArgs</Default>
														</Literal>
														<Literal>
															<ID>Scope</ID>
															<Type>String</Type>
															<ToolTip>Replace with the accessibility of the event.</ToolTip>
															<Default>Public</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">$Scope$ Event $EventName$(ByVal sender As Object, ByVal e As $EventArgsType$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Default Property</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines a default property or index property.</Description>
												<Keywords>
													<Keyword>Property</Keyword>
													<Keyword>Index</Keyword>
													<Keyword>Default</Keyword>
												</Keywords>
												<Shortcut>PropDef</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>propertyName</ID>
															<Type>
															</Type>
															<ToolTip>Rename to descriptive name for the property.</ToolTip>
															<Default>PropertyName</Default>
														</Literal>
														<Literal>
															<ID>indexType</ID>
															<Type>
															</Type>
															<ToolTip>Replace with the type of the index</ToolTip>
															<Default>Integer</Default>
														</Literal>
														<Literal>
															<ID>propertyType</ID>
															<Type>
															</Type>
															<ToolTip>Replace with the type returned by the property.</ToolTip>
															<Default>String</Default>
														</Literal>
														<Literal>
															<ID>IndexIsValid</ID>
															<Type>Boolean</Type>
															<ToolTip>Replace with an expression to test if index is valid.</ToolTip>
															<Default>True</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Default Property $propertyName$(ByVal index As $indexType$) As $propertyType$
        Get
            If $IndexIsValid$ Then
                
            Else
                Throw New ArgumentOutOfRangeException
            End If
        End Get
        Set(ByVal Value As $propertyType$)
            If $IndexIsValid$ Then
                
            Else
                Throw New ArgumentOutOfRangeException
            End If
        End Set
    End Property</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Sub that is Private</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Uses the Sub keyword to define a private method that does not return a value.</Description>
												<Keywords>
												</Keywords>
												<Shortcut>SubPriv</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>MethodName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the method name.</ToolTip>
															<Default>MyMethod</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Private Sub $MethodName$()

End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Property</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines a Property with a backing field.</Description>
												<Shortcut>Property</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>PropertyName</ID>
															<Type>String</Type>
															<ToolTip>Replace with property name.</ToolTip>
															<Default>NewProperty</Default>
														</Literal>
														<Literal>
															<ID>PropertyType</ID>
															<Type>
															</Type>
															<ToolTip>Replace with the property type.</ToolTip>
															<Default>Integer</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>PrivateVariable</ID>
															<Type>Object</Type>
															<ToolTip>Replace this with the private variable name.</ToolTip>
															<Default>newPropertyValue</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Private $PrivateVariable$ As $PropertyType$
Public Property $PropertyName$() As $PropertyType$
    Get
        Return $PrivateVariable$ 
    End Get
    Set(ByVal value As $PropertyType$)
        $PrivateVariable$ = value
    End Set
End Property</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Sub that is Public</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Uses the Sub keyword to define a method that does not return a value.</Description>
												<Keywords>
												</Keywords>
												<Shortcut>SubPub</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>MethodName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the method name.</ToolTip>
															<Default>MyMethod</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Public Sub $MethodName$()

End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define Equality Operators (= and &lt;&gt;)</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines the equality Operators (= and &lt;&gt;).</Description>
												<Shortcut>OpEqual</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>ClassName</ID>
															<Type />
															<ToolTip>Replace with your class name.</ToolTip>
															<Default>Example</Default>
															<Function />
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="type decl" Language="">Public Shared Operator &lt;>(ByVal left As $ClassName$, ByVal right As $ClassName$) As Boolean


    End Operator

    Public Shared Operator =(ByVal left As $ClassName$,ByVal right As $ClassName$) As Boolean


    End Operator</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Function with Generic Parameters</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines a Function that uses Generic parameters.</Description>
												<Shortcut>FuncGeneric</Shortcut>
											</Header>
											<Imports>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>FunctionName</ID>
															<Type>String</Type>
															<ToolTip>Replace with function name.</ToolTip>
															<Default>MyFunction</Default>
														</Literal>
														<Literal>
															<ID>ReturnType</ID>
															<Type></Type>
															<ToolTip>Replace with return type.</ToolTip>
															<Default>Integer</Default>
														</Literal>
														<Literal>
															<ID>ReturnValue</ID>
															<Type></Type>
															<ToolTip>Replace with the return value.</ToolTip>
															<Default>0</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Function $FunctionName$(Of T)() As $ReturnType$
    Return $ReturnValue$
End Function</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Function with a Parameter Array</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines a Function that takes a variable number of parameters.</Description>
												<Shortcut>FuncParArr</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>MethodName</ID>
															<Type></Type>
															<ToolTip>Replace with the name of the function.</ToolTip>
															<Default>MyMethod</Default>
														</Literal>
														<Literal>
															<ID>ParamType</ID>
															<Type></Type>
															<ToolTip>Replace with the data type of the parameter.</ToolTip>
															<Default>Integer</Default>
														</Literal>
														<Literal>
															<ID>ParamName</ID>
															<Type></Type>
															<ToolTip>Replace with the name of the parameter.</ToolTip>
															<Default>paramOne</Default>
														</Literal>
														<Literal>
															<ID>ReturnType</ID>
															<Type></Type>
															<ToolTip>Replace with the return type of the function.</ToolTip>
															<Default>Integer</Default>
														</Literal>
														<Literal>
															<ID>ReturnValue</ID>
															<Type></Type>
															<ToolTip>Replace with the return value of the function.</ToolTip>
															<Default>0</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Function $MethodName$(ByVal ParamArray $ParamName$() As $ParamType$) As $ReturnType$
    For index As Integer = 0 To $paramName$.Length - 1

    Next
    Return $ReturnValue$
End Function</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Sub that is Overridable</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines an Overridable Sub.</Description>
												<Shortcut>SubOver</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>MethodName</ID>
															<Type></Type>
															<ToolTip>Replace with the name of the function.</ToolTip>
															<Default>MyMethod</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Overridable Sub $MethodName$()

End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Function</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Uses the Function keyword to define a procedure that returns a value.</Description>
												<Keywords>
												</Keywords>
												<Shortcut>Function</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>FuncName</ID>
															<Type></Type>
															<ToolTip>Replace with the name of the function.</ToolTip>
															<Default>MyFunc</Default>
														</Literal>
														<Literal>
															<ID>ReturnType</ID>
															<Type></Type>
															<ToolTip>Replace with the return type of the function.</ToolTip>
															<Default>Integer</Default>
														</Literal>
														<Literal>
															<ID>ReturnValue</ID>
															<Type></Type>
															<ToolTip>Replace with the return value of the function.</ToolTip>
															<Default>0</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Function $FuncName$() As $ReturnType$

Return $ReturnValue$
End Function	</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Sub</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Uses the Sub keyword to define a procedure that does not return a value.</Description>
												<Keywords>
												</Keywords>
												<Shortcut>Sub</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>SubName</ID>
															<Type></Type>
															<ToolTip>Replace with the sub name.</ToolTip>
															<Default>MySub</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Sub $SubName$()

End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a ReadOnly Property</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines a ReadOnly Property with a backing field.</Description>
												<Shortcut>PropRead</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>PropertyName</ID>
															<Type>String</Type>
															<ToolTip>Replace with property name.</ToolTip>
															<Default>NewProperty</Default>
														</Literal>
														<Literal>
															<ID>PropertyType</ID>
															<Type>
															</Type>
															<ToolTip>Replace with the property type.</ToolTip>
															<Default>Integer</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>PrivateVariable</ID>
															<Type>Object</Type>
															<ToolTip>Replace this with the private variable name.</ToolTip>
															<Default>newPropertyValue</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Private $PrivateVariable$ As $PropertyType$
Public ReadOnly Property $PropertyName$() As $PropertyType$
    Get
        Return $PrivateVariable$ 
    End Get
End Property</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Sub that Overrides Dispose</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Overrides the Dispose Function according to the Dispose Finalize pattern.</Description>
												<Keywords>
													<Keyword>IDisposable</Keyword>
													<Keyword>Finalize</Keyword>
													<Keyword>Dispose</Keyword>
													<Keyword>release</Keyword>
													<Keyword>resource</Keyword>
												</Keywords>
												<Shortcut>Dispose</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.ComponentModel</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method decl" Language="">
		      Protected Overrides Sub Dispose(ByVal disposing As Boolean)
        MyBase.Dispose(disposing)
        If disposing Then
            ' TODO: free unmanaged resources when explicitly called
        End If

        ' TODO: free shared unmanaged resources
    End Sub
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Sub with a ByRef parameter</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines a Sub with an argument whose value can be changed by the code in the method.</Description>
												<Shortcut>SubByRef</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
											</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>MethodName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the method name.</ToolTip>
															<Default>MyMethod</Default>
														</Literal>
														<Literal>
															<ID>ParameterName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the parameter name.</ToolTip>
															<Default>paramName</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>ParameterType</ID>
															<Type>Type</Type>
															<ToolTip>Replace with the Type of the parameter</ToolTip>
															<Default>String</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Sub $MethodName$(ByRef $ParameterName$ As $ParameterType$)

End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a WriteOnly Property</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines a WriteOnly Property with a backing field.</Description>
												<Shortcut>PropWrite</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>PropertyName</ID>
															<Type>String</Type>
															<ToolTip>Replace with property name.</ToolTip>
															<Default>NewProperty</Default>
														</Literal>
														<Literal>
															<ID>PropertyType</ID>
															<Type>
															</Type>
															<ToolTip>Replace with the property type.</ToolTip>
															<Default>Integer</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>PrivateVariable</ID>
															<Type>Object</Type>
															<ToolTip>Replace this with the private variable name.</ToolTip>
															<Default>newPropertyValue</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Private $PrivateVariable$ As $PropertyType$
Public WriteOnly Property $PropertyName$() As $PropertyType$
    Set(ByVal value as $PropertyType$)
        $PrivateVariable$ = value
    End Set
End Property</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Types</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Define an Enumeration</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines an enumeration.</Description>
												<Shortcut>Enum</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Value1</ID>
															<Type>
															</Type>
															<ToolTip>Replace with value of named constant.</ToolTip>
															<Default>ValueOne</Default>
														</Literal>
														<Literal>
															<ID>Value2</ID>
															<Type>
															</Type>
															<ToolTip>Replace with value of named constant.</ToolTip>
															<Default>ValueTwo</Default>
														</Literal>
														<Literal>
															<ID>EnumName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the enumeration name.</ToolTip>
															<Default>MyEnum</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Enum $EnumName$
     $Value1$
     $Value2$
End Enum</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define an Enumeration with Custom Values</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines an enumeration with specified integer values.</Description>
												<Shortcut>EnumCustom</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Enum1</ID>
															<Type>String</Type>
															<ToolTip>Replace with an enumeration value.</ToolTip>
															<Default>ValueOne</Default>
														</Literal>
														<Literal>
															<ID>Enum2</ID>
															<Type>String</Type>
															<ToolTip>Replace with an enumeration value.</ToolTip>
															<Default>ValueTwo</Default>
														</Literal>
														<Literal>
															<ID>Value1</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with an Integer.</ToolTip>
															<Default>2</Default>
														</Literal>
														<Literal>
															<ID>Value2</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with an Integer.</ToolTip>
															<Default>3</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>EnumName</ID>
															<Type>String</Type>
															<ToolTip>Replace with enumeration name.</ToolTip>
															<Default>MyEnum</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="type decl" Language="">Enum $EnumName$
    $Enum1$ = $Value1$
    $Enum2$ = $Value2$
End Enum</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a New Generic Type</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines a Generic Type.</Description>
												<Shortcut>Generic</Shortcut>
											</Header>
											<Imports>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>TypeName</ID>
															<Type></Type>
															<ToolTip>Replace with the name of the class.</ToolTip>
															<Default>MyClass</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="type decl" Language="">Class $TypeName$(Of T)

End Class</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define an Interface</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines an interface.</Description>
												<Shortcut>Interface</Shortcut>
											</Header>
											<References>
											</References>
											<Imports>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>InterfaceName</ID>
															<Type></Type>
															<ToolTip>Replace with the name of the interface.</ToolTip>
															<Default>MyInterface</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="type decl" Language="">Interface I$InterfaceName$

End Interface</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Structure </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Defines a structure.</Description>
												<Shortcut>Struct</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>StructureName</ID>
															<Type></Type>
															<ToolTip>Replace with the structure name.</ToolTip>
															<Default>MyStructure</Default>
														</Literal>
														<Literal>
															<ID>Member1Name</ID>
															<Type></Type>
															<ToolTip>Replace with a structure member.</ToolTip>
															<Default>ValueOne</Default>
														</Literal>
														<Literal>
															<ID>Member1Type</ID>
															<Type></Type>
															<ToolTip>Replace with the data type of the structure member.</ToolTip>
															<Default>Integer</Default>
														</Literal>
														<Literal>
															<ID>Member2Name</ID>
															<Type></Type>
															<ToolTip>Replace with a structure member.</ToolTip>
															<Default>ValueTwo</Default>
														</Literal>
														<Literal>
															<ID>Member2Type</ID>
															<Type></Type>
															<ToolTip>Replace with the data type of the structure member.</ToolTip>
															<Default>Boolean</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="type decl" Language="">
      Structure $StructureName$
    Public $Member1Name$ As $Member1Type$
    Public $Member2Name$ As $Member2Type$
End Structure</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Find the Name of an Enumeration Value</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Gets the string name of an enumeration value.</Description>
												<Shortcut>EnumStr</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>EnumValue</ID>
															<Type>Integer</Type>
															<ToolTip>Replace this with the value of the enumeration constant.</ToolTip>
															<Default>0</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>EnumerationName</ID>
															<Type>System.Enum
															</Type>
															<ToolTip>Replace with the name of the enumeration.</ToolTip>
															<Default>DateInterval</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim name As String = _
    System.Enum.GetName(GetType($EnumerationName$), $EnumValue$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Define a Class that Implements IDisposable</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Implements the Dispose Finalize pattern.</Description>
												<Keywords>
													<Keyword>IDisposable</Keyword>
													<Keyword>Finalize</Keyword>
													<Keyword>Dispose</Keyword>
													<Keyword>release</Keyword>
													<Keyword>resource</Keyword>
												</Keywords>
												<Shortcut>IDispose</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.ComponentModel</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>ClassName</ID>
															<Type />
															<ToolTip>Replace with the name of the class you are implementing.</ToolTip>
															<Default>ResourceClass</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="type decl" Language="">
		  Class $ClassName$
    Implements IDisposable

    Private disposed As Boolean = False        ' To detect redundant calls

    ' IDisposable
    Protected Overridable Sub Dispose(ByVal disposing As Boolean)
        If Not Me.disposed Then
            If disposing Then
                ' TODO: free unmanaged resources when explicitly called
            End If

            ' TODO: free shared unmanaged resources
        End If
        Me.disposed = True
    End Sub

#Region " IDisposable Support "
    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub

    Protected Overrides Sub Finalize()
        ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
        Dispose(False)
        MyBase.Finalize()
    End Sub
#End Region

End Class
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
							</CodeSnippetMembers>
						</Member>
						<Member>
							<Name>Connectivity and Networking</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippets>
								<Snippet>
									<Header>
										<Title>Convert a Relative Uri to an Absolute Uri</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Converts a relative Uri to an absolute Uri</Description>
										<Shortcut>conConv</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>uri1</ID>
													<Type />
													<ToolTip>Replace with base URI.</ToolTip>
													<Default>"http://www.contoso.com/"</Default>
													<Function />
												</Literal>
												<Literal>
													<ID>uri2</ID>
													<Type />
													<ToolTip>Replace with relative URI.</ToolTip>
													<Default>"images/index.htm?id=null"</Default>
													<Function />
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim baseUri As New Uri($uri1$)
Dim relativeUri As New Uri($uri2$)

' Compose absolute Uri using the base and the relative Uri.
Dim absoluteUri As New Uri(baseUri, relativeUri)

Dim absolute As String = absoluteUri.AbsolutePath()</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Determine if the Network is Available</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Determines whether the network connection is available on the local computer.</Description>
										<Shortcut>conAvail</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method body" Language="">Dim isAvailable As Boolean
isAvailable = My.Computer.Network.IsAvailable</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Download a File using Http</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Downloads a file using http.</Description>
										<Shortcut>conDown</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>url</ID>
													<Type>String</Type>
													<ToolTip>Replace with URL of the file to download.</ToolTip>
													<Default>"http://www.URLtoDownloadFrom.net"</Default>
												</Literal>
												<Literal>
													<ID>location</ID>
													<Type>String</Type>
													<ToolTip>Replace with path to the local file.</ToolTip>
													<Default>"C:\filename.html"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">My.Computer.Network.DownloadFile($url$, $location$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Enumerate Serial Ports</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Shows how to enumerate serial ports using the My object.</Description>
										<Shortcut>conPorts</Shortcut>
									</Header>
									<Code Delimiter="$" Kind="method body" Language="">For Each portName As String In My.Computer.Ports.SerialPortNames
    
Next</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Ping Another Computer</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Determines whether the specified Web site responds.</Description>
										<Shortcut>conPing</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Web.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>url</ID>
													<ToolTip>Replace with the hostname or IP address of computer you wish to ping</ToolTip>
													<Default>"somehost.my.domain"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim siteResponds As Boolean = False
siteResponds = My.Computer.Network.Ping($url$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Read Data from a Serial Port</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Reads Data from a Serial Port</Description>
										<Shortcut>conReadPort</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.Text</Namespace>
										</Import>
										<Import>
											<Namespace>System.IO.Ports</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>COM</ID>
													<ToolTip>Replace with the name of the COM port.</ToolTip>
													<Default>"COM1"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim buffer As New StringBuilder()
Using comPort As SerialPort = My.Computer.Ports.OpenSerialPort($COM$)
    Do
        Dim line As String = comPort.ReadLine()
        If line Is Nothing Then
            Exit Do
        Else
            buffer.AppendLine(line)
        End If
    Loop
End Using</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Create an E-Mail Message </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Uses the MailMessage class to send an e-mail message.</Description>
										<Shortcut>conEmail</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.Net.Mail</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>recipient</ID>
													<ToolTip>Replace with the e-mail address of the recipient of the e-mail.</ToolTip>
													<Default>"from@address"</Default>
												</Literal>
												<Literal>
													<ID>sender</ID>
													<ToolTip>Replace with the e-mail address of the sender.</ToolTip>
													<Default>"sender@address"</Default>
												</Literal>
												<Literal>
													<ID>message</ID>
													<ToolTip>Replace with the text of the message.</ToolTip>
													<Default>"Message Text"</Default>
												</Literal>
												<Literal>
													<ID>subject</ID>
													<ToolTip>Replace with the contents of the subject line for the e-mail.</ToolTip>
													<Default>"Subject"</Default>
												</Literal>
												<Literal>
													<ID>serverName</ID>
													<ToolTip>Replace with the name of the SMTP server.</ToolTip>
													<Default>"Email Server Name"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim message As New MailMessage($sender$, $recipient$, $subject$, $message$)
Dim emailClient As New SmtpClient($serverName$)
emailClient.Send(message)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Upload a File Using My.Computer.Network</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Uploads a local file to the Internet.</Description>
										<Shortcut>conUpload</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>address</ID>
													<Type>String</Type>
													<ToolTip>The address of the upload script or destination filename</ToolTip>
													<Default>"http://www.someserver.com/upload.aspx"</Default>
												</Literal>
												<Literal>
													<ID>localFile</ID>
													<Type>String</Type>
													<ToolTip>The path of the file to upload.</ToolTip>
													<Default>"c:\File.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">My.Computer.Network.UploadFile($localFile$, $address$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Use a SerialPort to Dial a Phone Number</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Uses a SerialPort to dial a phone number.</Description>
										<Shortcut>condialser</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.IO.Ports</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>com</ID>
													<ToolTip>Replace with name of the COM port for the modem.</ToolTip>
													<Default>"COM1"</Default>
												</Literal>
												<Literal>
													<ID>baud</ID>
													<ToolTip>Replace with baud rate.</ToolTip>
													<Default>2400</Default>
												</Literal>
												<Literal>
													<ID>dial</ID>
													<ToolTip>Replace with dialing command String.</ToolTip>
													<Default>"ATDT 206-555-1000"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Using comPort As SerialPort = My.Computer.Ports.OpenSerialPort($Com$, $Baud$)
    comPort.DtrEnable = True
    comPort.Write($Dial$ &amp; vbCrLf)

    ' All data transfer code goes here.

End Using</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
							</CodeSnippets>
						</Member>
						<Member>
							<Name>Crystal Reports</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippets>
								<Snippet>
									<Header>
											<Title>Change the Server name and Database name</Title>
											<Author>Business Objects</Author>
											<Description>Changes a Server name and Database name used by the report.</Description>
											<HelpUrl>http://www.businessobjects.com/products/dev_zone/net/default.asp</HelpUrl>
											<Keywords>
											</Keywords>
											<Shortcut>crChangeDBLogon</Shortcut>
											<Location>Crystal Reports</Location>
									</Header>
									<References>
										<Reference>
											<Assembly>CrystalDecisions.CrystalReports.Engine.dll</Assembly>
											<URL />
										</Reference>
										<Reference>
											<Assembly>CrystalDecisions.Shared.dll</Assembly>
											<URL />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.CrystalReports.Engine</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.Shared</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>FileName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the name of the report file that you want to change the database logon.</ToolTip>
													<Default>"C:\My Crystal Reports\Report Name.rpt"</Default>
												</Literal>
												<Literal>
													<ID>OldServerName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the old server name that is used in the report. </ToolTip>
													<Default>"OldServer"</Default>
												</Literal>
												<Literal>
													<ID>NewServerName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the new server name that the report will be using. </ToolTip>
													<Default>"NewServer"</Default>
												</Literal>
												<Literal>
													<ID>OldDatabaseName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the old database name that is used in the report. </ToolTip>
													<Default>"OldDatabase"</Default>
												</Literal>
												<Literal>
													<ID>NewDatabaseName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the new database name that the report will be using. </ToolTip>
													<Default>"NewDatabase"</Default>
												</Literal>
												<Literal>
													<ID>UserID</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the user ID to logon to the new server. </ToolTip>
													<Default>"MyUserID"</Default>
												</Literal>
												<Literal>
													<ID>Password</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the user's password to logon to the new server. </ToolTip>
													<Default>"MyPassword"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim report As New ReportDocument()
        Dim connection As IConnectionInfo
        Dim oldServerName As String = $OldServerName$
        Dim newServerName As String = $NewServerName$
        Dim oldDatabaseName As String = $OldDatabaseName$
        Dim newDatabaseName As String = $NewDatabaseName$
        Dim userID As String = $UserID$
        Dim password As String = $Password$

        report.Load($FileName$)

        ' Change the server name and database in main reports
        For Each connection In report.DataSourceConnections
	        If (String.Compare(connection.ServerName, oldServerName, True) = 0 _
	            And String.Compare(connection.DatabaseName, oldDatabaseName, True) = 0) Then
                ' SetConnection can also be used to set new logon and new database table
		        report.DataSourceConnections(oldServerName, oldDatabaseName).SetConnection( _
		        newServerName, newDatabaseName, userID, password)
	        End If
        Next

        ' Change the server name and database in subreports
        Dim subreport As ReportDocument
        For Each subreport In report.Subreports
	        For Each connection In subreport.DataSourceConnections
		        If (String.Compare(connection.ServerName, oldServerName, True) = 0 _
		            And String.Compare(connection.DatabaseName, oldDatabaseName, True) = 0) Then
		            ' SetConnection can also be used to set new logon and new database table
			        subreport.DataSourceConnections(oldServerName, oldDatabaseName).SetConnection( _
			        newServerName, newDatabaseName, userID, password)
		        End If
	        Next
        Next
			
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Export a Crystal Report to a file</Title>
										<Author>Business Objects</Author>
										<Description>Exports a Crystal Report to a file.</Description>
										<HelpUrl>http://www.businessobjects.com/products/dev_zone/net/default.asp</HelpUrl>
										<Keywords>
										</Keywords>
										<Shortcut>crExportRptToDisk</Shortcut>
										<Location>Crystal Reports</Location>
									</Header>
									<References>
										<Reference>
											<Assembly>CrystalDecisions.CrystalReports.Engine.dll</Assembly>
											<URL />
										</Reference>
										<Reference>
											<Assembly>CrystalDecisions.Shared.dll</Assembly>
											<URL />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.CrystalReports.Engine</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.Shared</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>FileName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the name of the report file you want to export from.</ToolTip>
													<Default>"C:\My Crystal Reports\Report Name.rpt"</Default>
												</Literal>
												<Literal>
													<ID>ExportFormatType</ID>
													<Type>String</Type>
													<ToolTip>Replace this value with the export format Type that you want to export the report to.</ToolTip>
													<Default>ExportFormatType.PortableDocFormat</Default>
												</Literal>
												<Literal>
													<ID>DestinationFileName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the file name you want to export the report to.</ToolTip>
													<Default>"C:\My Crystal Reports\Report Name.pdf"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">' You can change other export options like page range by calling Export method with a ExportOptions object.
				Dim report As New ReportDocument()
				report.Load($FileName$)
				report.ExportToDisk($ExportFormatType$, $DestinationFileName$)
				report.Close()
                
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Exports a Crystal Report to a PDF file with custom export format options</Title>
										<Author>Business Objects</Author>
										<Description>Exports a Crystal Report to a PDF file with custom export format options. </Description>
										<HelpUrl>http://www.businessobjects.com/products/dev_zone/net/default.asp</HelpUrl>
										<Keywords>
										</Keywords>
										<Shortcut>crExportRptWithOptions</Shortcut>
										<Location>Crystal Reports</Location>
									</Header>
									<References>
										<Reference>
											<Assembly>CrystalDecisions.CrystalReports.Engine.dll</Assembly>
											<URL />
										</Reference>
										<Reference>
											<Assembly>CrystalDecisions.Shared.dll</Assembly>
											<URL />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.CrystalReports.Engine</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.Shared</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>FileName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the name of the report file you want to export from.</ToolTip>
													<Default>"C:\My Crystal Reports\Report Name.rpt"</Default>
												</Literal>
												<Literal>
													<ID>DestinationFileName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the file name you want to export the report to.</ToolTip>
													<Default>"C:\My Crystal Reports\Report Name.pdf"</Default>
												</Literal>
												<Literal>
													<ID>usePageRange</ID>
													<Type>Boolean</Type>
													<ToolTip>Set this boolean to true if the FirstPageNumber and LastPageNumber should be used.</ToolTip>
													<Default>True</Default>
												</Literal>
												<Literal>
													<ID>startPage</ID>
													<Type>String</Type>
													<ToolTip>Replace this number with the first page number to print; use 0 to specify whole report.</ToolTip>
													<Default>1</Default>
												</Literal>
												<Literal>
													<ID>endPage</ID>
													<Type>String</Type>
													<ToolTip>Replace this number with the last page number to print; use 0 to specify whole report.</ToolTip>
													<Default>5</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim report As New ReportDocument()
                Dim exportOptions As New ExportOptions()
                Dim pdfExportFormatOptions As New PdfRtfWordFormatOptions()
                Dim diskDestinationOptions As New DiskFileDestinationOptions()

                ' Set the export format and format options
                exportOptions.ExportFormatType = ExportFormatType.PortableDocFormat
                pdfExportFormatOptions.FirstPageNumber = $startPage$
                pdfExportFormatOptions.LastPageNumber = $endPage$
                pdfExportFormatOptions.UsePageRange = $usePageRange$
                exportOptions.ExportFormatOptions = pdfExportFormatOptions

                ' Set the disk file options.
                exportOptions.ExportDestinationType = ExportDestinationType.DiskFile
                diskDestinationOptions.DiskFileName = $DestinationFileName$
                exportOptions.DestinationOptions = diskDestinationOptions

                report.Load($FileName$)
                report.Export(exportOptions)
                report.Close()
                    
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Print a Crystal Report </Title>
										<Author>Business Objects</Author>
										<Description>Prints a Crystal Report to the printer specified in the PrintOptions.</Description>
										<HelpUrl>http://www.businessobjects.com/products/dev_zone/net/default.asp</HelpUrl>
										<Keywords>
										</Keywords>
										<Shortcut>crPrintRpt</Shortcut>
										<Location>Crystal Reports</Location>
									</Header>
									<References>
										<Reference>
											<Assembly>CrystalDecisions.Shared.dll</Assembly>
											<URL />
										</Reference>
										<Reference>
											<Assembly>CrystalDecisions.CrystalReports.Engine.dll</Assembly>
											<URL />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.Shared</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.CrystalReports.Engine</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>FileName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the name of the report file you want to print.</ToolTip>
													<Default>"C:\My Crystal Reports\Report Name.rpt"</Default>
												</Literal>
												<Literal>
													<ID>copies</ID>
													<Type>String</Type>
													<ToolTip>Replace this number with the number of copies of Crystal Report you want to print.</ToolTip>
													<Default>1</Default>
												</Literal>
												<Literal>
													<ID>collated</ID>
													<Type>Boolean</Type>
													<ToolTip>Replace this boolean with false if you do not want to print the Crystal Report collated.</ToolTip>
													<Default>true</Default>
												</Literal>
												<Literal>
													<ID>startPage</ID>
													<Type>String</Type>
													<ToolTip>Replace this number with the first page number to print; use 0 to specify whole report.</ToolTip>
													<Default>0</Default>
												</Literal>
												<Literal>
													<ID>endPage</ID>
													<Type>String</Type>
													<ToolTip>Replace this number with the last page number to print; use 0 to specify whole report.</ToolTip>
													<Default>0</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">' You can change more print options via PrintOptions property of ReportDocument
                Dim report As New ReportDocument()
                report.Load($FileName$)
                report.PrintToPrinter($copies$, $collated$, $startPage$, $endPage$)
                report.Close()
                
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Set a Discrete Parameter Value to a Crystal Report</Title>
										<Author>Business Objects</Author>
										<Description>Sets a discrete parameter value.</Description>
										<HelpUrl>http://www.businessobjects.com/products/dev_zone/net/default.asp</HelpUrl>
										<Keywords>
										</Keywords>
										<Shortcut>crSetDiscreteParam</Shortcut>
										<Location>Crystal Reports</Location>
									</Header>
									<References>
										<Reference>
											<Assembly>CrystalDecisions.CrystalReports.Engine.dll</Assembly>
											<URL />
										</Reference>
										<Reference>
											<Assembly>CrystalDecisions.Shared.dll</Assembly>
											<URL />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.CrystalReports.Engine</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.Shared</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>ReportName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the name of the report file you want to set the parameter value to.</ToolTip>
													<Default>"C:\My Crystal Reports\Report Name.rpt"</Default>
												</Literal>
												<Literal>
													<ID>DiscreteValue</ID>
													<Type>String</Type>
													<ToolTip>Replace this value with new one according to parameter value kind that the report will be using. </ToolTip>
													<Default>100.0</Default>
												</Literal>
												<Literal>
													<ID>ParameterName</ID>
													<Type>String</Type>
													<ToolTip>Replace this value with the parameter name that the report will be using. </ToolTip>
													<Default>"Parameter1"</Default>
												</Literal>
												<Literal>
													<ID>SubreportName</ID>
													<Type>String</Type>
													<ToolTip>Replace this value with the subreport name that the report will be using. </ToolTip>
													<Default>subreportName.rpt</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim report as new ReportDocument()
                report.Load($ReportName$)
                
                Dim parameterField As ParameterField
                parameterField = report.ParameterFields($ParameterName$)

                ' If the parameter is from a subreport, specify the subreport name
                ' parameterField = report.ParameterFields($ParameterName$, $SubreportName$)

                ' Add all parameters value here
                parameterField.CurrentValues.AddValue($DiscreteValue$)
                
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Set a Range Parameter Value to a Crystal Report</Title>
										<Author>Business Objects</Author>
										<Description>Sets a range parameter value to a Crystal Report.</Description>
										<HelpUrl>http://www.businessobjects.com/products/dev_zone/net/default.asp</HelpUrl>
										<Keywords>
										</Keywords>
										<Shortcut>crSetRangeParam</Shortcut>
										<Location>Crystal Reports</Location>
									</Header>
									<References>
										<Reference>
											<Assembly>CrystalDecisions.CrystalReports.Engine.dll</Assembly>
											<URL />
										</Reference>
										<Reference>
											<Assembly>CrystalDecisions.Shared.dll</Assembly>
											<URL />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.CrystalReports.Engine</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.Shared</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>ReportName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the name of the report file you want to set the parameter value to.</ToolTip>
													<Default>"C:\My Crystal Reports\Report Name.rpt"</Default>
												</Literal>
												<Literal>
													<ID>ParameterName</ID>
													<Type>String</Type>
													<ToolTip>Replace this value with the parameter name that the report will be using. </ToolTip>
													<Default>"Parameter1"</Default>
												</Literal>
												<Literal>
													<ID>SubreportName</ID>
													<Type>String</Type>
													<ToolTip>Replace this value with the subreport name that the report will be using. </ToolTip>
													<Default>subreportName.rpt</Default>
												</Literal>
												<Literal>
													<ID>StartValue</ID>
													<Type>String</Type>
													<ToolTip>Replace this StartValue of the range Parameter field with the new value that the report will be using. </ToolTip>
													<Default>0.0</Default>
												</Literal>
												<Literal>
													<ID>EndValue</ID>
													<Type>String</Type>
													<ToolTip>Replace this EndValue of the range Parameter field with the new value that the report will be using. </ToolTip>
													<Default>100.0</Default>
												</Literal>
												<Literal>
													<ID>LowerBoundType</ID>
													<Type>RangeBoundType</Type>
													<ToolTip>Replace this LowerBoundType of the range Parameter field with the new RangeBoundType type value that is used in the report. </ToolTip>
													<Default>RangeBoundType.BoundInclusive</Default>
												</Literal>
												<Literal>
													<ID>UpperBoundType</ID>
													<Type>RangeBoundType</Type>
													<ToolTip>Replace this UpperBoundType of the range Parameter field with the new RangeBoundType type value that the report will be using. </ToolTip>
													<Default>RangeBoundType.BoundInclusive</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim report as new ReportDocument()
                report.Load($ReportName$)
                
                Dim parameterField As ParameterField
                parameterField = report.ParameterFields($ParameterName$)

                ' If the parameter is from a subreport, specify the subreport name
                ' parameterField = report.ParameterFields($ParameterName$, $SubreportName$)

                ' Add all parameters value here
                ParameterField.CurrentValues.AddRange($StartValue$, $EndValue$, $LowerBoundType$, $UpperBoundType$)
                
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Set Database Logon to a Crystal Report and its subreports</Title>
										<Author>Business Objects</Author>
										<Description>Sets a database logon to a Crystal Report and its subreports.</Description>
										<HelpUrl>http://www.businessobjects.com/products/dev_zone/net/default.asp</HelpUrl>
										<Keywords>
										</Keywords>
										<Shortcut>crSetDBLogon</Shortcut>
										<Location>Crystal Reports</Location>
									</Header>
									<References>
										<Reference>
											<Assembly>CrystalDecisions.CrystalReports.Engine.dll</Assembly>
											<URL />
										</Reference>
										<Reference>
											<Assembly>CrystalDecisions.Shared.dll</Assembly>
											<URL />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.CrystalReports.Engine</Namespace>
										</Import>
										<Import>
											<Namespace>CrystalDecisions.Shared</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>FileName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the name of the report file you want to set the database logon to.</ToolTip>
													<Default>"C:\My Crystal Reports\Report Name.rpt"</Default>
												</Literal>
												<Literal>
													<ID>ServerName</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the name of the server that you would like to logon. </ToolTip>
													<Default>"Server1"</Default>
												</Literal>
												<Literal>
													<ID>UserID</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the user ID to logon to the new server. </ToolTip>
													<Default>"MyUserID"</Default>
												</Literal>
												<Literal>
													<ID>Password</ID>
													<Type>String</Type>
													<ToolTip>Replace this string with the user's password to logon to the new server. </ToolTip>
													<Default>"MyPassword"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim report As New ReportDocument()
            Dim connection As IConnectionInfo
            Dim serverName1 As String = $ServerName$
            Dim userID As String = $UserID$
            Dim password As String = $Password$

            report.Load($FileName$)

            ' Set Database Logon to main report
            For Each connection In report.DataSourceConnections
                Select Case connection.ServerName
                    Case serverName1
                        connection.SetLogon(userID, password)
                End Select
            Next

            ' Set Database Logon to subreport
            Dim subreport As ReportDocument
            For Each subreport In report.Subreports
                For Each connection In subreport.DataSourceConnections
                    Select Case connection.ServerName
                        Case serverName1
                            connection.SetLogon(userID, password)
                    End Select
                Next
            Next
                
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
							</CodeSnippets>
						</Member>
						<Member>
							<Name>Data - Designer features and ADO.NET</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippets>
								<Snippet>
									<Header>
										<Title>Add a new row to a typed DataTable</Title>
										<Description>Adds a new row to a typed DataTable </Description>
										<Shortcut>adoNewRow</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Data.dll</Assembly>
										</Reference>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
										</Reference>
									</References>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>column1</ID>
													<ToolTip>Replace with the first column of the new DataRow.</ToolTip>
													<Default>CustomerID</Default>
												</Literal>
												<Literal>
													<ID>column2</ID>
													<ToolTip>Replace with the second column of the new DataRow.</ToolTip>
													<Default>CompanyName</Default>
												</Literal>
												<Literal>
													<ID>column1Value</ID>
													<ToolTip>Replace with the new value for this column.</ToolTip>
													<Default>"A124"</Default>
												</Literal>
												<Literal>
													<ID>column2Value</ID>
													<ToolTip>Replace with the new value for this column.</ToolTip>
													<Default>"Acme"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>dataTableType</ID>
													<Type>DataRow</Type>
													<ToolTip>Replace with the Row Type to add.</ToolTip>
													<Default>NorthwindDataSet.CustomersRow</Default>
												</Literal>
												<Literal>
													<ID>table</ID>
													<Type>DataTable</Type>
													<ToolTip>Replace with the DataTable for the new row.</ToolTip>
													<Default>Me.NorthwindDataSet.Customers</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim newRow As $dataTableType$ = $table$.NewRow()
newRow.$column1$= $column1Value$
newRow.$column2$= $column2Value$
$table$.Rows.Add(newRow)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Call the ExecuteNonQuery Method of a SqlCommand</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Calls ExecuteNonQuery on an existing command.Wraps the execution in a try/finally block to return the connection object to it's previous state</Description>
										<Shortcut>adoExecNonQuery</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Data.dll</Assembly>
										</Reference>
										<Reference>
											<Assembly>System.XML.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Data</Namespace>
										</Import>
										<Import>
											<Namespace>System.Data.SqlClient</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>conn</ID>
													<Type>SqlConnection</Type>
													<ToolTip>Replace with a connection object.</ToolTip>
													<Default>conn</Default>
												</Literal>
												<Literal>
													<ID>cmd</ID>
													<Type>SqlCommand</Type>
													<ToolTip>Replace with a command object to execute.</ToolTip>
													<Default>cmd</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">        Dim rowCount As Integer
        Dim previousConnectionState As ConnectionState
        previousConnectionState = $conn$.State
        Try
            If $conn$.State = ConnectionState.Closed Then
                $conn$.Open()
            End If
            rowCount = $cmd$.ExecuteNonQuery()

        Finally
            If previousConnectionState = ConnectionState.Closed Then
                $conn$.Close()
            End If
        End Try</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Call the ExecuteReader Method of a SqlCommand</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Fetches data from a database using the SqlCommand.ExecuteReader method of an existing data command.</Description>
										<Shortcut>adoExecReader</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Data.dll</Assembly>
										</Reference>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Data</Namespace>
										</Import>
										<Import>
											<Namespace>System.Data.SqlClient</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>ProcessSprocResult</ID>
													<Type>String</Type>
													<ToolTip>Replace with your code to process the result of the DataReader.</ToolTip>
													<Default>Console.WriteLine(reader.GetValue(0))</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>conn</ID>
													<Type>SqlConnection</Type>
													<ToolTip>Replace with an existing connection object.</ToolTip>
													<Default>conn</Default>
												</Literal>
												<Literal>
													<ID>cmd</ID>
													<Type>SqlCommand</Type>
													<ToolTip>Replace with a SqlCommand to call ExecuteReader on.</ToolTip>
													<Default>cmd</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim reader As SqlDataReader
Dim previousConnectionState As ConnectionState = $conn$.State
Try
If $conn$.State = ConnectionState.Closed Then
	$conn$.Open()
End If
reader = $cmd$.ExecuteReader()
Using reader
	While reader.Read
		' Process SprocResults datareader here.
		$ProcessSprocResult$
	End While
End Using
Finally
    If previousConnectionState = ConnectionState.Closed Then
        $conn$.Close()
    End If
End Try
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Call the ExecuteScalar Method of a SqlCommand</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Executes a SQL statement that returns a single value using the SqlCommand.ExecuteScalar method of an existing data command.</Description>
										<Shortcut>adoExecScalar</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Data.dll</Assembly>
										</Reference>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Data</Namespace>
										</Import>
										<Import>
											<Namespace>System.Data.SqlClient</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>conn</ID>
													<Type>System.Data.SqlClient.SqlConnection</Type>
													<ToolTip>Replace with an existing connection object.</ToolTip>
													<Default>conn</Default>
												</Literal>
												<Literal>
													<ID>cmd</ID>
													<Type>System.Data.SqlClient.SqlCommand</Type>
													<ToolTip>The name of an existing SqlCommand to execute</ToolTip>
													<Default>cmd</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim result As Object
Dim previousConnectionState As ConnectionState = $conn$.State
Try
	If $conn$.State = ConnectionState.Closed Then
		$conn$.Open()
	End If
	result = $cmd$.ExecuteScalar()
Finally
    If previousConnectionState = ConnectionState.Closed Then
        $conn$.Close()
    End If
End Try
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Converts BindingSource.Current to a specific row in a DataTable</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Gets the current row within a binding source and converts it to the specific row.Recomended method for capturing the current, rather then using BindingSource.Position which may return a different row based on the sorting of the DataView</Description>
										<Shortcut>dtBindingSourceCurrent</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Data</Assembly>
										</Reference>
										<Reference>
											<Assembly>System.XML</Assembly>
										</Reference>
									</References>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>rowType</ID>
													<Type>DataRow</Type>
													<ToolTip>Replace with the type for the DataRow from your dataset</ToolTip>
													<Default>NorthwindDataSet.CustomersRow</Default>
												</Literal>
												<Literal>
													<ID>bindingSource</ID>
													<Type>BindingSource</Type>
													<ToolTip>Replace with the BindingSource to capture the row from</ToolTip>
													<Default>CustomersBindingSource</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="" Language="">Dim row As $rowType$
row = CType(CType(Me.$bindingSource$.Current, DataRowView).Row, $rowType$)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Create a DataRelation</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Creates a data relation between two data tables in a dataset.</Description>
										<Shortcut>adoAddRelation</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
										</Reference>
										<Reference>
											<Assembly>System.Data.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Data</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>RelationName</ID>
													<Type>String</Type>
													<ToolTip>Replace with the name of the relation.</ToolTip>
													<Default>"CustomersOrders"</Default>
												</Literal>
												<Literal>
													<ID>ColumnName</ID>
													<Type>String</Type>
													<ToolTip>Replace with the column name.</ToolTip>
													<Default>"CustomerID"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>DataSet</ID>
													<Type>System.Data.DataSet</Type>
													<ToolTip>Replace with a DataSet object.</ToolTip>
													<Default>ds</Default>
												</Literal>
												<Literal>
													<ID>relationObjectName</ID>
													<Type>System.Data.DataRelation</Type>
													<ToolTip>The object name for the relation</ToolTip>
													<Default>customersOrdersRelation</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim $relationObjectName$ As New DataRelation($RelationName$, _
		$DataSet$.Customers.Columns($ColumnName$), _
		$DataSet$.Orders.Columns($ColumnName$))

$DataSet$.Relations.Add($relationObjectName$)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Create an Expression Column</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Creates a DataColumn object and sets the DataColumn.Expression property to calculate the order total.</Description>
										<Shortcut>adoAddExpression</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Data.dll</Assembly>
										</Reference>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Data</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>ColumnName</ID>
													<Type>String</Type>
													<ToolTip>Replace with the column name.</ToolTip>
													<Default>OrderTotal</Default>
												</Literal>
												<Literal>
													<ID>Expression</ID>
													<Type>String</Type>
													<ToolTip>Replace with an expression that evaluates to the column type.</ToolTip>
													<Default>UnitPrice * Quantity</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>DataSet</ID>
													<Type>System.Data.DataSet</Type>
													<ToolTip>Replace with a DataSet object.</ToolTip>
													<Default>ds</Default>
												</Literal>
												<Literal>
													<ID>ExpressionColumn</ID>
													<Type>System.Data.DataColumn</Type>
													<ToolTip>The new expression column to add to the DataTable</ToolTip>
													<Default>OrderTotalColumn</Default>
												</Literal>
												<Literal>
													<ID>DataTable</ID>
													<Type>System.Data.DataTable</Type>
													<ToolTip>The DataTable to add the expression column to</ToolTip>
													<Default>Order_Details</Default>
												</Literal>
												<Literal>
													<ID>ColumnDataType</ID>
													<ToolTip>Replace with datatype.</ToolTip>
													<Default>Double</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method decl" Language="">Dim $ExpressionColumn$ As New DataColumn()
$ExpressionColumn$.ColumnName = "$ColumnName$"
$ExpressionColumn$.DataType = GetType($ColumnDataType$)
$ExpressionColumn$.Expression = "$Expression$"
$DataSet$.$DataTable$.Columns.Add($ExpressionColumn$)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Create a Parameterized SELECT Command</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Calls the ExecuteReader method of a data command to execute a Select statement.</Description>
										<Shortcut>adoSelectwParams</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Data.dll</Assembly>
										</Reference>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Data.SqlClient</Namespace>
										</Import>
										<Import>
											<Namespace>System.Data</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>SQL</ID>
													<Type>String</Type>
													<ToolTip>Replace with a SQL statement.</ToolTip>
													<Default>SELECT CustomerID, CompanyName FROM Customers WHERE CompanyName LIKE @companyName</Default>
												</Literal>
												<Literal>
													<ID>sqlParameterName</ID>
													<Type>String</Type>
													<ToolTip>Replace with the SQL Parameter in your query.</ToolTip>
													<Default>@companyName</Default>
												</Literal>
												<Literal>
													<ID>parameterValue</ID>
													<Type>String</Type>
													<ToolTip>Replace with the value for the parameter.</ToolTip>
													<Default>"a%"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>parameter1</ID>
													<Type>SqlParameter</Type>
													<ToolTip>Replace with the name of the parameter referenced in code.</ToolTip>
													<Default>companyNameParam</Default>
												</Literal>
												<Literal>
													<ID>conn</ID>
													<Type>SqlConnection</Type>
													<ToolTip>Replace with a connection object.</ToolTip>
													<Default>conn</Default>
												</Literal>
												<Literal>
													<ID>cmd</ID>
													<Type>SqlCommand</Type>
													<ToolTip>Replace with the object name for your SqlCommand.</ToolTip>
													<Default>cmd</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim $cmd$ As New SqlCommand
$cmd$.CommandType = CommandType.Text
$cmd$.CommandText = "$SQL$"
$cmd$.Connection = $conn$
' Create a SqlParameter for each parameter in the stored procedure.
Dim $parameter1$ As New SqlParameter("$sqlParameterName$", $parameterValue$)
$cmd$.Parameters.Add($parameter1$)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Create a Parameterized Stored Procedure</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Constructs a command object for executing a stored procedure with parameters</Description>
										<Shortcut>adoSprocWParams</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Data.dll</Assembly>
										</Reference>
										<Reference>
											<Assembly>System.XML.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Data</Namespace>
										</Import>
										<Import>
											<Namespace>System.Data.SqlClient</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>procedureName</ID>
													<Type>String</Type>
													<ToolTip>Replace with the stored procedure name.</ToolTip>
													<Default>CustOrderHist</Default>
												</Literal>
												<Literal>
													<ID>columnName</ID>
													<Type>String</Type>
													<ToolTip>Replace with the parameter name.</ToolTip>
													<Default>@customerID</Default>
												</Literal>
												<Literal>
													<ID>value</ID>
													<Type>String</Type>
													<ToolTip>Replace with the new value.</ToolTip>
													<Default>"ALFKI"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>conn</ID>
													<Type>System.Data.SqlClient.SqlConnection</Type>
													<ToolTip>Replace with a connection object.</ToolTip>
													<Default>conn</Default>
												</Literal>
												<Literal>
													<ID>firstParameter</ID>
													<Type>SqlParameter</Type>
													<ToolTip>Replace with name of the parameter.</ToolTip>
													<Default>customerIDParam</Default>
												</Literal>
												<Literal>
													<ID>sprocCmd</ID>
													<Type>SqlCommand</Type>
													<ToolTip>Replace with the commad object.</ToolTip>
													<Default>cmd</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">
  Dim $sprocCmd$ As New SqlCommand()
$sprocCmd$.Connection = $conn$
$sprocCmd$.CommandType = CommandType.StoredProcedure
$sprocCmd$.CommandText = "$procedureName$"

' Create a SqlParameter for each parameter in the stored procedure.
Dim $firstParameter$ As New SqlParameter("$columnName$", $value$)
$sprocCmd$.Parameters.Add($firstParameter$)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Create a local SQLConnection to SQL Express</Title>
										<Author>Microsoft</Author>
										<Description>Creates a SQL Connection providing replacements for the typical connection name/value pairs for a SQL Express Connection using User Instance=True</Description>
										<Shortcut>adoCreateSqlExpConn</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Data.dll</Assembly>
										</Reference>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Data</Namespace>
										</Import>
										<Import>
											<Namespace>System.Data.SqlClient</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>dataBaseName</ID>
													<Type>String</Type>
													<ToolTip>Replace this with the file name of the database.</ToolTip>
													<Default>Northwind</Default>
												</Literal>
												<Literal>
													<ID>dataDirectory</ID>
													<Type>String</Type>
													<ToolTip>To use the DataDirectory created as part of Click Once, use the |DataDirectory| macro.Replace this macro if you wish to use a specific directory</ToolTip>
													<Default>|DataDirectory|</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>conn</ID>
													<Type>SqlConnection</Type>
													<ToolTip>Replace this with the name of the connection object.</ToolTip>
													<Default>conn</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim $conn$ As New SqlConnection()
$conn$.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=$dataDirectory$\$dataBaseName$.mdf;Integrated Security=True;User Instance=True"
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Create a Server based SQLConnection to SQL Server</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Creates a SQL Connection providing replacements for the typical connection name/value pairs</Description>
										<Shortcut>adoCreateSqlConn</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Data.dll</Assembly>
										</Reference>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Data.SqlClient</Namespace>
										</Import>
										<Import>
											<Namespace>System.Data</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>conn</ID>
													<Type>SqlConnection</Type>
													<ToolTip>Replace this with the name of the connection object.</ToolTip>
													<Default>conn</Default>
												</Literal>
												<Literal>
													<ID>serverName</ID>
													<Type>String</Type>
													<ToolTip>Replace this with the name of the server.</ToolTip>
													<Default>ServerName</Default>
												</Literal>
												<Literal>
													<ID>dataBaseName</ID>
													<Type>String</Type>
													<ToolTip>Replace this with the name of the database.</ToolTip>
													<Default>Northwind</Default>
												</Literal>
												<Literal>
													<ID>userId</ID>
													<Type>String</Type>
													<ToolTip>Replace this with the user name for connectivity to the database.</ToolTip>
													<Default>&lt;user name&gt;</Default>
												</Literal>
												<Literal>
													<ID>password</ID>
													<Type>String</Type>
													<ToolTip>Replace with the password that corresponds to your user name</ToolTip>
													<Default>&lt;your password&gt;</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="" Language="">Dim $conn$ As New SqlConnection()
$conn$.ConnectionString = "Data Source=$serverName$;Initial Catalog=$dataBaseName$;Persist Security Info=True;User ID=$userId$;Password=$password$"</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Extend a TableAdapter w/Partial Classes</Title>
										<Author>Microsoft</Author>
										<Description>Extends a TableAdapter using partial classes.Includes the namespace required to reference existing TableAdapters</Description>
										<Shortcut>dtTableAdaptPartial</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Namespace</ID>
													<Type>String</Type>
													<ToolTip>The name of the DataSet the TableAdapters function upon</ToolTip>
													<Default>NorthwindDataSet</Default>
												</Literal>
												<Literal>
													<ID>TableAdapter</ID>
													<Type>String</Type>
													<ToolTip>The name of the TableAdapter you wish to expand</ToolTip>
													<Default>CustomersTableAdapter</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="" Language="">Namespace $Namespace$TableAdapters
    Partial Public Class $TableAdapter$

    End Class
End Namespace
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Implement Data Try/Catch Blocks </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Implements a Try/Catch block that handles Exception, DataException, and all the exceptions that derive from DataException.</Description>
										<Shortcut>adoTryCatch</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Data.dll</Assembly>
										</Reference>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Data</Namespace>
										</Import>
										<Import>
											<Namespace>System</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>tryCode</ID>
													<Type>String</Type>
													<ToolTip>Replace with data task code.</ToolTip>
													<Default>' Add your data task here. </Default>
												</Literal>
												<Literal>
													<ID>finallyCode</ID>
													<Type>String</Type>
													<ToolTip>Dispose of any resources you used in the Try block.</ToolTip>
													<Default>' Dispose of any resources you used in the Try block.</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Try
    $tryCode$
Catch concurrencyEx As DBConcurrencyException
    Throw concurrencyEx 
Catch constraintEx As ConstraintException
    Throw constraintEx
Catch deletedRowEx As DeletedRowInaccessibleException
    Throw deletedRowEx
Catch duplicateNameEx As DuplicateNameException
    Throw duplicateNameEx
Catch inRowChangingEx As InRowChangingEventException
    Throw inRowChangingEx
Catch invalidConstraintEx As InvalidConstraintException
    Throw invalidConstraintEx
Catch invalidExpressionEx As InvalidExpressionException
    Throw invalidExpressionEx
Catch missingPrimaryEx As MissingPrimaryKeyException
    Throw missingPrimaryEx
Catch noNullEx As NoNullAllowedException
    Throw noNullEx
Catch readOnlyEx As ReadOnlyException
    Throw readOnlyEx
Catch rowNotInTableEx As RowNotInTableException
    Throw rowNotInTableEx
Catch strongTypingEx As StrongTypingException
    Throw strongTypingEx
Catch typedDataSetEx As TypedDataSetGeneratorException
    Throw typedDataSetEx
Catch versionNotFoundEx As VersionNotFoundException
    Throw versionNotFoundEx
Catch dataEx As DataException
    Throw dataEx
Catch ex As Exception
    Throw ex
Finally
    $finallyCode$
End Try
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Read Access Data into a Dataset</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Loads the data from one table in an Access database into a DataSet object.</Description>
										<Shortcut>adoAccess</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Data.dll</Assembly>
										</Reference>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>System.Data</Namespace>
										</Import>
										<Import>
											<Namespace>System.Data.OleDb</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>SQLString</ID>
													<Type>String</Type>
													<ToolTip>Replace with a SQL statement to retrieve the table.</ToolTip>
													<Default>"Select * from Topics"</Default>
												</Literal>
												<Literal>
													<ID>AccessFileName</ID>
													<Type>String</Type>
													<ToolTip>The file path to the Access file to be loaded</ToolTip>
													<Default>AccessFile.mdb</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim conn As String = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=$AccessFileName$;Persist Security Info=False"
Dim cmd As String = $SQLString$
Dim adapter As New OleDbDataAdapter(cmd, conn)
Dim topics As New DataSet
adapter.Fill(topics)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Return Output Parameter for a TableAdapter Query</Title>
										<Author>Microsoft</Author>
										<Description>TableAdapter methods that "Retun No Value" use ExecuteNonQuery which returns the rows affected.This Snippet returns the value from one of the command parameters on a TableAdapter.</Description>
										<Shortcut>dtNonQueryOutParam</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>methodName</ID>
													<Type>String</Type>
													<ToolTip>Replace with the name of the new method you wish to expose on the TableAdapter.</ToolTip>
													<Default>GetNonQueryOutputParameter</Default>
												</Literal>
												<Literal>
													<ID>existingMethod</ID>
													<Type>String</Type>
													<ToolTip>Replace with the existing ExecuteNonQuery method on the TableAdapter.</ToolTip>
													<Default>GetCustomerCount</Default>
												</Literal>
												<Literal>
													<ID>commandIndex</ID>
													<Type>Int</Type>
													<ToolTip>Replace with the index of the command in the TableAdapter _commandCollection.
Hint: Select Go To Definition on the existing method to determine the index.</ToolTip>
													<Default>1</Default>
												</Literal>
												<Literal>
													<ID>parameterIndex</ID>
													<Type>Int</Type>
													<ToolTip>Replace with the index of the parameter that you wish to return.
Hint: Use the DataSet designer to determine the index of the parameter on the query of the TableAdapter.</ToolTip>
													<Default>1</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>dataType</ID>
													<Type>System.Object</Type>
													<ToolTip>Replace with the DataType the method will return.</ToolTip>
													<Default>Integer</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method decl" Language="">Public Function $methodName$() As $dataType$
	Me.$existingMethod$()
	Return Me._commandCollection($commandIndex$).Parameters($parameterIndex$).Value
End Function
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
							</CodeSnippets>
						</Member>
						<Member>
							<Name>Data Types - defined by Visual Basic</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippets>
								<Snippet>
									<Header>
										<Title>Convert an Array of Bytes into a String</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Convert an Array of Bytes into a String</Description>
										<Shortcut>typeByteStr</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Text</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Encoding</ID>
													<Type>System.Text.Encoding</Type>
													<ToolTip>Replace with the Encoding enumeration value that corresponds to your string.</ToolTip>
 													<Default>Encoding.UTF8</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method decl" Language="">Private Function ConvertByteArrayToString(ByVal byteArray As Byte()) As String
    Dim enc As Encoding = $Encoding$
    Dim text As String = enc.GetString(byteArray)
    Return text
End Function</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Convert a Number to a Hexadecimal String</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Returns the hexadecimal representation of an integer.</Description>
										<Shortcut>typeHex</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Number</ID>
													<Type />
													<ToolTip>Replace with an integer.</ToolTip>
													<Default>48</Default>
													<Function />
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim hexString As String = Hex($Number$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Convert a Number to a Octal String</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Returns the octal string representation of an integer.</Description>
										<Shortcut>typeOct</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Number</ID>
													<Type>Integer</Type>
													<ToolTip>Replace with an integer.</ToolTip>
													<Default>48</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim octal As String = Oct($Number$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Convert a String to a Byte Array</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Converts a string to a byte array.</Description>
										<Shortcut>typeStrByte</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.Text</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>SampleString</ID>
													<Type>String</Type>
													<ToolTip>Replace with your string.</ToolTip>
													<Default>"StringToConvert"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">dim bytes as Byte() = System.Text.Encoding.Unicode.GetBytes($SampleString$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Convert between Hiragana and Katakana Characters (Japanese Only)</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Converts between Hiragana and Katakana characters in a String.</Description>
										<Shortcut>typeHiragana</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Katakana</ID>
													<Type />
													<ToolTip>Replace with Katakana String.</ToolTip>
													<Default>"Katakana String"</Default>
													<Function />
												</Literal>
												<Literal>
													<ID>Hiragana</ID>
													<Type />
													<ToolTip>Replace with Hiragana String.</ToolTip>
													<Default>"Hiragana String"</Default>
													<Function />
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">' Convert Katakana to Hiragana (Japanese Only).
Dim hString As String = StrConv($Katakana$, _
    VbStrConv.Hiragana)
' Convert Hiragana to Katakana (Japanese Only).
Dim kString As String = StrConv($Hiragana$, _
    VbStrConv.Katakana)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Convert between Simplified Chinese and Traditional Chinese Characters</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Converts between Simplified Chinese and Traditional Chinese characters in a String.</Description>
										<Shortcut>typeSimpleTrad</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Simplified</ID>
													<Type />
													<ToolTip>Replace with Simplified Chinese String.</ToolTip>
													<Default>"Simplified Chinese String"</Default>
													<Function />
												</Literal>
												<Literal>
													<ID>Traditional</ID>
													<Type />
													<ToolTip>Replace with Traditional Chinese String.</ToolTip>
													<Default>"Traditional Chinese String"</Default>
													<Function />
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
<Code Delimiter="$" Kind="method body" Language="">' Convert Simplified Chinese to Traditional Chinese.
 	Dim tString As String = StrConv($Simplified$, _
    VbStrConv.TraditionalChinese)
' Convert Traditional Chinese to Simplified Chinese.
	Dim sString As String = StrConv($Traditional$, _
    VbStrConv.SimplifiedChinese)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Convert between Wide and Narrow Characters</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Converts between Wide and Narrow characters in Strings.</Description>
										<Shortcut>typeWidth</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Wide</ID>
													<Type />
													<ToolTip>Replace with Wide String.</ToolTip>
													<Default>"Wide String"</Default>
													<Function />
												</Literal>
												<Literal>
													<ID>Narrow</ID>
													<Type />
													<ToolTip>Replace with Narrow String.</ToolTip>
													<Default>"Narrow String"</Default>
													<Function />
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">' Convert Wide to Narrow.
Dim nString As String = StrConv($Wide$, VbStrConv.Narrow)
' Convert Narrow to Wide.
Dim wString As String = StrConv($Narrow$, VbStrConv.Wide)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Determine the Span between Two Dates </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Calculates the difference in days between two dates and also constructs a TimeSpan value for that difference.</Description>
										<Keywords>
										</Keywords>
										<Shortcut>typeDate</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>dateLiteral</ID>
													<Type />
													<ToolTip>Replace with a date literal, a date variable, or a method that returns a date.</ToolTip>
													<Default>#1/1/2002#</Default>
												</Literal>
												<Literal>
													<ID>dateLiteral2</ID>
													<Type />
													<ToolTip>Replace with a date literal, a date variable, or a method that returns a date.</ToolTip>
													<Default>Now</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim oldDate As Date = $dateLiteral$
Dim newDate As Date = $dateLiteral2$
Dim differenceInDays As Long = DateDiff(DateInterval.Day, oldDate, newDate)
Dim spanFromDays As TimeSpan = New TimeSpan(CInt(differenceInDays), 0, 0, 0)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Determine the Span between Two Times </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Calculates the difference in seconds between two times in the same day, and also constructs a TimeSpan value for that difference.</Description>
										<Keywords>
										</Keywords>
										<Shortcut>typeTime</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>timeValue</ID>
													<Type>
													</Type>
													<ToolTip>Replace with a Date literal, a Date variable, or a method that returns a Date.</ToolTip>
													<Default>Today</Default>
												</Literal>
												<Literal>
													<ID>timeValue2</ID>
													<Type>
													</Type>
													<ToolTip>Replace with a Date literal, a Date variable, or a method that returns a Date.</ToolTip>
													<Default>Now</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim oldTime As Date = $timeValue$
Dim newTime As Date = $timeValue2$

' You can also determine the difference in times in other units.
Dim differenceInSeconds As Long = DateDiff(DateInterval.Second, oldTime, newTime)
Dim spanFromSeconds As TimeSpan = New TimeSpan(0, 0, CInt(differenceInSeconds))
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Generate Multiline String Literals </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Constructs a string literal that is three lines long.</Description>
										<Keywords>
										</Keywords>
										<Shortcut>typeMulti</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method body" Language="">Dim longString As String
longString = _
    "This is the first line of my string." &amp; ControlChars.CrLf &amp; _
    "This is the second line of my string." &amp; ControlChars.CrLf &amp; _
    "This is the third line of my string."</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Parse an E-mail Address</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Returns the user name and provider name from an e-mail address.</Description>
										<Shortcut>typeParseEmail</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>email</ID>
													<Type>String</Type>
													<ToolTip>Replace with a string or literal that represents an email address</ToolTip>
													<Default>"SomeName@SomeCompany.com"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim emailparts() As String
Dim user As String
Dim provider As String
emailParts = $email$.Split("@".ToCharArray, 2)
If emailParts.Length = 2 Then
    user = emailParts(0)
    provider = emailParts(1)
Else
    ' Email address is not valid. The expected format is user@provider.*
    user = String.Empty
    provider = String.Empty
End If</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Remove Parts of a String </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Removes all occurrences of one string from another string.</Description>
										<Keywords>
											<Keyword>String</Keyword>
											<Keyword>Replace</Keyword>
										</Keywords>
										<Shortcut>typeRemove</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>ToRemove</ID>
													<Type>System.String</Type>
													<ToolTip>Replace with the string you want to remove from withParts.</ToolTip>
													<Default>"and "</Default>
												</Literal>
												<Literal>
													<ID>StringWithParts</ID>
													<Type>System.String</Type>
													<ToolTip>Replace with the string you want to remove parts from.</ToolTip>
													<Default>"Books and Chapters and Pages"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim withParts As String = $StringWithParts$
Dim withoutParts As String = Replace(withParts, $ToRemove$, "")</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
							</CodeSnippets>
						</Member>
						<Member>
							<Name>File system - Processing Drives, Folders, and Files</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippets>
								<Snippet>
									<Header>
										<Title>Compare Two Files</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Compares two files.</Description>
										<Shortcut>filComp</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method decl" Language="">Private Function CompareFiles(ByVal file1 As String, ByVal file2 As String) As Boolean
        'Set to true if the files are equal; false otherwise
        Dim filesAreEqual As Boolean = False

        With My.Computer.FileSystem
            ' Ensure that the files are the same length before comparing them line by line
            If .GetFileInfo(file1).Length = .GetFileInfo(file2).Length Then
                Using file1Reader As New FileStream(file1, FileMode.Open), _
                      file2Reader As New FileStream(file2, FileMode.Open)
                    Dim byte1 As Integer = file1Reader.ReadByte()
                    Dim byte2 As Integer = file2Reader.ReadByte()
                    ' If byte1 or byte2 is a negative value, we have reached the end of the file
                    While byte1 > 0 And byte2 > 0
                        If (byte1 &lt;> byte2) Then
                            filesAreEqual = False
                            Exit While
                        Else
                            filesAreEqual = True
                        End If
                        'Read the next byte
                        byte1 = file1Reader.ReadByte()
                        byte2 = file2Reader.ReadByte()
                    End While
                End Using
            End If
        End With

        Return filesAreEqual
    End Function</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Copy a Directory</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Copies a directory and all its files and subdirectories.</Description>
										<Shortcut>filCopyDir</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>sourceDir</ID>
													<ToolTip>Replace with directory to copy.</ToolTip>
													<Default>"C:\SourceDirectory"</Default>
												</Literal>
												<Literal>
													<ID>destDirectory</ID>
													<ToolTip>Replace with directory to copy to.</ToolTip>
													<Default>"D:\DestinationDirectory"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">My.Computer.FileSystem.CopyDirectory($sourceDir$, $destDirectory$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Copy a File </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Copies the file Source.txt to a second file, Copy.txt.</Description>
										<Shortcut>filCopyFile</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Source</ID>
													<Type>String</Type>
													<ToolTip>Replace with the source file name.</ToolTip>
													<Default>"C:\Source.txt"</Default>
												</Literal>
												<Literal>
													<ID>Destination</ID>
													<Type>String</Type>
													<ToolTip>Replace with the destination folder name.</ToolTip>
													<Default>"C:\NewFolder\Dest.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">My.Computer.FileSystem.CopyFile($Source$, $Destination$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Create a File </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Creates a new file.</Description>
										<Shortcut>filCreateFile</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Filename</ID>
													<Type>String</Type>
													<ToolTip>Replace with the file name of the new file.</ToolTip>
													<Default>"C:\Test.txt"</Default>
												</Literal>
												<Literal>
													<ID>Text</ID>
													<Type>String</Type>
													<ToolTip>Replace with the text to write to the file.</ToolTip>
													<Default>"Some text"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">My.Computer.FileSystem.WriteAllText($Filename$, String.Empty, False)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Create a Folder </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Creates two new folders on a computer.</Description>
										<Shortcut>filCreateFold</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>folderName</ID>
													<ToolTip>Replace with the name of the folder to be created.</ToolTip>
													<Default>"C:\NewDirectory"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">My.Computer.FileSystem.CreateDirectory($folderName$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Create a Temporary File Name</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Creates a name for a temporary file.</Description>
										<Shortcut>filCreateTemp</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method body" Language="">Dim filename As String 
filename = My.Computer.FileSystem.GetTempFileName()</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Delete a File</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Deletes a file after confirming deletion with the user.</Description>
										<Shortcut>filDelFile</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Filename</ID>
													<Type>String</Type>
													<ToolTip>Replace with the file name.</ToolTip>
													<Default>"C:\Test.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">My.Computer.FileSystem.DeleteFile($Filename$, FileIO.UIOption.AllDialogs, FileIO.RecycleOption.SendToRecycleBin)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Determine if a File Exists</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Sets a Boolean variable indicating whether a specified file exists.</Description>
										<Shortcut>filExistFile</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>filename</ID>
													<ToolTip>Replace with the name of the file.</ToolTip>
													<Default>"C:\Test.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim fileExists As Boolean 
fileExists = My.Computer.FileSystem.FileExists($filename$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Determine if a Folder Exists </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Sets a Boolean variable indicating whether a specified folder exists.</Description>
										<Shortcut>filExistFold</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>folderName</ID>
													<ToolTip>Replace with the name of the directory to search for.</ToolTip>
													<Default>"C:\TestDirectory"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim folderExists As Boolean
folderExists = My.Computer.FileSystem.DirectoryExists($folderName$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Determine the Size of a File</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Obtains the size of a file and assigns it to a variable</Description>
										<Shortcut>filSize</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>filename</ID>
													<ToolTip>Replace with the file name.</ToolTip>
													<Default>"filename.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim fileSize As Long 
fileSize = My.Computer.FileSystem.GetFileInfo($filename$).Length</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Enumerate the Drives on a Computer</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Enumerates the drives on a computer.</Description>
										<Shortcut>filDrives</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method body" Language="">For Each drive As DriveInfo In My.Computer.FileSystem.Drives

        Next</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Find Amount of Disk Space Available</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Obtains the amount of disk space available.</Description>
										<Shortcut>filSpace</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Drive</ID>
													<ToolTip>Replace with drive name.</ToolTip>
													<Default>"C:\"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim freeSpace As Long 
freeSpace = My.Computer.FileSystem.GetDriveInfo($Drive$).TotalFreeSpace</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Get Information About a File </Title>
										<Author>Microsoft Corporation</Author>
										<Description>Obtains an object containing information about a file.</Description>
										<Shortcut>filFileInfo</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Filename</ID>
													<Type>String</Type>
													<ToolTip>Replace with the file name.</ToolTip>
													<Default>"C:\Test.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim fileData As FileInfo = My.Computer.FileSystem.GetFileInfo($Filename$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Move Files</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Moves a file to a new directory.</Description>
										<Shortcut>filMoveFile</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>oldFilePath</ID>
													<Type>String</Type>
													<ToolTip>Replace with the full path of the file to be moved.</ToolTip>
													<Default>"C:\OldDirectory\File.txt"</Default>
												</Literal>
												<Literal>
													<ID>newFilePath</ID>
													<Type>String</Type>
													<ToolTip>Replace with the new path for the file.</ToolTip>
													<Default>"c:\NewDirectory\File.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">My.Computer.FileSystem.MoveFile($oldFilePath$, $newFilePath$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Read a Delimited Text File</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Returns the values in each column and row from a text file with comma-delimited data. Other delimiters may be used.</Description>
										<Shortcut>filParseText</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic.FileIO</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Filename</ID>
													<Type>String</Type>
													<ToolTip>Replace with the file name of the text file.</ToolTip>
													<Default>"C:\Test.txt"</Default>
												</Literal>
												<Literal>
													<ID>Delimiter</ID>
													<Type>String</Type>
													<ToolTip>Replace with the delimiter strings.</ToolTip>
													<Default>","</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim filename As String = $Filename$
        Dim fields As String()
        Dim delimiter As String = $Delimiter$
        Using parser As New TextFieldParser(filename)
            parser.SetDelimiters(delimiter)
            While Not parser.EndOfData
                ' Read in the fields for the current line
                fields = parser.ReadFields()
                ' Add code here to use data in fields variable.

            End While
        End Using</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Read a Binary File</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Reads data from a binary file.</Description>
										<Shortcut>filReadBin</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Filename</ID>
													<Type>String</Type>
													<ToolTip>Replace with filename.</ToolTip>
													<Default>"C:\Test.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim fileContents As Byte()
filecontents = My.Computer.FileSystem.ReadAllBytes($Filename$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Read a file in the My Documents folder</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Reads the contents of a text file in the My Documents folder into a single string.</Description>
										<Shortcut>filReadMy</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>filename</ID>
													<ToolTip>Replace with the file name.</ToolTip>
													<Default>"test.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim fullFilePath As String
Dim fileContents As String
With My.Computer.FileSystem
    fullFilePath = .CombinePath(.SpecialDirectories.MyDocuments, $filename$)
    fileContents = .ReadAllText(fullFilePath)
End With</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Read Text from a File</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Reads the contents of a text file into a string.</Description>
										<Shortcut>filReadText</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>FileName</ID>
													<ToolTip>Replace with the file name.</ToolTip>
													<Default>"C:\Test.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim fileContents As String
fileContents = My.Computer.FileSystem.ReadAllText($FileName$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Rename a Directory</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Renames a directory.</Description>
										<Shortcut>filRenDir</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>old</ID>
													<ToolTip>Replace with old directory name and path.</ToolTip>
													<Default>"C:\OldDirectory"</Default>
												</Literal>
												<Literal>
													<ID>NewName</ID>
													<ToolTip>Replace with new directory name</ToolTip>
													<Default>"NewDirectory"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">My.Computer.FileSystem.RenameDirectory($old$, $NewName$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Rename a File</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Renames a file.</Description>
										<Shortcut>filRenFile</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>old</ID>
													<ToolTip>Replace with old path and filename.</ToolTip>
													<Default>"C:\OldFilename.txt"</Default>
												</Literal>
												<Literal>
													<ID>NewName</ID>
													<ToolTip>Replace with new filename (no path).</ToolTip>
													<Default>"NewFilename.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">My.Computer.FileSystem.RenameFile($old$, $NewName$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Retrieve the Drives on the Local Computer</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Retrieves the drive names on the local computer.</Description>
										<Shortcut>filDriveNames</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method body" Language="">Dim driveNames As New List(Of String)
        For Each drive As DriveInfo In My.Computer.FileSystem.Drives
            driveNames.Add(drive.Name)
        Next</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Search a Directory for Files Recursively</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Searches a directory for files recursively.</Description>
										<Shortcut>filSearchDir</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System.Collections.Generic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Collections.ObjectModel</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>directory</ID>
													<ToolTip>Replace with directory to search.</ToolTip>
													<Default>"C:\"</Default>
												</Literal>
												<Literal>
													<ID>str</ID>
													<ToolTip>Replace with wildcard string to use for search.</ToolTip>
													<Default>"*.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim files As ReadOnlyCollection(Of String)
files = My.Computer.FileSystem.GetFiles($directory$, True, $str$)</Code>
    								<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Search Files for an Expression</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Searches files in a directory for an expression.</Description>
										<Shortcut>filSearchTxt</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Collections.ObjectModel</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>search</ID>
													<ToolTip>Replace with the string to search for in the files.</ToolTip>
													<Default>"Text To Search For"</Default>
												</Literal>
												<Literal>
													<ID>dir</ID>
													<ToolTip>Replace with the directory to search.</ToolTip>
													<Default>"C:\"</Default>
												</Literal>
												<Literal>
													<ID>wild</ID>
													<ToolTip>Replace with wildcard to determine files to search.</ToolTip>
													<Default>"*.txt"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim files As ReadOnlyCollection(Of String)
files = My.Computer.FileSystem.FindInFiles($dir$, $search$, True, FileIO.SearchOption.SearchAllSubDirectories, $wild$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Write Text to a File</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Writes a line of text to a text file, replacing any text if the file exists.</Description>
										<Shortcut>filWriteText</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>FileName</ID>
													<ToolTip>Replace with the name of the file you want to create.</ToolTip>
													<Default>"C:\Test.txt"</Default>
												</Literal>
												<Literal>
													<ID>TextToWrite</ID>
													<ToolTip>Replace with the text to write to the file.</ToolTip>
													<Default>"Text"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">My.Computer.FileSystem.WriteAllText($FileName$, $TextToWrite$, True)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Write to a Binary File</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Writes bytes to a binary file.</Description>
										<Shortcut>filWriteBin</Shortcut>
									</Header>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>byteArray</ID>
													<Type>Object</Type>
													<ToolTip>Replace with Byte().</ToolTip>
													<Default>{244, 123, 56, 34}</Default>
												</Literal>
												<Literal>
													<ID>FileName</ID>
													<Type>String</Type>
													<ToolTip>Replace with filename and path.</ToolTip>
													<Default>"C:\Output.bin"</Default>
												</Literal>
												<Literal>
													<ID>IsAppend</ID>
													<Type>Boolean</Type>
													<ToolTip>Choose "True" to append to the file, or "False" to overwrite the file.</ToolTip>
													<Default>True</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim fileContents() As Byte = $byteArray$
My.Computer.FileSystem.WriteAllBytes($FileName$, fileContents, $IsAppend$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
							</CodeSnippets>
						</Member>
						<Member>
							<Name>Math</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippets>
								<Snippet>
									<Header>
										<Title>Calculate a Monthly Payment on a Loan</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Calculates the monthly payment on a loan.</Description>
										<Shortcut>mathPayLoan</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>annualInterestRate</ID>
													<Type>Double</Type>
													<ToolTip>Replace with a Double for the annual interest rate (e.g. 0.05 for 5%).</ToolTip>
													<Default>.05</Default>
												</Literal>
												<Literal>
													<ID>numberOfPayments</ID>
													<Type>Double</Type>
													<ToolTip>Replace with code that returns a Double for the total number of monthly payments.</ToolTip>
													<Default>36</Default>
												</Literal>
												<Literal>
													<ID>loanAmount</ID>
													<Type>Double</Type>
													<ToolTip>Replace with code that returns a Double for the loan amount.</ToolTip>
													<Default>1000</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim futureValue As Double = 0
Dim payment As Double
payment = Pmt($annualInterestRate$ / 12, $numberOfPayments$, -$loanAmount$, futureValue, DueDate.EndOfPeriod)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Calculate the Cosine of a specified Angle</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Converts an angle from degrees to radians and then calculates cosine of the angle</Description>
										<Shortcut>mathCos</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Degrees</ID>
													<Type>Double</Type>
													<ToolTip>Replace with the measurement in degrees.</ToolTip>
													<Default>120</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim radians As Double = $Degrees$ * Math.PI / 180
Dim cos As Double = Math.Cos(radians)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Calculate the Sum-of-Years Depreciation</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Returns a Double specifying the sum-of-years digits depreciation of an asset for a specified period.</Description>
										<Shortcut>mathDep</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Cost</ID>
													<Type>Double</Type>
													<ToolTip>Replace with the initial cost of the asset</ToolTip>
													<Default>1000</Default>
												</Literal>
												<Literal>
													<ID>EndValue</ID>
													<Type>Double</Type>
													<ToolTip>Replace with the value of the asset at the end of its useful life</ToolTip>
													<Default>200</Default>
												</Literal>
												<Literal>
													<ID>UsefulLife</ID>
													<Type>Double</Type>
													<ToolTip>Replace with the length of the useful life of the asset in years</ToolTip>
													<Default>3</Default>
												</Literal>
												<Literal>
													<ID>Year</ID>
													<Type>Double</Type>
													<ToolTip>Replace with the year for which asset depreciation is calculated</ToolTip>
													<Default>2005</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim depreciation As Double
depreciation = SYD($Cost$, $EndValue$, $UsefulLife$, $Year$)


									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Calculate the Sine of a specified Angle</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Converts an angle from degrees to radians and then calculates sine of the angle</Description>
										<Shortcut>mathSin</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Degrees</ID>
													<Type>Double</Type>
													<ToolTip>Replace with the measurement in degrees.</ToolTip>
													<Default>120</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim radians As Double = $Degrees$ * Math.PI / 180
Dim sin As Double = Math.Sin(radians)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Calculate the Tangent of a specified Angle</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Converts an angle from degrees to radians and then calculates the tangent of the angle</Description>
										<Shortcut>mathTan</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Degrees</ID>
													<Type>Double</Type>
													<ToolTip>Replace with the measurement in degrees.</ToolTip>
													<Default>120</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim radians As Double = $Degrees$ * Math.PI / 180
Dim tan As Double = Math.Tan(radians)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Get a Random Number using the Random class</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Generates a random integer between an upper bound and a lower bound.</Description>
										<Shortcut>mathRand</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>LowerBound</ID>
													<Type>Integer</Type>
													<ToolTip>Replace with the smallest integer you want in the result set.</ToolTip>
													<Default>10</Default>
												</Literal>
												<Literal>
													<ID>UpperBound</ID>
													<Type>Integer</Type>
													<ToolTip>Replace with one more than the largest number you want in the result set.</ToolTip>
													<Default>100</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim generator As New Random
Dim randomValue As Integer
randomValue = generator.Next($LowerBound$, $UpperBound$)
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
							</CodeSnippets>
						</Member>
						<Member>
							<Name>Windows Operating System</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippetMembers>
								<Member>
									<Name>Event logs</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Read Entries Created by a Particular Application from the Event Log</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Populates a list with all event log entries for an application</Description>
												<Shortcut>evReadApp</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Diagnostics</Namespace>
												</Import>
												<Import>
													<Namespace>System.Collections.Generic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>LogName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the log name. This reads the Application log on the local computer.</ToolTip>
															<Default>"Application"</Default>
														</Literal>
														<Literal>
															<ID>SourceName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the source name. The source name is associated with an particular application when the events are written.</ToolTip>
															<Default>"SourceName"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim log As New EventLog($LogName$)
Dim entries As New List(Of EventLogEntry)
For Each entry As EventLogEntry In log.Entries
    If entry.Source = $SourceName$ Then
        entries.Add(entry)
    End If
Next</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Read Entries from Event Logs</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Reads all event log entries.</Description>
												<Shortcut>evReadLog</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System.Diagnostics</Namespace>
												</Import>
												<Import>
													<Namespace>System.Collections</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>LogName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the log name on the local computer.</ToolTip>
															<Default>"Application"</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>EntryType</ID>
															<Type>EventLogEntryType</Type>
															<ToolTip>Replace with an enumeration value.</ToolTip>
															<Default>EventLogEntryType.Error</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim log As New EventLog($LogName$)
Dim entries As EventLogEntryCollection = log.Entries</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Write to the Application Event Log from a Specified Source</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Writes a message to the application Event Log</Description>
												<Shortcut>evWriteApp</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.Diagnostics</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>EntryType</ID>
															<Type>EventLogEntryType</Type>
															<ToolTip>Replace with an enumeration value.</ToolTip>
															<Default>EventLogEntryType.Warning</Default>
														</Literal>
														<Literal>
															<ID>SourceName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the source name. The source name is associated with an particular application when the events are written.</ToolTip>
															<Default>"SourceName"</Default>
														</Literal>
														<Literal>
															<ID>message</ID>
															<Type>String</Type>
															<ToolTip>Replace with a message to be written.</ToolTip>
															<Default>"Message text"</Default>
														</Literal>
														<Literal>
															<ID>LogName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the log name. This reads the Application log on the local computer.</ToolTip>
															<Default>"Application"</Default>
														</Literal>
														<Literal>
															<ID>Machine</ID>
															<Type>String</Type>
															<ToolTip>Replace with the computer name. The "." represents the local computer.</ToolTip>
															<Default>"Machine Name"</Default>
														</Literal>
														<Literal>
															<ID>EventID</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with an Integer value. Your application defines the values and what they mean.</ToolTip>
															<Default>123</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim log As New EventLog($LogName$, $Machine$, $SourceName$)
log.WriteEntry($message$, $EntryType$, $EventID$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Write to the My.Application Log </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Writes a string to the application event log on the local computer.</Description>
												<Keywords>
												</Keywords>
												<Shortcut>evWriteLog</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>message</ID>
															<Type />
															<ToolTip>Replace with a message to be written.</ToolTip>
															<Default>"An entry to the Application event log."</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">My.Application.Log.WriteEntry($message$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Message Queues</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Create a Public Message Queue</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates a public message queue on the local computer.</Description>
												<Shortcut>mqCreate</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Messaging.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Messaging</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>PublicQueue</ID>
															<Type>String</Type>
															<ToolTip>Replace with the queue path.</ToolTip>
															<Default>".\NewQueue"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">' Public queue
MessageQueue.Create($PublicQueue$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Create a Private Message Queue</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates a private message queue on the local computer.</Description>
												<Shortcut>mqCreatePriv</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Messaging.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Messaging</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>PrivateQueue</ID>
															<Type>String</Type>
															<ToolTip>Replace with the private queue path.</ToolTip>
															<Default>".\Private$\PrivateQueue"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">' Private queue
MessageQueue.Create($PrivateQueue$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Peek at Messages</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Uses the Peek method to look at the first message on the queue without removing that message from the queue.</Description>
												<Shortcut>mqPeek</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Messaging.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Messaging</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>QueueName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the name of the queue. The "." represents the local computer.</ToolTip>
															<Default>".\QueueName"</Default>
														</Literal>
														<Literal>
															<ID>BodyType</ID>
															<Type>System.Type</Type>
															<ToolTip>Replace with the type of the message body.</ToolTip>
															<Default>GetType(String)</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim queue As New MessageQueue($QueueName$)
Dim firstMessage As Message
firstMessage = queue.Peek
firstMessage.Formatter = New XmlMessageFormatter(New Type() {$BodyType$})
Dim text As String = firstMessage.Body.ToString</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Purge Queue Contents</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Uses the Purge method to clear the contents of any queue to which you have access rights in the Message Queuing system.</Description>
												<Shortcut>mqPurge</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Messaging.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Messaging</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>QueueName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the path of the queue. The "." represents the local computer.</ToolTip>
															<Default>".\QueueName"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim queue As New MessageQueue($QueueName$)
queue.Purge()</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve a List of Message Queues on the Local Computer</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Retreives the message queues on the local computer.</Description>
												<Shortcut>mqList</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Messaging.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Messaging</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Server</ID>
															<Type>String</Type>
															<ToolTip>Replace with another server if you want a list of queues from another server.</ToolTip>
															<Default>"."</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim queues() As MessageQueue
queues = System.Messaging.MessageQueue.GetPublicQueuesByMachine($Server$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve Message Labels</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Retrieves and array of messages and creates an array of the message labels.</Description>
												<Shortcut>mqLabels</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Messaging.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.Messaging</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>QueueName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the queue path. The "." represents the local computer.</ToolTip>
															<Default>".\QueueName"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim queue As New MessageQueue($QueueName$)
Dim msg() As Message
msg = queue.GetAllMessages()

Dim labels(msg.Length - 1) As String
For index As Integer = 0 To msg.Length - 1
    labels(index) = msg(index).Label
Next</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Send a Message to a Message Queue</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Sends a text message to a queue on the local computer.</Description>
												<Shortcut>mqSend</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Messaging.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Messaging</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>QueueName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the queue name. The "." represents the local computer.</ToolTip>
															<Default>".\QueueName"</Default>
														</Literal>
														<Literal>
															<ID>Body</ID>
															<Type>String</Type>
															<ToolTip>Replace with the body of the message. The body may be any object.</ToolTip>
															<Default>"Message text"</Default>
														</Literal>
														<Literal>
															<ID>Label</ID>
															<Type>String</Type>
															<ToolTip>Replace with a label for the message.</ToolTip>
															<Default>"Important message!"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim queue As New MessageQueue($QueueName$)
queue.Send($Body$, $Label$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Send and Receive Messages Programmatically</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Sends a message to a queue on the local computer, receives that message, and formats the body as a string.</Description>
												<Shortcut>mqSendRec</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Messaging.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Messaging</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>QueueName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the queue name. The "." represents the local computer.</ToolTip>
															<Default>".\QueueName"</Default>
														</Literal>
														<Literal>
															<ID>Message</ID>
															<Type>String</Type>
															<ToolTip>Replace with the message. The message may be any object type.</ToolTip>
															<Default>"Message text"</Default>
														</Literal>
														<Literal>
															<ID>BodyType</ID>
															<Type>System.Type</Type>
															<ToolTip>Replace with the Type of the message. This must match the type of object sent in the Send command.</ToolTip>
															<Default>GetType(String)</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim queue As New System.Messaging.MessageQueue($QueueName$)

' Send a message to the queue.
queue.Send($Message$)

' Wait for the message to arrive, and then remove
' it from the queue.
Dim msg As Message
msg = queue.Receive(New TimeSpan(0, 0, 3))

' Convert the body to a string.
msg.Formatter = New XmlMessageFormatter(New Type() {$BodyType$})
Dim text As String = msg.Body.ToString</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Specify the Formatter for Retrieved Messages</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Determines how a message body is deserialized.</Description>
												<Shortcut>mqFormat</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Messaging.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Messaging</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>BodyType</ID>
															<Type>System.Type</Type>
															<ToolTip>Replace with a Type object that matches the message body type.</ToolTip>
															<Default>GetType(String)</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim msg As New Message()
msg.Formatter = _
New XmlMessageFormatter(New Type() {$BodyType$})</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Processes</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>List Applications </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates a string that contains a list of running application processes.</Description>
												<Shortcut>procList</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Diagnostics</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim processList() As Process
processList = Process.GetProcesses</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Open Webpage in Default Browser</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Opens a webpage in the default browser.</Description>
												<Shortcut>procBrowser</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Diagnostics</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>url</ID>
															<Type />
															<ToolTip>Replace with URL to open in browser.</ToolTip>
															<Default>"about:blank"</Default>
															<Function />
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Process.Start($url$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Run a Program Associated with a File Type</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Runs a program associated with a file type.</Description>
												<Shortcut>procRun</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.Win32</Namespace>
												</Import>
												<Import>
													<Namespace>System.Diagnostics</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>programName</ID>
															<ToolTip>Replace with the program or document you wish to open</ToolTip>
															<Default>"C:\Test.txt"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Process.Start($programName$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Start an Application</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Starts the Notepad application.</Description>
												<Shortcut>procStart</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Diagnostics</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>AppName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the application name.</ToolTip>
															<Default>"notepad.exe"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Process.Start($AppName$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Stop an Application </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Stops a running application.</Description>
												<Keywords>
												</Keywords>
												<Shortcut>procStop</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Diagnostics</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>appName</ID>
															<Type />
															<ToolTip>Replace with the name of the process to be stopped.</ToolTip>
															<Default>"notepad"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim processList() As Process

processList = Process.GetProcessesByName($appName$)        
For Each proc As Process In processList
            If MsgBox("Terminate " &amp; proc.ProcessName &amp; "?", MsgBoxStyle.YesNo, "Terminate?") = MsgBoxResult.Yes Then
                proc.Kill()
            End If
        Next</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Registry</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Create a Registry Key</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates a registry key.</Description>
												<Shortcut>regCreate</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.Win32</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>KeyPath</ID>
															<Type>String</Type>
															<ToolTip>Replace with the path to the registry key.</ToolTip>
															<Default>"Software\CompanyName\ProductName"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Dim newKey As RegistryKey 
newKey = My.Computer.Registry.CurrentUser.CreateSubKey($KeyPath$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Delete a Registry Key</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Deletes a registry key.</Description>
												<Shortcut>regDel</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.Win32</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>SubKey</ID>
															<ToolTip>Replace with key in registry.</ToolTip>
															<Default>"Software"</Default>
														</Literal>
														<Literal>
															<ID>KeyToDelete</ID>
															<ToolTip>Replace with key to delete.</ToolTip>
															<Default>"KeyToDelete"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Using key As RegistryKey = My.Computer.Registry.LocalMachine.OpenSubKey($SubKey$)
    key.DeleteSubKey($KeyToDelete$)
End Using</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Determine Whether a Registry Key Exists </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Checks to see if the specified registry key exists.</Description>
												<Shortcut>regExist</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.Win32</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>keyPath</ID>
															<ToolTip>Replace with path to the registry key.</ToolTip>
															<Default>"Software\Microsoft\TestApp\1.0"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim exists As Boolean = False
Try
    If My.Computer.Registry.CurrentUser.OpenSubKey($keyPath$) IsNot Nothing Then
        exists = True
    End If
Finally
    My.Computer.Registry.CurrentUser.Close()
End Try</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Read a Registry Value</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Reads a string registry value from the current user hive.</Description>
												<Shortcut>regRead</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>DefaultValue</ID>
															<ToolTip>Replace with the default value.</ToolTip>
															<Default>"Default Value"</Default>
														</Literal>
														<Literal>
															<ID>Path</ID>
															<Type>String</Type>
															<ToolTip>Replace with the path to the key.</ToolTip>
															<Default>"HKEY_CURRENT_USER\Software\CompanyName\ProductName\KeyName"</Default>
														</Literal>
														<Literal>
															<ID>Value</ID>
															<Type>String</Type>
															<ToolTip>Replace with the value name to be retrieved.</ToolTip>
															<Default>"valueName"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim keyValue As String
keyValue = My.Computer.Registry.GetValue($Path$, $Value$, $DefaultValue$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Write a Registry Value</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Writes a string registry value to the current user hive. </Description>
												<Shortcut>regWrite</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Setting</ID>
															<ToolTip>Replace with the new value data.</ToolTip>
															<Default>"value"</Default>
														</Literal>
														<Literal>
															<ID>Key</ID>
															<Type>String</Type>
															<ToolTip>Replace with the registry key name you want to write to.</ToolTip>
															<Default>"Name"</Default>
														</Literal>
														<Literal>
															<ID>Path</ID>
															<Type>String</Type>
															<ToolTip>Replace with the path to the key.</ToolTip>
															<Default>"HKEY_CURRENT_USER\Software\CompanyName\ProductName\KeyName"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">My.Computer.Registry.SetValue($Path$, $Key$, $Setting$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Windows Services</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Continue a Windows Service </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Uses the ServiceController component to continue a paused service</Description>
												<Shortcut>servCont</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.ServiceProcess.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.ServiceProcess</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>serviceName</ID>
															<ToolTip>Replace with the name of the service that needs to be continued.</ToolTip>
															<Default>"IISAdmin"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim controller As ServiceController

controller = New ServiceController($serviceName$)
If controller.Status = ServiceControllerStatus.Paused Then
    controller.Continue()
End If</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Pause a Windows Service </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Uses the ServiceController component to pause the a service on the local computer.</Description>
												<Shortcut>servPause</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.ServiceProcess.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.ServiceProcess</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>serviceName</ID>
															<ToolTip>Replace with the name of the service to be paused.</ToolTip>
															<Default>"IISAdmin"</Default>
														</Literal>
														<Literal>
															<ID>ErrorMessage</ID>
															<Type>String</Type>
															<ToolTip>Replace with an error message.</ToolTip>
															<Default>"Cannot pause the service."</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim controller As New ServiceController($serviceName$)
controller.Pause()</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve a List of Services</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates a string of array of the services on the local computer.</Description>
												<Shortcut>servList</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.ServiceProcess.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.ServiceProcess</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim services() As ServiceController
services = ServiceController.GetServices()</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Start a Windows Service</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Starts a Windows service application.</Description>
												<Shortcut>servStart</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.ServiceProcess.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.ServiceProcess</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>serviceName</ID>
															<ToolTip>Replace with the name of the service that needs to be continued.</ToolTip>
															<Default>"IISAdmiin"</Default>
														</Literal>
														<Literal>
															<ID>ErrorMessage</ID>
															<Type>String</Type>
															<ToolTip>Replace with an error message.</ToolTip>
															<Default>"Cannot start the service."</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim controller As New ServiceController($serviceName$)
controller.Start()</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Stop a Windows Service</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Stops a Windows service application.</Description>
												<Shortcut>servStop</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.ServiceProcess.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.ServiceProcess</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>serviceName</ID>
															<ToolTip>Replace with the name of the service that needs to be continued.</ToolTip>
															<Default>"IISAdmin"</Default>
														</Literal>
														<Literal>
															<ID>ErrorMessage</ID>
															<Type>String</Type>
															<ToolTip>Replace with an error message.</ToolTip>
															<Default>"Cannot stop the service."</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim controller As New ServiceController($serviceName$)
controller.Stop()</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>System Information</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Respond to changes to Windows User preferences</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Demonstrates how to handle changes made to the Windows user's preferences</Description>
												<Shortcut>sysChgPref</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.Win32</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method decl" Language="">    Dim WithEvents systemEvent As SystemEvents

    Private Sub systemEvent_UserPreferenceChanged(ByVal sender As System.Object, ByVal e As UserPreferenceChangedEventArgs) Handles systemEvent.UserPreferenceChanged
        Select Case e.Category
            Case UserPreferenceCategory.Accessibility

            Case UserPreferenceCategory.Color

            Case UserPreferenceCategory.Desktop

            Case UserPreferenceCategory.General

            Case UserPreferenceCategory.Icon

            Case UserPreferenceCategory.Keyboard

            Case UserPreferenceCategory.Locale

            Case UserPreferenceCategory.Menu

            Case UserPreferenceCategory.Mouse

            Case UserPreferenceCategory.Policy

            Case UserPreferenceCategory.Power

            Case UserPreferenceCategory.Screensaver

            Case UserPreferenceCategory.VisualStyle

            Case UserPreferenceCategory.Window
            Case Else
        End Select
    End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Change Regional Settings</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Changes regional settings.</Description>
												<Shortcut>sysChgSet</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>CultureString</ID>
															<Type>String</Type>
															<ToolTip>Replace with the culture string.</ToolTip>
															<Default>"en-us"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">My.Application.ChangeCulture($CultureString$)
My.Application.ChangeUICulture($CultureString$)
</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Create an Environment Variable</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates a user environment variable that persists between program executions.</Description>
												<Shortcut>sysCreateVar</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Variable</ID>
															<Type>String</Type>
															<ToolTip>Replace with the name of the variable.</ToolTip>
															<Default>"Variable"</Default>
														</Literal>
														<Literal>
															<ID>Value</ID>
															<Type>String</Type>
															<ToolTip>Replace with the variable value.</ToolTip>
															<Default>"Value"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Environment.SetEnvironmentVariable($Variable$, $Value$, EnvironmentVariableTarget.User)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Determine Desktop Display Resolution </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Determines the width and height, in pixels, of the desktop.</Description>
												<Shortcut>sysRes</Shortcut>
												<Keywords>
													<Keyword>EventLog component</Keyword>
													<Keyword>logging events</Keyword>
												</Keywords>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim height As Integer = My.Computer.Screen.Bounds.Height
Dim width As Integer = My.Computer.Screen.Bounds.Width</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Determine the Amount of System Memory Available</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Determines the amount of system memory currently available. </Description>
												<Shortcut>sysMem</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim totalPhysicalMemmory As ULong 
totalPhysicalMemmory = My.Computer.Info.TotalPhysicalMemory()</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Determine the Current Windows Version</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Determines the version of Windows in use</Description>
												<Shortcut>sysOS</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim osVersion As String 
osVersion = My.Computer.Info.OSVersion</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Determine the Windows System Directory </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Assigns the System Directory to a String</Description>
												<Shortcut>sysDir</Shortcut>
											</Header>
											<Code Delimiter="$" Kind="method body" Language="">Dim systemDirectory As String
systemDirectory = System.Environment.SystemDirectory
</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Find the Amount of Disk Space Available</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Returns the amount of available disk space on a specified drive.</Description>
												<Shortcut>sysSpace</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>DriveLetter</ID>
															<Type>String</Type>
															<ToolTip>Replace with the drive letter to query.</ToolTip>
															<Default>"C:\"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim drive As System.IO.DriveInfo
drive = My.Computer.FileSystem.GetDriveInfo($DriveLetter$)
Dim space As Long = drive.AvailableFreeSpace</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>List Environment Variables</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates a string that lists all the user environment variables and their values.</Description>
												<Shortcut>sysListVar</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.Collections</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>target</ID>
															<Type>EnvironmentVariableTarget</Type>
															<ToolTip>Replace with an enumeration for the variables you want to retrieve.</ToolTip>
															<Default>EnvironmentVariableTarget.User</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim environmentVariables As IDictionary
environmentVariables = Environment.GetEnvironmentVariables($target$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve Accessibility Preferences</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Gets a value indicating whether the user has selected to run in high-contrast mode.</Description>
												<Shortcut>sysAccess</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim contrastOn As Boolean
contrastOn = SystemInformation.HighContrast</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve an Environment Variable</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Retrieves the value of an environment variable.</Description>
												<Shortcut>sysReadVar</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Variable</ID>
															<Type>String</Type>
															<ToolTip>Replace with the environment variable name.</ToolTip>
															<Default>"Variable"</Default>
														</Literal>
														<Literal>
															<ID>ErrorMessage</ID>
															<Type>String</Type>
															<ToolTip>Replace with your string.</ToolTip>
															<Default>"The environment variable was not found."</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim value As String
value = My.Application.GetEnvironmentVariable($Variable$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve User Preferences for Icons</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Retrieves the user preferences for icon display properties.</Description>
												<Shortcut>sysIcon</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
													<Url />
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim size As Size = SystemInformation.IconSize
Dim spacingSize As Size = SystemInformation.IconSpacingSize
Dim horizontalSpace As Integer = SystemInformation.IconHorizontalSpacing
Dim verticalSpace As Integer = SystemInformation.IconVerticalSpacing</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve User Preferences for Keyboard Settings</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Retrieves the user's keyboard settings.</Description>
												<Shortcut>sysKey</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim delay As Integer = SystemInformation.KeyboardDelay
Dim speed As Integer = SystemInformation.KeyboardSpeed</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve User Preferences for Menus</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Retrieves several menu settings.</Description>
												<Shortcut>sysMenu</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
													<Url />
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim barSize As Size = SystemInformation.MenuBarButtonSize
Dim buttonSize As Size = SystemInformation.MenuButtonSize
Dim checkSize As Size = SystemInformation.MenuCheckSize
Dim menuFont As Font = SystemInformation.MenuFont
Dim height As Integer = SystemInformation.MenuHeight
Dim delay As Integer = SystemInformation.MenuShowDelay</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve Mouse Settings</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Retrieves several mouse settings.</Description>
												<Shortcut>sysMouse</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
													<Url />
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim swapped As Boolean = My.Computer.Mouse.ButtonsSwapped
Dim hasWheel As Boolean = My.Computer.Mouse.WheelExists
Dim scrollLines As Integer = My.Computer.Mouse.WheelScrollLines
Dim buttons As Integer = SystemInformation.MouseButtons
Dim hoverSize As Size = SystemInformation.MouseHoverSize
Dim hoverTime As Integer = SystemInformation.MouseHoverTime
Dim speed As Integer = SystemInformation.MouseSpeed
Dim delta As Integer = SystemInformation.MouseWheelScrollDelta
Dim nativeWheel As Boolean = SystemInformation.NativeMouseWheelSupport</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve Regional Settings</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Retrieves various regional settings.</Description>
												<Shortcut>sysRegion</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System.Globalization</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim installed As CultureInfo = My.Computer.Info.InstalledUICulture
Dim current As CultureInfo = My.Application.Culture
Dim ui As CultureInfo = My.Application.UICulture</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve User Preferences for System Colors</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Retrieves just two of the many system color settings.</Description>
												<Shortcut>sysColor</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim control As Color = SystemColors.Control
Dim window As Color = SystemColors.Window</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve Information about Battery Life</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Retrieves the percent of battery life left, and warns the user if the percent is below five percent.</Description>
												<Shortcut>sysPower</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
													<Url />
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim power As PowerStatus = SystemInformation.PowerStatus
Dim percent As Single = power.BatteryLifePercent
If percent &lt; 0.05 Then
   MsgBox("Percent battery life remaining: " &amp; percent * 100)
End If</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve the Current Time on the Local Computer</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Displays the current time on the local computer.</Description>
												<Shortcut>sysTime</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim localTime As Date = My.Computer.Clock.LocalTime</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
							</CodeSnippetMembers>
							<CodeSnippets>
								<Snippet>
									<Header>
										<Title>Find the Current Users Name</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Finds the current users name.</Description>
										<Shortcut>osUser</Shortcut>
									</Header>
									<Platform>
										<Runtime>v2.0.40526</Runtime>
									</Platform>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method body" Language="">Dim userName As String = My.User.Name</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Perform an Action when System Power Mode Changes</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Performs an action when the system power mode changes.</Description>
										<Shortcut>osPower</Shortcut>
									</Header>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.Win32</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method decl" Language="">Dim WithEvents systemEvent As SystemEvents

    Private Sub systemEvent_PowerModeChanged(ByVal sender As Object, ByVal e As Microsoft.Win32.PowerModeChangedEventArgs) Handles systemEvent.PowerModeChanged
        Select Case e.Mode
            Case PowerModes.Resume

            Case PowerModes.StatusChange

            Case PowerModes.Suspend

            Case Else

        End Select

    End Sub</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Respond to Timer Event</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Responds to a timer event.</Description>
										<Shortcut>osTimer</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Windows.Forms</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Windows.Forms</Namespace>
										</Import>
										<Import>
											<Namespace>System</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>interval</ID>
													<ToolTip>Replace with interval in milliseconds. </ToolTip>
													<Default>1000</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method decl" Language="">' Start the timer with the given interval
Private Sub StartTimer()
    Dim Timer1 As New Timer()
    AddHandler Timer1.Tick, AddressOf Timer1_Tick
    Timer1.Interval = $interval$
    Timer1.Start()
End Sub

Private Sub Timer1_Tick(ByVal obj As Object, ByVal e As EventArgs)

End Sub</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Use BeginInvoke on a Control to Run Code Asynchronously</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Uses BeginInvoke on a control to run code asynchronously.</Description>
										<Shortcut>osInvoke</Shortcut>
									</Header>
									<Platform>
										<Runtime>v2.0.40520</Runtime>
									</Platform>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Windows.Forms</Namespace>
										</Import>
										<Import>
											<Namespace>System</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>str</ID>
													<Type />
													<ToolTip>Replace with String.</ToolTip>
													<Default>"Invoked"</Default>
													<Function />
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>text1</ID>
													<Type>Control</Type>
													<ToolTip>Replace with the control instance.</ToolTip>
													<Default>TextBox1</Default>
													<Function />
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method decl" Language="">Delegate Sub InvokeDelegate()

Public Sub Begin_Invoke()
    $text1$.BeginInvoke(New InvokeDelegate(AddressOf InvokeMethod))
End Sub

Public Sub InvokeMethod()
    $text1$.Text = $str$
End Sub</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
							</CodeSnippets>
						</Member>
						<Member>
							<Name>Security</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippets>
								<Snippet>
									<Header>
										<Title>Compute the Hash Code of a Password</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Computes the SHA1 hash code of a password.</Description>
										<Shortcut>secHashPass</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Security.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Text</Namespace>
										</Import>
										<Import>
											<Namespace>System.Security.Cryptography</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>password</ID>
													<Type>String</Type>
													<ToolTip>The String variable holding the password to be hashed.</ToolTip>
													<Default>"passwordString"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">        Dim sha1CryptoService As SHA1CryptoServiceProvider = New SHA1CryptoServiceProvider()
        Dim byteValue() As Byte = Encoding.UTF8.GetBytes($password$)
        Dim hashValue() As Byte = sha1CryptoService.ComputeHash(byteValue)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Compute the Hash Code of a String</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Computes the hash of a string using MD5, SHA1, or SHA384 algorithms.</Description>
										<Shortcut>secHashStr</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Security.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Text</Namespace>
										</Import>
										<Import>
											<Namespace>System.Security.Cryptography</Namespace>
										</Import>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method decl" Language="">    Enum HashMethod
        MD5
        SHA1
        SHA384
    End Enum

    Function GenerateHashDigest(ByVal source As String, ByVal algorithm As HashMethod) As String
        Dim hashAlgorithm As HashAlgorithm = Nothing
        Select Case algorithm
            Case HashMethod.MD5
                hashAlgorithm = New MD5CryptoServiceProvider
            Case HashMethod.SHA1
                hashAlgorithm = New SHA1CryptoServiceProvider
            Case HashMethod.SHA384
                hashAlgorithm = New SHA384Managed
            Case Else
                ' Error case.
        End Select

        Dim byteValue() As Byte = Encoding.UTF8.GetBytes(source)
        Dim hashValue() As Byte = hashAlgorithm.ComputeHash(byteValue)
        Return Convert.ToBase64String(hashValue)
    End Function
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Decrypt text from a file</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Decrypts text from a file using the Rijndael encryption algorithm.</Description>
										<Shortcut>secDecrypt</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Security.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Security.Cryptography</Namespace>
										</Import>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>fileName</ID>
													<Type>String</Type>
													<ToolTip>The filename containing the text to be decrypted.</ToolTip>
													<Default>"encrypted.txt"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>privateKey</ID>
													<Type>Byte</Type>
													<ToolTip>The private Key used to encrypt the data.</ToolTip>
													<Default>RijndaelAlg.Key</Default>
												</Literal>
												<Literal>
													<ID>initializationVector</ID>
													<Type>Byte</Type>
													<ToolTip>The initialization vector used in the symmetric key encryption scheme.</ToolTip>
													<Default>RijndaelAlg.IV</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim fStream As FileStream = File.Open($filename$, FileMode.OpenOrCreate)
        Dim RijndaelAlg As Rijndael = Rijndael.Create
        Dim cStream As New CryptoStream(fStream, _
                                        RijndaelAlg.CreateDecryptor($privatekey$, $initializationVector$), _
                                        CryptoStreamMode.Read)

        Dim sReader As New StreamReader(cStream)
        Dim plainText As String = sReader.ReadLine()

        sReader.Close()
        cStream.Close()
        fStream.Close()</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Encrypt a String</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Encrypts text from a file using the Rijndael encryption algorithm.</Description>
										<Shortcut>secEncrypt</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Security.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
										<Import>
											<Namespace>System.Security.Cryptography</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>fileName</ID>
													<Type>String</Type>
													<ToolTip>The file name into which the encrypted text is written.</ToolTip>
													<Default>"encrypted.txt"</Default>
												</Literal>
												<Literal>
													<ID>plainText</ID>
													<Type>String</Type>
													<ToolTip>The String variable that contains the text to be encrypted.</ToolTip>
													<Default>"Text to encrypt"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>privateKey</ID>
													<Type>Byte</Type>
													<ToolTip>The private Key used to encrypt the data.</ToolTip>
													<Default>RijndaelAlg.Key</Default>
												</Literal>
												<Literal>
													<ID>initializationVector</ID>
													<Type>Byte</Type>
													<ToolTip>The initialization vector used in the symmetric key encryption scheme.
													</ToolTip>
													<Default>RijndaelAlg.IV</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim fStream As FileStream = File.Open($filename$, FileMode.OpenOrCreate)
        Dim RijndaelAlg As Rijndael = Rijndael.Create
        Dim cStream As New CryptoStream(fStream, _
                                       RijndaelAlg.CreateEncryptor($privatekey$, $initializationVector$), _
                                       CryptoStreamMode.Write)
        Dim sWriter As New StreamWriter(cStream)

        sWriter.WriteLine($plainText$)
        sWriter.Close()
        cStream.Close()
        fStream.Close()</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Find the Current User's Name</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Retrieves the name of the current user.</Description>
										<Shortcut>secUser</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System</Namespace>
										</Import>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
									</Imports>
									<Code Delimiter="$" Kind="method body" Language="">Dim username As String = My.User.Name
									</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Generate Cryptographically Random Data</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Generates cryptographically random data.</Description>
										<Shortcut>secRanNum</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Security.dll</Assembly>
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>Microsoft.VisualBasic</Namespace>
										</Import>
										<Import>
											<Namespace>System.Security.Cryptography</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>count</ID>
													<Type>Integer</Type>
													<ToolTip>The size of the byte array of random data.</ToolTip>
													<Default>8</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim randomNumGen As RandomNumberGenerator = RNGCryptoServiceProvider.Create()
Dim randomBytes($count$) As Byte

randomNumGen.GetBytes(randomBytes)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
							</CodeSnippets>
						</Member>
						<Member>
							<Name>Smart Devices</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippetMembers>
								<Member>
									<Name>Application - Compiling, Resources, and Settings</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Access an Embedded Resource</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Shows how to get an embedded resource, .bmp file, and display it in a PictureBox.</Description>
												<Shortcut>sdres</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Reflection</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>resource</ID>
															<Type>System.String</Type>
															<ToolTip>Replace with name of embedded resource in the format: namespace.filename.extension</ToolTip>
															<Default>DeviceApplication1.mypicture.bmp</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>PictureBox</ID>
															<Type>System.Windows.Forms.PictureBox</Type>
															<ToolTip>Replace with a PictureBox control on your form.</ToolTip>
															<Default>PictureBox1</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Private Sub LoadPicture()
    Dim bmpSource As Bitmap
    Dim asm As System.Reflection.Assembly 
    asm = System.Reflection.Assembly.GetExecutingAssembly()

    $PictureBox$.SizeMode = PictureBoxSizeMode.StretchImage
    Try
        bmpSource = New Bitmap(asm.GetManifestResourceStream("$resource$"))
        $PictureBox$.Image = bmpSource
    Catch ex As NullReferenceException
        End Try
End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Get the Application Directory</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Gets the directory containing the assembly of the application.</Description>
												<Shortcut>sddir</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.IO</Namespace>
												</Import>
												<Import>
													<Namespace>System.Reflection</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method decl" Language="">Private Function GetApplicationDirectory() As String

    return Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetModules(0).FullyQualifiedName)

End Function</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Get the Assembly Culture Info</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Displays current locale, culture information, configured for the device.</Description>
												<Shortcut>sdculture</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.Globalization</Namespace>
												</Import>
												<Import>
													<Namespace>System.Reflection</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method decl" Language="">Private Function GetCultureInfoName() As String
    Dim asm As Assembly = Assembly.GetExecutingAssembly()
    Dim ci As CultureInfo = asm.GetName().CultureInfo
    
    'Return the culture name in English 
    return ci.EnglishName
End Function</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Get the Name of the Device</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Gets the device name from network settings.</Description>
												<Shortcut>sdname</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Net</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method decl" Language="">Private Function GetDeviceName As String

    return Dns.GetHostName()

End Function</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Connectivity and Networking</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Discover an IrDA Device</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Determines infrared devices in proximity to the device.</Description>
												<Shortcut>sdirdadis</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Net.IrDA.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.Net.Sockets</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method decl" Language="">Private Sub FindIrDADevices()
    Dim irDevices() As IrDADeviceInfo
    Dim irClient As New IrDAClient()
    
    ' Create a collection of a maximum of three devices.
    irDevices = irClient.DiscoverDevices(2)
      
    If irDevices.Length > 0 Then

    	For Each device As IrDADeviceInfo In irDevices
      	
    	Next
    End If
End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Receive an IrDA Transfer</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Receives a text file using infrared transmission from another device.</Description>
												<Shortcut>sdirdarec</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Net.IrDA.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.IO</Namespace>
												</Import>
												<Import>
													<Namespace>System.Net</Namespace>
												</Import>
												<Import>
													<Namespace>System.Net.Sockets</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Private Sub writeIrDADataToFile(ByVal irServiceName As String, ByVal fileName As String)

        Dim irClient As New IrDAClient()
        Dim irDevices() As IrDADeviceInfo
        Dim buffersize As Integer = 256

        ' Create a collection of for discovering up to
        ' three devices, although only one is needed.
        irDevices = irClient.DiscoverDevices(2)

        ' Cancel if no devices are found.
        If irDevices.Length = 0 Then
            Exit Sub
        End If

        ' Connect to the first IrDA device
        Dim irEndP As New IrDAEndPoint(irDevices(0).DeviceID, irServiceName)
        irClient.Connect(irEndP)

        ' Create a stream for writing a Pocket Word file.
        Dim writeStream As Stream
        writeStream = New FileStream(fileName, FileMode.OpenOrCreate)
        
        ' Get the underlying stream of the client.
        Dim baseStream As Stream = irClient.GetStream()

        ' Create buffer for reading the file.
        Dim buffer(buffersize) As Byte

        Dim numToRead, numRead As Int64

        numToRead = 8

        While numToRead > 0
            numRead = baseStream.Read(buffer, 0, numToRead)
            numToRead -= numRead
        End While

        ' Get the size of the buffer to show
        ' the number of bytes to write to the file.
        numToRead = BitConverter.ToInt64(buffer, 0)

        Try
            While numToRead > 0
                numRead = baseStream.Read(buffer, 0, buffer.Length)
                numToRead -= numRead
                writeStream.Write(buffer, 0, numRead)
            End While
        Finally
            writeStream.Close()
        End Try

        baseStream.Close()
        irClient.Close()

    End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Send an IrDA Transfer</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Sends a text file using infrared transmission to another device.</Description>
												<Shortcut>sdirdatran</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Net.IrDA.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.IO</Namespace>
												</Import>
												<Import>
													<Namespace>System.Net</Namespace>
												</Import>
												<Import>
													<Namespace>System.Net.Sockets</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">    Private Sub sendIrDAData(ByVal irServiceName As String, ByVal dataFile As String)

        Dim irClient As New IrDAClient()
        Dim irDevices() As IrDADeviceInfo
        Dim buffersize As Integer = 256

        ' Create a collection of devices to discover.
        irDevices = irClient.DiscoverDevices(2)

        ' Connect to the device
        Dim irEndP As New IrDAEndPoint(irDevices(0).DeviceID, irServiceName)
        Dim irListen As New IrDAListener(irEndP)
        irListen.Start()
        irClient = irListen.AcceptIrDAClient()

        ' Open a Pocket Word file to send and get its stream.
        Dim fs As Stream
        fs = New FileStream(dataFile, FileMode.Open)

        ' Get the underlying stream of the client.
        Dim baseStream As Stream = irClient.GetStream()

        Dim length As Byte() = BitConverter.GetBytes(fs.Length)
        baseStream.Write(length, 0, length.Length)

        ' Create buffer for reading the file.
        Dim buffer(buffersize) As Byte
        Dim fileLength As Integer = CInt(fs.Length)

        ' Read the file stream into the base stream.
        While fileLength > 0
            Dim numRead As Int64 = fs.Read(buffer, 0, buffer.Length)
            baseStream.Write(buffer, 0, numRead)
            fileLength -= numRead
        End While
        fs.Close()
        baseStream.Close()
        irClient.Close()

    End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Submit an HTTP GET Request with Proxy</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Submits an HTTP GET request using a proxy.</Description>
												<HelpUrl />
												<Keywords />
												<Shortcut>sdhttp</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System.Net</Namespace>
												</Import>
												<Import>
													<Namespace>System.IO</Namespace>
												</Import>
												<Import>
													<Namespace>System.Text</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>url</ID>
															<Type>TextBox</Type>
															<ToolTip>Replace with TextBox control on your form.</ToolTip>
															<Default>txtURL</Default>
															<Function />
														</Literal>
														<Literal>
															<ID>proxy</ID>
															<Type>TextBox</Type>
															<ToolTip>Replace with TextBox control on your form.</ToolTip>
															<Default>txtProxy</Default>
															<Function />
														</Literal>
														<Literal>
															<ID>list</ID>
															<Type>ListBox</Type>
															<ToolTip>Replace with ListBox control on your form.</ToolTip>
															<Default>lstResults</Default>
															<Function />
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">' Get URL and proxy
' from the text boxes.
Dim url As String = $url$.Text
Dim proxy As String = $proxy$.Text

Try
    If Not "".Equals($proxy$.Text) Then
        Dim proxyObject As New WebProxy(proxy, 80)

        ' Disable proxy use when the host is local.
        proxyObject.BypassProxyOnLocal = True

        ' HTTP requests use this proxy information.
        GlobalProxySelection.Select = proxyObject
    End If

    Dim req As WebRequest = WebRequest.Create(url)
    Dim result As WebResponse = req.GetResponse()
    Dim ReceiveStream As Stream = result.GetResponseStream()
    Dim encode As Encoding = System.Text.Encoding.GetEncoding("utf-8")
    Dim sr As New StreamReader(ReceiveStream, encode)

    ' Read the stream into arrays of 30 characters to add
    ' as items in the list box. Repeat until buffer is read.
    Dim read(29) As Char
    Dim count As Integer = sr.Read(read, 0, 30)
    While count > 0
        Dim str As New String(read, 0, count)
        $list$.Items.Add(str)
        count = sr.Read(read, 0, 30)
    End While
Catch ex As WebException
    Dim message As String = ex.Message
    Dim response As HttpWebResponse = CType(ex.Response, HttpWebResponse)
    If response Is Nothing Then
    Else
        message = response.StatusDescription
        response.Close()
    End If
    $list$.Items.Add(message)
Catch ex As Exception
    $list$.Items.Add(ex.Message)
End Try</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Data - Designer features and ADO.NET</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Add Rows and Columns to a DataGrid</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Adds Rows and Columns to a DataGrid using a DataSet and a BindingSource.</Description>
												<HelpUrl />
												<Keywords />
												<Shortcut>sddgadd</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Data.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Xml</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System.Data</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>DataGrid</ID>
															<Type>System.Windows.Forms.DataGrid</Type>
															<ToolTip>Replace with DataGrid control on your form.</ToolTip>
															<Default>dataGrid1</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">' Create a DataSet for binding to a 
' DataGrid using a BindingSource object.
   Private Sub SetUpDataGrid()
      Dim BindingSource1 As New BindingSource

     ' Create a DataSet with a 
     ' table of customer sales data.
      Dim myDataSet As New DataSet("myDataSet")
      Dim tSales As New DataTable("Sales")
      
      ' Add three columns.
      Dim colDate As New DataColumn("Date", GetType(DateTime))
      Dim colCust As New DataColumn("Customer")
      Dim colTotal As New DataColumn("Total", GetType(Decimal))
      tSales.Columns.Add(colDate)
      tSales.Columns.Add(colCust)
      tSales.Columns.Add(colTotal)
       
      ' Add the table to the DataSet.
      myDataSet.Tables.Add(tSales)
        
      'Add needed rows. 
      Dim newRow As DataRow
      Dim i As Integer
      For i = 1 To 3
         newRow = tSales.NewRow()
         tSales.Rows.Add(newRow)
      Next i

      ' Populate the table withe customer data.
      tSales.Rows(0)("Date") = DateTime.Today
      tSales.Rows(0)("Customer") = "Parker, Darren"
      tSales.Rows(0)("Total") = 123.23

      tSales.Rows(1)("Date") = DateTime.Today
      tSales.Rows(1)("Customer") = "Ji, Jeune"
      tSales.Rows(1)("Total") = 4322.33

      tSales.Rows(2)("Date") = DateTime.Today
      tSales.Rows(2)("Customer") = "Tibbott, Diane"
      tSales.Rows(2)("Total") = 1222.33

      ' Set the BindingSource to the DataSet.      
      BindingSource1.DataSource = myDataSet

      ' Bind the DataGrid to the BindingSource.
      $DataGrid$.DataSource = BindingSource1

      ' Set the current binding item to the Sales table.
      BindingSource1.DataMember = "Sales"
   End Sub 
</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Edit a DataGrid</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Allows you to edit the cells in a DataGrid.</Description>
												<Shortcut>sddgedit</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Data.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.DataGrid.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System.Data</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>currentCellData</ID>
															<Type>String</Type>
															<ToolTip>Replace with the string value of the text to set in the DataGrid cell.</ToolTip>
															<Default>New value</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>datagrid</ID>
															<Type>DataGrid</Type>
															<ToolTip>Replace with DataGrid control on your form.</ToolTip>
															<Default>DataGrid</Default>
														</Literal>
														<Literal>
															<ID>button</ID>
															<Type>Button</Type>
															<ToolTip>Replace with Button control on your form.</ToolTip>
															<Default>buttonSetCurrentCell</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Private Sub dataGrid_CurrentCellChanged(ByVal sender As Object, ByVal e As EventArgs) _
    Handles $datagrid$.CurrentCellChanged

    Dim currentCell As DataGridCell
    Dim currentCellData As String

    ' Get the current cell.
    currentCell = $datagrid$.CurrentCell

    ' Get the current cell's data.
    currentCellData = CStr($datagrid$(currentCell.RowNumber, currentCell.ColumnNumber))

    ' interact with currentCellData

End Sub

Private Sub buttonSetCurrentCell_Click(ByVal o As Object, ByVal e As EventArgs) _
    Handles $button$.Click

    Dim currentCell As DataGridCell
    Dim currentCellData As String

    ' Get the text to put into the current cell.
    currentCellData = "$currentCellData$"

    ' Get the current cell.
    currentCell = $datagrid$.CurrentCell

    ' Set the current cell's data.
    $datagrid$(currentCell.RowNumber, currentCell.ColumnNumber) = currentCellData
End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Set the DataSource of a DataGrid</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Sets the DataSource of a DataGrid.</Description>
												<HelpUrl />
												<Keywords />
												<Shortcut>sddgsource</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Data.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Data.SqlServerCe.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Xml</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System.Data</Namespace>
												</Import>
												<Import>
													<Namespace>System.Data.SqlServerCe</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>string</ID>
															<Type>
															</Type>
															<ToolTip>Replace with query string.</ToolTip>
															<Default>"SELECT * FROM People"</Default>
														</Literal>
														<Literal>
															<ID>table</ID>
															<Type>
															</Type>
															<ToolTip>Replace with table.</ToolTip>
															<Default>"People"</Default>
														</Literal>
														<Literal>
															<ID>DataSourceName</ID>
															<Type>String</Type>
															<ToolTip>Replace with data source location.</ToolTip>
															<Default>"Data Source = \My Documents\test.sdf"</Default>
														</Literal>
 													</Literals>
													<Literals>
														<Literal>
															<ID>datagrid</ID>
															<Type>DataGrid</Type>
															<ToolTip>Replace with DataGrid control on your form.</ToolTip>
															<Default>dataGrid1</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Private Sub SetDataSource()
    Dim sqlConn As System.Data.SqlServerCe.SqlCeConnection
    Dim sqlDS As New DataSet
    
    ' It is assumed that there is a SQL Server Mobile Edition database
    ' named test.sdf, and that the database has a table named
    ' People. These should be modified to fit your application.
    sqlConn = New SqlCeConnection($DataSourceName$)
    
    ' Select everything from a database named People on the SqlCeConnection sqlConn.
    Dim sqlDA As New SqlCeDataAdapter($string$, sqlConn)
    
    ' Fill the DataTable People within the DataSet sqlDS.
    sqlDA.Fill(sqlDS, $table$)
    
    ' Set the DataSource as the People table in the DataSet.
    $datagrid$.DataSource = sqlDS.Tables($table$)
End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Sort a DataGrid</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Sorts controls bound to BindingSource</Description>
												<Shortcut>sddatasort</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.DataGrid.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Data</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Xml</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System.Data</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>sortingExpression</ID>
															<Type>String</Type>
															<ToolTip>Replace with sorting expression string to be used by BindingSource, e.g. the name of a column to sort on.</ToolTip>
															<Default>columnName</Default>
														</Literal>
														<Literal>
															<ID>sortOrder</ID>
															<Type>String</Type>
															<ToolTip>Sort order used, e.g. " DESC" for descending or "ASC" for ascending.</ToolTip>
															<Default> DESC</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>BindingSource1</ID>
															<Type>BindingSource</Type>
															<ToolTip>Replace with the name of the BindingSource object used by the controls on the form.</ToolTip>
															<Default>BindingSource1</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">        $BindingSource1$.Sort = "$sortingExpression$" &amp; " $sortOrder$"</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Device Operating System</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Convert Byte to IntPtr</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Accesses an IntPtr which corresponds to a byte array.</Description>
												<HelpUrl />
												<Keywords />
												<Shortcut>sdconvertbyte</Shortcut>
											</Header>
											<References>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.Runtime.InteropServices</Namespace>
												</Import>
											</Imports>
											<Declarations />
											<Code Delimiter="$" Kind="method decl" Language="">Private Declare Function LocalAlloc Lib "coredll.dll" (ByVal uFlags As UInteger, ByVal uBytes As UInteger) As IntPtr
    Private Declare Function LocalFree Lib "coredll.dll" (ByVal hMem As IntPtr) As IntPtr
    Private Declare Function LocalReAlloc Lib "coredll.dll" (ByVal hMem As IntPtr, ByVal uBytes As UInteger, ByVal fuFlags As UInteger) As IntPtr

    Public Const LMEM_FIXED As Integer = 0
    Public Const LMEM_MOVEABLE As Integer = 2
    Public Const LMEM_ZEROINIT As Integer = &amp;H40

    Sub PinObject()
        ' Access an IntPtr which corresponds to a byte array.
        Dim test(4) As Byte
        Dim hObject As GCHandle = GCHandle.Alloc(test, GCHandleType.Pinned)
        Dim pObject As IntPtr = hObject.AddrOfPinnedObject()
        If hObject.IsAllocated Then
            hObject.Free()
        End If
    End Sub

    Sub MarshaltoMemory()
        ' Create a block of memory via LocalAlloc
        ' and Marshal the data to the block.
        Dim test(4) As Byte
        Dim p As IntPtr = LocalAlloc(CUInt(LMEM_FIXED Or LMEM_ZEROINIT), CUInt(test.Length))
        If p.Equals(IntPtr.Zero) Then
            Throw New OutOfMemoryException
        Else
            Marshal.Copy(test, 0, p, test.Length)
        End If
    End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Get the Available Memory of the Device</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Uses Operating System APIs to retrieve memory information about the device.</Description>
												<HelpUrl />
												<Keywords />
												<Shortcut>sdmemory</Shortcut>
											</Header>
											<References>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations />
											<Code Delimiter="$" Kind="method decl" Language="">Friend Structure MEMORYSTATUS
        Public dwLength As UInteger
        Public dwMemoryLoad As UInteger
        Public dwTotalPhys As UInteger
        Public dwAvailPhys As UInteger
        Public dwTotalPageFile As UInteger
        Public dwAvailPageFile As UInteger
        Public dwTotalVirtual As UInteger
        Public dwAvailVirtual As UInteger
    End Structure

    Friend Declare Function GlobalMemoryStatus Lib "CoreDll.Dll" (ByRef ms As MEMORYSTATUS) As Integer

    Friend Shared Function GetMemory() As MEMORYSTATUS

        Dim memStatus As New MEMORYSTATUS
        GlobalMemoryStatus(memStatus)

        Return memStatus
    End Function</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Get or Set the System Time</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Declares and uses the system APIs to accesses the system clock to get or set the current time.</Description>
												<HelpUrl />
												<Keywords />
												<Shortcut>sdtime</Shortcut>
											</Header>
											<References>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations />
											<Code Delimiter="$" Kind="method decl" Language="">Private Structure SYSTEMTIME
        Public wYear As UShort
        Public wMonth As UShort
        Public wDayOfWeek As UShort
        Public wDay As UShort
        Public wHour As UShort
        Public wMinute As UShort
        Public wSecond As UShort
        Public wMilliseconds As UShort
    End Structure

    Private Declare Function GetSystemTime Lib "CoreDll.dll" (ByRef lpSystemTime As SYSTEMTIME) As UInteger
    Private Declare Function SetSystemTime Lib "CoreDll.dll" (ByRef lpSystemTime As SYSTEMTIME) As UInteger

    ' Note that the GetSystemTime function returns Coordinated Universal Time 
    ' (UTC, also known as Greenwich Mean Time). To get your local time, you must 
    ' add or subtract the number of hours between your time zone and UTC. For example,
    ' 24:00 (midnight) in UTC is 19:00 in New York--an offset of minus 5 hours (UTC–5).
    ' To determine the UTC offset for your time zone, see the Time Zone tab of 
    ' Date and Time Properties.
    ' Note that some device emulators do not initially set 
    ' daylight-saving time correctly, which could affect your result.

    Public Shared Function GetDateTime() As Date
        Dim st As SYSTEMTIME

        GetSystemTime(st)

        'Return the current SYSTEMTIME as a Date
        Return New Date(st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond, st.wMilliseconds)
    End Function

    Public Shared Sub SetDateTime(ByVal newDateTime As Date)
        Dim newTime As SYSTEMTIME

        'Convert the Date to SYSTEMTIME
        newTime.wYear = newDateTime.Year
        newTime.wMonth = newDateTime.Month
        newTime.wDay = newDateTime.Day
        newTime.wHour = newDateTime.Hour
        newTime.wMinute = newDateTime.Minute
        newTime.wSecond = newDateTime.Second
        newTime.wMilliseconds = newDateTime.Millisecond

        SetSystemTime(newTime)
    End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Play a Sound file</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Uses platform APIs to play a sound file.</Description>
												<HelpUrl />
												<Keywords />
												<Shortcut>sdsound</Shortcut>
											</Header>
											<References>
											</References>
											<Imports>
											</Imports>
											<Declarations />
											<Code Delimiter="$" Kind="method decl" Language="">Private Declare Function WCE_PlaySound Lib "CoreDll.dll" Alias "PlaySound" _
        (ByVal szSound As String, ByVal hMod As IntPtr, ByVal flags As Integer) As Integer

    Public Shared Sub PlaySoundFile(ByVal soundFile As String)
        Const SND_ASYNC = &amp;H1
        Const SND_FILENAME = &amp;H20000

        WCE_PlaySound(soundFile, IntPtr.Zero, SND_ASYNC Or SND_FILENAME)
    End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Reset the Device</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Resets (soft reboot) the device using platform APIs.</Description>
												<HelpUrl />
												<Keywords />
												<Shortcut>sdreset</Shortcut>
											</Header>
											<References>
											</References>
											<Imports>
											</Imports>
											<Declarations/>
											<Code Delimiter="$" Kind="method decl" Language="">Private Declare Function KernelIoControl Lib "coredll.dll" (ByVal dwIoControlCode As Integer, ByVal lpInBuf As IntPtr, ByVal nInBufSize As Integer, ByVal lpOutBuf As IntPtr, ByVal nOutBufSize As Integer, ByRef lpBytesReturned As Integer) As Integer

    Private Function CTL_CODE(ByVal DeviceType As Integer, ByVal Func As Integer, ByVal Method As Integer, ByVal Access As Integer) As Integer
        Return (DeviceType &lt;&lt; 16) Or (Access &lt;&lt; 14) Or (Func &lt;&lt; 2) Or Method
    End Function

    Private Function ResetPocketPC() As Integer
        Const FILE_DEVICE_HAL As Integer = &amp;H101
        Const METHOD_BUFFERED As Integer = 0
        Const FILE_ANY_ACCESS As Integer = 0

        Dim bytesReturned As Integer = 0
        Dim IOCTL_HAL_REBOOT As Integer

        IOCTL_HAL_REBOOT = CTL_CODE(FILE_DEVICE_HAL, 15, METHOD_BUFFERED, FILE_ANY_ACCESS)
        Return KernelIoControl(IOCTL_HAL_REBOOT, IntPtr.Zero, 0, IntPtr.Zero, 0, bytesReturned)

    End Function</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Windows Forms Applications</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippetMembers>
										<Member>
											<Name>Controls and Components</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Create a Button with an Image</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Creates a custom control derived from Button with a background image.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdbuttonimg</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
													</Imports>
													<Declarations>
													</Declarations>
													<Code Delimiter="$" Kind="type decl" Language="">Public Class PictureButtonDemo
   Inherits System.Windows.Forms.Form
    
    Friend WithEvents PictureButton1 As New PictureButton

    Public Sub New()

        ' Display the OK close button.
        Me.MinimizeBox = False

        Me.Text = "Picture Button Demo"
        
        ' Create an instance of the PictureButton custom control.
        With PictureButton1
            .Parent = Me
            .Bounds = New Rectangle(10, 30, 150, 30)
            .ForeColor = Color.White
            .BackgroundImageValue = MakeBitmap(Color.Blue, PictureButton1.Width, PictureButton1.Height)
            .PressedImageValue = MakeBitmap(Color.LightBlue, PictureButton1.Width, PictureButton1.Height)
            .Text = "Click Me"
        End With
    End Sub

    ' Clean up any resources being used.
    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
        MyBase.Dispose(disposing)
    End Sub

    ' Create a bitmap object, fill it with the specified color.   
    ' To make it look like a custom image, draw an ellipse in it.
    Function MakeBitmap(ByVal ButtonColor As Color, ByVal width As Integer, ByVal height As Integer) As Bitmap
        Dim bmp As New Bitmap(width, height)
        Dim g As Graphics = Graphics.FromImage(bmp)
        g.FillRectangle(New SolidBrush(ButtonColor), 0, 0, bmp.Width, bmp.Height)
        g.DrawEllipse(New Pen(Color.LightGray), 3, 3, width - 6, height - 6)
        g.Dispose()

        Return bmp
    End Function

    Shared Sub Main()
        Application.Run(New PictureButtonDemo)
    End Sub

    ' Because PictureButton inherits from Control, 
    ' you can use the default Click event.
    Private Sub PictureButton1_Click(ByVal sender As Object, ByVal e As EventArgs) Handles PictureButton1.Click
        'Add code here to respond to button click.    
    End Sub

End Class

'Button with an image custom control.
Public Class PictureButton
    Inherits Control

    Private backgroundImg As Image
    Private pressedImg As Image
    Private pressed As Boolean = False

    ' Property for the background image to be drawn behind the button text.
    Public Property BackgroundImageValue() As Image
        Get
            Return Me.backgroundImg
        End Get
        Set(ByVal Value As Image)
            Me.backgroundImg = Value
        End Set
    End Property

    ' Property for the background image to be drawn behind the button text when
    ' the button is pressed.
    Public Property PressedImageValue() As Image
        Get
            Return Me.pressedImg
        End Get
        Set(ByVal Value As Image)
            Me.pressedImg = Value
        End Set
    End Property

    ' Ivalidate form to cause repaint.
    Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
        Me.pressed = True
        Me.Invalidate()
        MyBase.OnMouseDown(e)
    End Sub

    ' When the mouse is released, reset the "pressed" flag
    ' and invalidate to redraw the button in the un-pressed state.
    Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
        Me.pressed = False
        Me.Invalidate()
        MyBase.OnMouseUp(e)
    End Sub 

    ' Override the OnPaint method so we can draw the background image and the text.
    Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
    
    	If Me.pressed AndAlso (Me.pressedImg IsNot Nothing) Then
	            e.Graphics.DrawImage(Me.pressedImg, 0, 0)
	        Else
	            e.Graphics.DrawImage(Me.backgroundImg, 0, 0)
        End If

        ' Draw the text if there is any.
        If Me.Text.Length > 0 Then
            Dim size As SizeF = e.Graphics.MeasureString(Me.Text, Me.Font)

            ' Center the text inside the client area of the PictureButton.
            e.Graphics.DrawString(Me.Text, Me.Font, New SolidBrush(Me.ForeColor), (Me.ClientSize.Width - size.Width) / 2, (Me.ClientSize.Height - size.Height) / 2)
        End If

        ' Draw a border around the outside of the   
        ' control to  look like Pocket PC buttons.
        e.Graphics.DrawRectangle(New Pen(Color.Black), 0, 0, Me.ClientSize.Width - 1, Me.ClientSize.Height - 1)

        MyBase.OnPaint(e)
    End Sub
End Class</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Display the SIP Icon</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Shows how to implement the SIP (soft input panel) using the InputPanel component.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdsip</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>Microsoft.WindowsCE.Forms.dll</Assembly>
															<Url />
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>Microsoft.WindowsCE.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>InputPanel</ID>
																	<Type>InputPanel</Type>
																	<ToolTip>Replace with an InputPanel control on your form.</ToolTip>
																	<Default>InputPanel1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">' To display the SIP (soft input panel) icon,
    ' add an InputPanel component to your form.
    ' To show the SIP, set the Enabled property to true. 
    $InputPanel$.Enabled = True</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Implement a DocumentList</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Implements the DocumentList control that provides the UI for managing files. Requires .NET Compact Framework 2.0.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sddoclist</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>Microsoft.WindowsCE.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>Microsoft.WindowsCE.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>DefaultDirectory</ID>
																	<Type>String</Type>
																	<ToolTip>Replace this with the default folder name.</ToolTip>
																	<Default>"Business"</Default>
																</Literal>
															</Literals>
															<Literals>																<Literal>
																	<ID>DocumentList</ID>
																	<Type>DocumentList</Type>
																	<ToolTip>Replace this with DocumentList control on your form.</ToolTip>
																	<Default>DocumentList1</Default>
																</Literal>															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">'Set up file extension filters for a
   'DocumentList and set the initial folder
    Sub SetupDocList()
      $DocumentList$.Parent = Me
      $DocumentList$.Filter = " |*.*| |*.txt;*.xml| |*.pwi;*.pdt| |*.pxl;*.psw| |*.jpg;*.gif;*.bmp| |*.wav;*.wmv;*.mpg;"
      $DocumentList$.FilterIndex = 0
      $DocumentList$.SelectedDirectory = $DefaultDirectory$
    End Sub

    Private Sub DocList_DocumentActivated(ByVal sender As Object, ByVal docevent As Microsoft.WindowsCE.Forms.DocumentListEventArgs) Handles $DocumentList$.DocumentActivated
        ' Add code to open the selected file.

    End Sub

    Private Sub DocList_DeletingDocument(ByVal sender As Object, ByVal docevent As Microsoft.WindowsCE.Forms.DocumentListEventArgs) Handles $DocumentList$.DeletingDocument
        ' Add code to close any instances of the file.

    End Sub

    Private Sub DocList_SelectedDirectoryChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles $DocumentList$.SelectedDirectoryChanged
        ' Add code to access the selected folder to open and close files.    

    End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Implement a LinkLabel</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Describes how to use the LinkLabel control in .NET Compact Framework 2.0.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdlinklab</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>LinkLabel</ID>
																	<Type>System.Windows.Forms.LinkLabel</Type>
																	<ToolTip>Replace with a LinkLabel control on your form.</ToolTip>
																	<Default>LinkLabel1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">' The Text property appears as a link.
    ' You can respond to its Click event or the KeyDown event.
    Private Sub $LinkLabel$_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles $LinkLabel$.Click
        MsgBox("Mouse click")
    End Sub

    Private Overloads Sub OnKeyDown(sender As Object, e As KeyEventArgs) Handles MyBase.KeyDown
        MsgBox("Key Down")
    End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Send a Notification to User</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Shows how to send a notification to a user using the Notification control and how to respond to it. Requires .NET Compact Framework 2.0.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdnotify</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>Microsoft.WindowsCE.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Reflection</Namespace>
														</Import>
														<Import>
															<Namespace>System.IO</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.WindowsCE.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>Caption</ID>
																	<Type>String</Type>
																	<ToolTip>Replace with a caption for the notification.</ToolTip>
																	<Default>"Notification"</Default>
																</Literal>
																<Literal>
																	<ID>EmbeddedResource</ID>
																	<Type>String</Type>
																	<ToolTip>Replace with name of embedded resource in the format: namespace.filename.extension</ToolTip>
																	<Default>"PocketPCApplication1.notify.ico"</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>Notification</ID>
																	<Type>Notification</Type>
																	<ToolTip>Replace with a Notification control on your form.</ToolTip>
																	<Default>Notification1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">Private Sub sendNotfication(ByVal message As String)

        ' Set the Text property to the HTML string.
        $Notification$.Text = message

        ' Get the icon as an embedded resource.
        ' Note that icon must be added to project as an embedded resource.
        Dim asm As System.Reflection.Assembly
        asm = System.Reflection.Assembly.GetExecutingAssembly()

        ' Note that the name for the embedded resource
        ' is case sensitive and must match the file name.
        Dim s As Stream = asm.GetManifestResourceStream($EmbeddedResource$)
        $Notification$.Icon = New Icon(s, 16, 16)

        ' If the notification is canceled, its icon remains
        ' available for later activating the notification.

        $Notification$.Caption = $Caption$
        $Notification$.Critical = False

        ' Initially display the notification for 10 seconds.
        $Notification$.InitialDuration = 10
        $Notification$.Visible = True
    End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Set the Input Method on a Pocket PC</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Sets the Pocket PC input method to Letter Recognizer. Requires .NET Compact Framework 2.0.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdim</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>Microsoft.WindowsCE.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>Microsoft.WindowsCE.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>InputPanel</ID>
																	<Type>InputPanel</Type>
																	<ToolTip>Replace with an InputPanel control on your form.</ToolTip>
																	<Default>InputPanel1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">Private Sub SetInputMethod()
    ' Sets the input method to Letter Recognizer.
    For Each method As InputMethod In $InputPanel$.InputMethods
    
        If method.Name = "Letter Recognizer" Then
            $InputPanel$.CurrentInputMethod = method
            Exit For
        End If
    Next 
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
										<Member>
											<Name>Drawing</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Copy a Bitmap</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Copies a bitmap and part of a bitmap.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdcopybmp</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
													</Imports>
													<Declarations/>
													<Code Delimiter="$" Kind="method decl" Language="">' This sample has the following methods:
' CreateBitmap - For demonstration purposes.
' CopyBitmap - Clones and also copies parts of a bitmap.
' CreateAndCopy - Calls CreateBitmap and CopyBitmap

' The OnPaint override contains the code to draw the bitmaps
' on the form. OnPaint is called whenever the form invalidates.

Dim bmpSource As Bitmap
Dim bmpClone As Bitmap
Dim bmpCenter As Bitmap

' Creates a bitmap for copying and cloning.
Function CreateBitmap(sideSize As Integer) As Bitmap
    Dim bmp As New Bitmap(sideSize, sideSize)
    Dim g As Graphics = Graphics.FromImage(bmp)

    g.FillEllipse(New SolidBrush(Color.Red), 0, 0, sideSize, sideSize)
    g.DrawLine(New Pen(Color.Black), 0, 0, sideSize, sideSize)
    g.DrawLine(New Pen(Color.Black), sideSize, 0, 0, sideSize)
    g.Dispose()

    Return bmp
End Function

' Copies the entire bitmap.   
Overloads Function CopyBitmap(bmpSource As Bitmap) As Bitmap
    Return New Bitmap(bmpSource)
End Function

' Copies a part of the bitmap.
Overloads Function CopyBitmap(bmpSource As Bitmap, part As Rectangle) As Bitmap
    Dim bmp As New Bitmap(part.Width, part.Height)

    Dim g As Graphics = Graphics.FromImage(bmpSource)
    g.DrawImage(bmpSource, 0, 0, part, GraphicsUnit.Pixel)
    g.Dispose()

    Return bmp
End Function

' Calls the above methods.
Private Sub CreateAndCopy()   
    Dim w As Integer = 75
    Dim third As Integer = CInt(w / 3)

    ' Create bitmap.
    bmpSource = CreateBitmap(w)

    ' Copy entirely as a clone.
    bmpClone = CopyBitmap(bmpSource)

    ' Copy the center part of it.
    bmpCenter = CopyBitmap(bmpSource, New Rectangle(third, third, third, third))
End Sub

' Draws the bitmaps on the form.   
Protected Overrides Sub OnPaint(e As PaintEventArgs)
    Dim arialFont As Font
    Dim blackBrush As Brush

    arialFont = New Font("Arial", 10, FontStyle.Regular)
    blackBrush = New SolidBrush(Color.Black)

    Dim y As Integer = 10

    e.Graphics.DrawString("source bitmap", ArialFont, BlackBrush, 10, y)
    y += 20

    e.Graphics.DrawImage(bmpSource, 10, y)
    y += bmpSource.Height + 10

    e.Graphics.DrawString("clone bitmap", ArialFont, BlackBrush, 10, y)
    y += 20

    e.Graphics.DrawImage(bmpClone, 10, y)
    y += bmpClone.Height + 10

    e.Graphics.DrawString("center part of bitmap", ArialFont, BlackBrush, 10, y)
    y += 20

    e.Graphics.DrawImage(bmpCenter, 10, y)
    y += bmpCenter.Height + 10

    ' Dispose graphic objects.
    arialFont.Dispose()
    blackBrush.Dispose()
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Create an Image with Transparency</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Creates an image with transparency based on the upper left pixel of the image.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdtranspar</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Drawing.Imaging</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>Bitmap</ID>
																	<Type>Bitmap</Type>
																	<ToolTip>Replace with a bitmap object defined in your application.</ToolTip>
																	<Default>bmp</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">' The .NET Compact Framework supports transparency
' but with only one transparency color.
' The SetColorKey method must have the `same color 
' specified for the low color and high color range.
Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
    Dim attr As New ImageAttributes

    ' Sets the transparency color key based on the upper left pixel of the image.
    attr.SetColorKey($Bitmap$.GetPixel(0, 0), $Bitmap$.GetPixel(0, 0))

    ' Alternatively, you can also explicitly set the transparacy color.
    attr.SetColorKey(Color.FromArgb(255, 0, 255), Color.FromArgb(255, 0, 255))
    attr.SetColorKey(Color.Fuchsia, Color.Fuchsia)

    ' Draw the image using the image attributes.
    Dim rect As New Rectangle(0, 0, $Bitmap$.Width, $Bitmap$.Height)
    e.Graphics.DrawImage($Bitmap$, rect, 0, 0, $Bitmap$.Width, $Bitmap$.Height, GraphicsUnit.Pixel, attr)
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Display Angled Text</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Displays text at a 90 degree angle using a LogFont. Requires .NET Compact Framework 2.0.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdlogfont</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>Microsoft.WindowsCE.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>Microsoft.WindowsCE.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>LogFontText</ID>
																	<Type>String</Type>
																	<ToolTip>Replace with text you want to show.</ToolTip>
																	<Default>Some Text</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>LogFont</ID>
																	<Type>LogFont</Type>
																	<ToolTip>Replace with a LogFont object in your application.</ToolTip>
																	<Default>fontStruct</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">Sub SetupLogFont()
    ' Create and define a LogFont structure.
    $LogFont$ = New Microsoft.WindowsCE.Forms.LogFont()

    With $LogFont$
        .Height = -24
        .Width = 0
        .Weight = 0
 
        ' Set the font angled at 90 degrees.
        ' Remember to multiply by 10.
        .Escapement = 900
 
        ' The Escapement member specifies both the
        ' escapement and orientation. You should set
        ' Escapement and Orientation to the same value.
        .Orientation = $LogFont$.Escapement

        ' No formmatting.
        .Italic = 0
        .Underline = 0
        .StrikeOut = 0

        .CharSet = LogFontCharSet.Default
        .OutPrecision = LogFontPrecision.Default
        .ClipPrecision = LogFontClipPrecision.Default
        .Quality = LogFontQuality.Default
        .PitchAndFamily = LogFontPitchAndFamily.Default
        .FaceName = "Arial"
    End With

    ' Create the font from the LogFont structure.
    Me.Font = System.Drawing.Font.FromLogFont($LogFont$)
End Sub

Protected Overrides Sub OnPaint(e As PaintEventArgs)
    ' Create string to draw.
    Dim drawString As String = "$LogFontText$"
    ' Create font and brush.
    Dim drawBrush As New SolidBrush(Color.Red)

    ' Create rectangle for drawing.
    Dim x As Integer = 25
    Dim y As Integer = 200
    Dim width As Integer = 150
    Dim height As Integer = -150
    Dim drawRect As New RectangleF(x, y, width, height)
    ' Draw rectangle to screen with White border to hide.
    Dim WhitePen As New Pen(Color.White)
    e.Graphics.DrawRectangle(WhitePen, x, y, width, height)

    ' Draw string to screen using the LogFont.
    e.Graphics.DrawString(drawString, Me.Font, drawBrush, drawRect)
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Draw a Box around Text</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Draws a rectangle around a string.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdbox</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>BoxString</ID>
																	<Default>"Hello World!"</Default>
																	<Type>String</Type>
																	<ToolTip>Replace with the string you want to display a rectangle around</ToolTip>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">' This snippet uses the OnPaint event handler
' to draw a rectangle around a string.
Protected Overrides Sub OnPaint(e As PaintEventArgs)
    Dim s As String = $BoxString$
    Dim pen As New Pen(Color.Red, 5)
    Dim font As New Font("Arial", 18, FontStyle.Regular)
    Dim brush As New SolidBrush(Color.Black)
    Dim textSize As SizeF = e.Graphics.MeasureString(s, font)
    
    ' Create a rectangle with padding space between string and box.
    Dim r As New Rectangle(45, 70, CInt(Fix(textSize.Width) + 10), CInt(Fix(textSize.Height) + 10))
    e.Graphics.DrawRectangle(pen, r)
    e.Graphics.DrawString(s, font, brush, 50F, 75F)
    MyBase.OnPaint(e)
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Draw Bitmap off Screen</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Shows how reduce flicker by preparing graphics off screen before rendering.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdoffscrn</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
														<Import>
															<Namespace>System.Threading</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations />
													<Code Delimiter="$" Kind="type decl" Language="">' This snippet uses the OnPaint event handler to
' draw a complex bitmap using a Graphics object
' separate from the form. When the drawing
' is completed, the bitmap is then drawn on the
' screen using a Graphics object of the form.

Protected Overrides Sub OnPaint(e As PaintEventArgs)
    Dim bmpOff As Bitmap
    Dim gxOff As Graphics

    ' Create a bitmap the size of the form.
    bmpOff = New Bitmap(ClientRectangle.Width, ClientRectangle.Height)

    Dim blueBrush As New SolidBrush(Color.Blue)
    Dim whitePen As New Pen(Color.White, 3)
    
    ' Create a Grahics object that is not of the screen.
    gxOff = Graphics.FromImage(bmpOff)
    gxOff.FillRectangle(new SolidBrush(color.red), 0, 0, bmpOff.Width, bmpOff.Height)
    
    ' Draw a complex bitmap of 1000 random rectangles. It will take a few seconds to draw.
    Dim RandomRect As Integer
    For RandomRect = 1 To 1000
        ' Generate random number with  
        ' seeds from the system clock.
        Thread.Sleep(1)
        Dim rx As New Random()
        Thread.Sleep(1)
        Dim ry As New Random()
        ' Create rectangles in the inner area of the form.
        Dim rect As New Rectangle(rx.Next(10,200), ry.Next(10,200), 10, 10)
        gxOff.DrawRectangle(whitePen, rect)
        gxOff.FillRectangle(blueBrush, rect)
    Next RandomRect
   
    ' Render the off-screen bitmap onto the screen.
    e.graphics.DrawImage(bmpOff, 0, 0, ClientRectangle, GraphicsUnit.Pixel)
    
    ' Dispose created Graphic object.
    gxOff.Dispose()
    
    ' Note that flickering may still occur if OnPaint is invoked 
    ' frequently by the background being repainted.
    ' You can override OnPaintBackground to stop background painting.
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Get Graphics Object from a Bitmap</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Gets a Graphics object from a Bitmap object.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdgobmp</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
													</Imports>
													<Declarations />
													<Code Delimiter="$" Kind="method body" Language="">' Get a Graphics object from a Bitmap object.
Dim bmp As New Bitmap(10, 10)
Dim g As Graphics = Graphics.FromImage(bmp)</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Get a Graphics Object from a Control</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Gets a Graphics object from a control.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdgoctl</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
													</Imports>
													<Declarations />
													<Code Delimiter="$" Kind="method body" Language="">' Get Graphics object from a the Form control.
Dim g As Graphics = Me.CreateGraphics()</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Get a Graphics Object from OnPaint</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Gets the Graphics object from the OnPaint event handler.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdgopaint</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
													</Imports>
													<Declarations />
													<Code Delimiter="$" Kind="method decl" Language="">' Get Graphics object from the OnPaint event handler.
Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
    ' Use the Graphics object from the PaintEventArgs
    ' for tasks such as drawing a line.   

    ' Create pen.
    Dim blackPen As New Pen(Color.Black, 3)

    ' Create coordinates of points that define line.
    Dim x1 As Integer = 100
    Dim y1 As Integer = 100
    Dim x2 As Integer = 500
    Dim y2 As Integer = 100

    ' Draw line to screen.
    e.Graphics.DrawLine(blackPen, x1, y1, x2, y2)
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Save an Image to a File</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Saves the image of a PictureBox to a file.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdsaveimg</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing.Imaging</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>FileToSave</ID>
																	<Type>String</Type>
																	<ToolTip>Replace this with the path and file name for the file to save.</ToolTip>
																	<Default>".\My Documents\savedbmp.bmp"</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>PictureBox</ID>
																	<Type>PictureBox</Type>
																	<ToolTip>Replace with a PictureBox control on your form.</ToolTip>
																	<Default>PictureBox1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">Private Sub saveBitmap()
    'Save image to a file.
    $PictureBox$.Image.Save($FileToSave$, ImageFormat.Bmp)
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Zoom an Image</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Zooms an image.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdzoom</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations/>
													<Code Delimiter="$" Kind="method decl" Language="">' This code simulates a zoom effect with two
' bitmaps of the same size, where the second
' contains a zoomed center section of the first.
Dim bmp as Bitmap
Dim bmpZoom as Bitmap
   
' First call CreateBitmap, then call DefineZoom.
Sub CreateBitmap()
    bmp = New Bitmap(75,75)
    Dim g As Graphics = Graphics.FromImage(bmp)

    Dim BlueBrush As New SolidBrush(Color.Blue)
    Dim RedBrush As New SolidBrush(Color.Red)

    Dim OuterRect As New Rectangle(0, 0, 200, 200)
    g.FillRectangle(BlueBrush, OuterRect)
      
    Dim InnerRect As New Rectangle(25, 25, 25, 25)
    g.FillRectangle(RedBrush, InnerRect)

    g.Dispose()
End Sub

Sub DefineZoom()
    ' Call this method after CreateBitmap
    ' from the constructor of your form.
    bmpZoom = New Bitmap(bmp.Width, bmp.Height)
    Dim g As Graphics = Graphics.FromImage(bmpZoom)

    Dim srcRect As New Rectangle(CInt(bmp.Width / 4), CInt(bmp.Height / 4), _
        CInt(bmp.Width / 2), CInt(bmp.Height / 2))
    Dim dstRect As New Rectangle(0, 0, bmpZoom.Width, bmpZoom.Height)
    g.DrawImage(bmp, dstRect, srcRect, GraphicsUnit.Pixel)
End Sub

Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
    e.Graphics.DrawImage(bmp, 0, 0)
    e.Graphics.DrawImage(bmpZoom, 125, 0)

    bmp.Dispose
    bmpZoom.Dispose
    MyBase.OnPaint(e)
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
										<Member>
											<Name>Forms</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Center a Form on a Pocket PC</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Resizes the form to occupy only the center part of the screen.</Description>
														<Shortcut>sdcenter</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
													</Imports>
													<Code Delimiter="$" Kind="method decl" Language="">
        Private Sub CenterForm()
    'Set the desired form size.  
    Me.FormBorderStyle = Windows.Forms.FormBorderStyle.None
    Me.Size = New Size(200, 200)
    Me.BackColor = Color.Red
    'Get the size of the screen for centering the form.
    Dim rectS As Rectangle = Screen.PrimaryScreen.Bounds
    Me.Location = New Point(CInt((rectS.Width - Me.Width) / 2), CInt((rectS.Height - Me.Height ) / 2))
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Display a Background Image on a Form</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Displays an image from an embedded resource to occupy the size of the form.</Description>
														<Shortcut>sdbackimg</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
														<Import>
															<Namespace>System.Reflection</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>image</ID>
																	<Type>System.String</Type>
																	<ToolTip>Replace with name of embedded resource in the format: namespace.filename.extension</ToolTip>
																	<Default>PocketPCApplication1.mypicture.bmp</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">Protected Overrides Sub OnPaint(e As PaintEventArgs)
    'Get image compiled as an embedded resource.
    Dim asm As System.Reflection.Assembly
    asm = System.Reflection.Assembly.GetExecutingAssembly()
    
    ' Note that the name for the embedded resource
    ' is case sensitive and must match the file name.
    Dim backGroundImage As New Bitmap(asm.GetManifestResourceStream("$Image$"))
    
    e.Graphics.DrawImage(backgroundImage, Me.ClientRectangle, _
        New Rectangle(0, 0, backgroundImage.Width, backgroundImage.Height), _
        GraphicsUnit.Pixel)
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Hide the Close button</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Remove close and minimize buttons.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdhidecl</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations />
													<Code Delimiter="$" Kind="method body" Language="">' Removes Minimize (X) and Close(OK) buttons.
' Caution: Only way to close the application
' is with the Running Programs memory options under Settings. 
Me.ControlBox = False</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Hide the Menu Bar</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Hides the menu bar below the form.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdhidemb</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Declarations />
													<Code Delimiter="$" Kind="method body" Language="">' Removes the menu bar at the bottom of the screen.
Me.Menu = Nothing</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Make a Form Resizable on a Pocket PC</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Configures form to be resizable on a Pocket PC.</Description>
														<Shortcut>sdresizef</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
													</Imports>
													<Code Delimiter="$" Kind="method body" Language="">' Allows the form to be resized.
Me.FormBorderStyle = Windows.Forms.FormBorderStyle.None
' Set the form to be other than the default size.
Me.Size = New Size(200, 200)
													</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Resize Controls for SIP Display</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Resizes the length of a ListBox when the SIP (Soft Input Panel) is displayed.</Description>
														<Shortcut>sdresizec</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>Microsoft.WindowsCE.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.WindowsCE.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>TextBox</ID>
																	<Type>System.Windows.Forms.TextBox</Type>
																	<ToolTip>Replace with a TextBox control on your form.</ToolTip>
																	<Default>TextBox1</Default>
																</Literal>
																<Literal>
																	<ID>ListBox</ID>
																	<Type>System.Windows.Forms.ListBox</Type>
																	<ToolTip>Replace with a ListBox control on your form.</ToolTip>
																	<Default>ListBox1</Default>
																</Literal>
																<Literal>
																	<ID>InputPanel</ID>
																	<Type>Microsoft.WindowsCE.Forms.InputPanel</Type>
																	<ToolTip>Replace with an InputPanel control on your form.</ToolTip>
																	<Default>InputPanel1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">' Shortens the height of a ListBox when the SIP
' (Soft Input Panel) is displayed so that the vertical
' scroll bar of the ListBox is not obscured by the SIP.

' Size the ListBox to about the height of the form.
' Put the TextBox to the upper right or left of the list box.

' When the TextBox receives focus, the SIP is enabled.
' When the ListBox receives focus, the SIP is disabled.

Dim ListBoxFullHeight As Integer

' Call this method from the constructor, 
' or Form_Load event, of your form.
Private Sub SetListBoxFullHeight
    ' Determine the original height of the list box.
    ListBoxFullHeight = $ListBox$.Height
End Sub

' The InputPanel.EnabledChanged event 
' occurs whenever the SIP is enabled or disabled.
Private Sub $InputPanel$_EnabledChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles $InputPanel$.EnabledChanged
    Dim VisibleRect As System.Drawing.Rectangle
    If $InputPanel$.Enabled = False Then
        ' The SIP is disabled, so the height of the ListBox
        ' is set to its original full height (ListBoxFullHeight).
        $ListBox$.Height = ListBoxFullHeight
    Else
        ' The SIP is enabled, so the height of the ListBox
        ' is set to the height of the visible desktop area,
        ' minus 10 pixels for padding.
        VisibleRect = $InputPanel$.VisibleDesktop
        $ListBox$.Height = VisibleRect.Height - 20
    End If
End Sub

Private Sub $TextBox$_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles $TextBox$.GotFocus
    ' Display the SIP for entering text.
    $InputPanel$.Enabled = True
End Sub

Private Sub $ListBox$_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles $ListBox$.GotFocus
    ' Hide the SIP.
    $InputPanel$.Enabled = False
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Scroll the Contents of a Form</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Uses scrollbars to scroll through a form with a panel of controls.</Description>
														<Shortcut>sdscroll</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>hScroll</ID>
																	<Type>System.Windows.Forms.HScrollBar</Type>
																	<ToolTip>Replace with a HScrollBar control on your form.</ToolTip>
																	<Default>HScrollBar1</Default>
																</Literal>
																<Literal>
																	<ID>panel</ID>
																	<Type>System.Windows.Forms.Panel</Type>
																	<ToolTip>Replace with a Panel control on your form.</ToolTip>
																	<Default>Panel1</Default>
																</Literal>
																<Literal>
																	<ID>vScroll</ID>
																	<Type>System.Windows.Forms.VScrollBar</Type>
																	<ToolTip>Replace with a VScrollBar on your form.</ToolTip>
																	<Default>VScrollBar1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">' Place your controls in a panel.
Private Sub $hscroll$_ValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles $hscroll$.ValueChanged
    Me.$panel$.Left = -Me.$hscroll$.Value
End Sub

Private Sub $vscroll$_ValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles $vscroll$.ValueChanged
    Me.$panel$.Top = -Me.$vscroll$.Value
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Set a HardwareButton to Show a Form on a Pocket PC</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Demonstrates how to override Pocket PC hardware buttons. Requires .NET Compact Framework 2.0.</Description>
														<Shortcut>sdhard</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>Microsoft.WindowsCE.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>Microsoft.WindowsCE.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>statusBar</ID>
																	<Type>System.Windows.Forms.StatusBar</Type>
																	<ToolTip>Replace with a StatusBar control on your form.</ToolTip>
																	<Default>StatusBar1</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>ppcButton1</ID>
																	<Type>Microsoft.WindowsCE.Forms.HardwareButton</Type>
																	<ToolTip>Replace this with a HardwareButton control on your form.</ToolTip>
																	<Default>HardwareButton1</Default>
																</Literal>
																<Literal>
																	<ID>ppcButton4</ID>
																	<Type>Microsoft.WindowsCE.Forms.HardwareButton</Type>
																	<ToolTip>Replace this with a HardwareButton control on your form.</ToolTip>
																	<Default>HardwareButton2</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">Private Sub ConfigHWButton()
    ' Set KeyPreview to true so that the form will receive key events 
    ' before they are passed to the control that has focus. 
    Me.KeyPreview = True
    
    $PPCButton1$= New HardwareButton()
    $PPCButton4$ = New HardwareButton()
    
    ' Set the AssociatedControl property to the current form
    ' and configure the first and fourth buttons to activate the form.
    Try
        $PPCButton1$.AssociatedControl = Me
        $PPCButton4$.AssociatedControl = Me
        $PPCButton1$.HardwareKey = HardwareKeys.ApplicationKey1
        $PPCButton4$.HardwareKey = HardwareKeys.ApplicationKey4
    Catch exc As Exception
        MsgBox(exc.Message + " Check if the hardware button is physically available on this device.")
    End Try
End Sub
   
Private Overloads Sub OnKeyUp(sender As Object, e As KeyEventArgs) Handles MyBase.KeyUp
    ' When a hardware button is pressed and released, this form receives the 
    ' KeyUp event. The OnKeyUp method is used to determine which hardware
    ' button was pressed, because the event data specifies a member of the 
    ' HardwareKeys enumeration.
    Select Case CType(e.KeyCode, HardwareKeys)
        Case HardwareKeys.ApplicationKey1
            $StatusBar$.Text = "Button 1 pressed."
        Case HardwareKeys.ApplicationKey4
            $StatusBar$.Text = "Button 4 pressed."
        Case Else
    End Select
End Sub</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Set the Close Button to OK</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Sets the Close button (OK), to close the form.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdokclose</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
													</Imports>
													<Declarations />
													<Code Delimiter="$" Kind="method body" Language="">' Display the OK button to close the application.
Me.ControlBox = True
Me.MinimizeBox = False</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Set the Close Button to X</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Sets the Minimize button (X), to minimize the form.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdxclose</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Declarations />
													<Code Delimiter="$" Kind="method body" Language="">' Display the X button to minimize application.
' This is the default configuration.
Me.ControlBox = True
Me.MinimizeBox = True</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Set the Form to be Full Size on a Pocket PC</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Makes the form full sized with no menu or title bar.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdfull</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations />
													<Code Delimiter="$" Kind="method body" Language="">
  ' Sets the form to be full sized,
' with no menu or title bars.
' Caution: Only way to close the application
' is with the Running Programs memory options under Settings. 
Me.WindowState = FormWindowState.Maximized 
Me.FormBorderStyle = Windows.Forms.FormBorderStyle.None
Me.ControlBox = False
Me.Menu = Nothing
Me.ControlBox = False</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Set the Screen Orientation</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Sets the screen orientation to portrait: 90 degrees. Requires .NET Compact Framework 2.0.</Description>
														<HelpUrl />
														<Keywords />
														<Shortcut>sdorient</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>Microsoft.WindowsCE.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.WindowsCE.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations />
													<Code Delimiter="$" Kind="method body" Language="">' Sets the screen orientation to portrait.
SystemSettings.ScreenOrientation = ScreenOrientation.Angle90</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
									</CodeSnippetMembers>
								</Member>
							</CodeSnippetMembers>
						</Member>
						<Member>
							<Name>Windows Forms Applications</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippetMembers>
								<Member>
									<Name>Clipboard</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Copy a Class Instance to the Clipboard</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Copies an instance of a serializable class to the Clipboard.</Description>
												<Shortcut>clipCopyClass</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>className</ID>
															<Type>String</Type>
															<ToolTip>Replace with the type of the instance (as a String) that you want to copy to the clipboard.Note that the type must be serializable.</ToolTip>
															<Default>Object</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>classInstance</ID>
															<Type>Object</Type>
															<ToolTip>Replace with the instance that you want to copy to the clipboard.</ToolTip>
															<Default>classInstance</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">My.Computer.Clipboard.SetData("$className$", $classInstance$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Copy an Image to the Clipboard</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Copies an Image to the Clipboard.</Description>
												<Shortcut>clipCopyImage</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>image</ID>
															<Type>Image</Type>
															<ToolTip>Replace with the image you want to copy to the clipboard.</ToolTip>
															<Default>picture</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">My.Computer.Clipboard.SetImage($image$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Copy a String to the Clipboard</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Copies a String to the Clipboard.</Description>
												<Shortcut>clipCopyString</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>text</ID>
															<Type>String</Type>
															<ToolTip>Replace with the String you want to copy to the clipboard.</ToolTip>
															<Default>"My String"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">My.Computer.Clipboard.SetText($text$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Get an Image from the Clipboard</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Gets an Image from the Clipboard and stores it in an Image object.</Description>
												<Shortcut>clipGetImage</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim picture As Image
If My.Computer.Clipboard.ContainsImage() Then
    picture = My.Computer.Clipboard.GetImage
End If</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Get a String from the Clipboard</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Gets a String from the Clipboard and stores it in a String object</Description>
												<Shortcut>clipGetString</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Dim text As String
If My.Computer.Clipboard.ContainsText Then
    text = My.Computer.Clipboard.GetText
End If</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Controls and Components</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippetMembers>
										<Member>
											<Name>Button</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Resize a Button Dynamically by Measuring its Text</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Resizes a button by measuring its text and then resetting its Width.</Description>
														<Shortcut>butWidth</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>buttonName</ID>
																	<Type>Button</Type>
																	<ToolTip>Replace with a button on your form.</ToolTip>
																	<Default>Button1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">' Use a Graphics object to measure the button's text.  Then add blanks to leave space on either side.
Dim surface As Graphics = $buttonName$.CreateGraphics
Dim textSize As SizeF = surface.MeasureString("  " &amp; $buttonName$.Text &amp; "  ", $buttonName$.Font)
surface.Dispose()
$buttonName$.Width = CInt(textSize.Width)</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Resize a Button Dynamically by using AutoSize</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Uses AutoSize to dynamically resize a button to the length of its text.</Description>
														<Shortcut>butAutoSize</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Drawing.dll</Assembly>
															<Url />
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
															<Url />
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>buttonName</ID>
																	<Type>Button</Type>
																	<ToolTip>Replace with a button on your form.</ToolTip>
																	<Default>Button1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">$buttonName$.AutoSize = True
													</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
										<Member>
											<Name>Calendar</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Select a Range of Dates in a Windows Forms MonthCalendar</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Selects a range of dates in a MonthCalendar control.</Description>
														<Shortcut>calRange</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>calendar</ID>
																	<Type>MonthCalendar</Type>
																	<ToolTip>Replace with a MonthCalendar from your form.</ToolTip>
																	<Default>MonthCalendar1</Default>
																</Literal>
																<Literal>
																	<ID>startDate</ID>
																	<Type>Date</Type>
																	<ToolTip>Replace with a start date for the selection range.</ToolTip>
																	<Default>#3/1/2005#</Default>
																</Literal>
																<Literal>
																	<ID>endDate</ID>
																	<Type>Date</Type>
																	<ToolTip>Replace with an end date for the selection range.</ToolTip>
																	<Default>#3/21/2005#</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">$calendar$.SetSelectionRange($startDate$, $endDate$)</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
										<Member>
											<Name>ComboBox</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Populate a ComboBox from an ArrayList</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Uses an ArrayList object as the data source for a ComboBox control.</Description>
														<Shortcut>cbArrayList</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
															<Url />
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>System.Collections</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>comboBoxName</ID>
																	<Type>ComboBox</Type>
																	<ToolTip>Replace with a ComboxBox on your form.</ToolTip>
																	<Default>ComboBox1</Default>
																</Literal>
																<Literal>
																	<ID>arrayListName</ID>
																	<Type>ArrayList</Type>
																	<ToolTip>Replace with the ArrayList that you want to populate your ComboBox.</ToolTip>
																	<Default>arrayListName</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">$comboBoxName$.DataSource = $arrayListName$
													</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Populate a ComboBox from the Column of a Database Table</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Fills a ComboBox with data from a DataTable object.</Description>
														<Shortcut>cbData</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Data.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.xml</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Data</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>columnName</ID>
																	<Type>String</Type>
																	<ToolTip>Replace with the name of the column from the DataTable that you want to use.</ToolTip>
																	<Default>"ColumnName"</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>ComboBoxName</ID>
																	<Type>ComboBox</Type>
																	<ToolTip>Replace with a ComboxBox on your form.</ToolTip>
																	<Default>ComboBox1</Default>
																</Literal>
																<Literal>
																	<ID>table</ID>
																	<Type>DataTable</Type>
																	<ToolTip>Replace with the DataTable whose column you want to use to populate the ComboBox.</ToolTip>
 																	<Default>dt</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">Me.$ComboBoxName$.DataSource = $table$
Me.$ComboBoxName$.DisplayMember = $"ColumnName"$</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Provide Automatic Text Completion for a ComboBox</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Provides automatic text completion for a combobox.</Description>
														<Shortcut>cbComplete</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>mode</ID>
																	<ToolTip>Replace with the mode of autocomplete you want (Append, None, Suggest, or SuggestAttend).</ToolTip>
																	<Default>Suggest</Default>
																</Literal>
																<Literal>
																	<ID>source</ID>
																	<ToolTip>Replace with the source to use for the autocomplete.</ToolTip>
																	<Default>AllUrl</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>comboBoxName</ID>
																	<Type>ComboBox</Type>
																	<ToolTip>Replace with a ComboxBox on your form.</ToolTip>
																	<Default>ComboBox1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">$comboBoxName$.AutoCompleteMode = AutoCompleteMode.$mode$
$comboBoxName$.AutoCompleteSource = AutoCompleteSource.$source$</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
										<Member>
											<Name>DataGridView</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Lock the Column Widths of a DataGridView</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Locks the column widths of a DataGridView.</Description>
														<Shortcut>gridLock</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>grid</ID>
																	<Type>DataGridView</Type>
																	<ToolTip>Replace with a DataGridView from your form.</ToolTip>
																	<Default>DataGridView1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">$grid$.AllowUserToResizeColumns = False</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
										<Member>
											<Name>ListBox</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Clear Items from a Bound ListBox Control</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Clears items from a bound ListBox control.</Description>
														<Shortcut>lbClear</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>listBoxName</ID>
																	<Type>ListBox</Type>
																	<ToolTip>Replace with a ListBox control on your form.</ToolTip>
																	<Default>ListBox1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">$listBoxName$.DataSource = Nothing
$listBoxName$.Items.Clear()</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Load a Column from a Database Table into a ListBox Control</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Fills a ListBox with data from a DataTable object.</Description>
														<Shortcut>lbData</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Data.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.xml</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Data</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>columnName</ID>
																	<Type>String</Type>
																	<ToolTip>Replace with the name of the column from the DataTable that you want to use.</ToolTip>
																	<Default>"ColumnName"</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>listBoxName</ID>
																	<Type>ListBox</Type>
																	<ToolTip>Replace with a ListBox control on your form.</ToolTip>
																	<Default>ListBox1</Default>
																</Literal>
																<Literal>
																	<ID>table</ID>
																	<Type>DataTable</Type>
																	<ToolTip>Replace with the DataTable whose column you want to load in the ListBox.</ToolTip>
																	<Default>dt</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">
		  $listBoxName$.DataSource = $table$
$listBoxName$.DisplayMember = $columnName$</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Locate an Item in a Windows Forms ListBox Control</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Locates the first incidence of a string in a ListBox control.</Description>
														<Shortcut>lbLocate</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>searchString</ID>
																	<Type>String</Type>
																	<ToolTip>Replace with the String whose location you are trying to find.</ToolTip>
																	<Default>"Maria"</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>listBoxName</ID>
																	<Type>ListBox</Type>
																	<ToolTip>Replace with a ListBox control on your form.</ToolTip>
																	<Default>ListBox1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">Dim index As Integer
index = $listBoxName$.FindString($searchString$)
If index &lt;> ListBox.NoMatches Then
    ' Item found.
Else
    ' Item not found.
End If</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Select an Item in a Windows Forms ListBox Control</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Selects an item in a ListBox control, programmatically.</Description>
														<Shortcut>lbSelect</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>listBoxName</ID>
																	<Type>ListBox</Type>
																	<ToolTip>Replace with a ListBox control on your form.</ToolTip>
																	<Default>ListBox1</Default>
																</Literal>
																<Literal>
																	<ID>index</ID>
																	<Type>Integer</Type>
																	<ToolTip>Replace with the index of the ListBox item to select.</ToolTip>
																	<Default>1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">$listBoxName$.SelectedIndex = $index$
													</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
										<Member>
											<Name>ListView</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Determine the Selected Item in a ListView</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Determines the selected item in a ListView and assigns it to a variable.</Description>
														<Shortcut>lvSelected</Shortcut>
														<Keywords>
															<Keyword>ListView</Keyword>
															<Keyword>ListViewItem</Keyword>
															<Keyword>SelectedItems</Keyword>
														</Keywords>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>listViewName</ID>
																	<Type>ListView</Type>
																	<ToolTip>Replace with a ListView control on your form.</ToolTip>
																	<Default>ListView1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">Dim selectedItem As ListViewItem
If $listViewName$.SelectedItems.Count > 0 Then
    selectedItem = $listViewName$.SelectedItems(0)
Else
    selectedItem = Nothing
End If</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
										<Member>
											<Name>Menu</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Add a Check Mark to a ToolStripMenuItem</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Adds a check mark to a ToolStripMenuItem. </Description>
														<Shortcut>menuAddCheck</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>menuItemName</ID>
																	<Type>ToolStripMenuItem</Type>
																	<ToolTip>Replace with a dropdown menu item on your form.</ToolTip>
																	<Default>ToolStripMenuItem1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">$menuItemName$.Checked = True</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Add a Context Menu to a Windows Form</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Adds a context menu to a windows form.</Description>
														<Shortcut>menuContext</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>secondItem</ID>
																	<Type>String</Type>
																	<ToolTip>Replace with text for the second item in the menu.</ToolTip>
																	<Default>"&amp;Second Item"</Default>
																</Literal>
																<Literal>
																	<ID>firstItem</ID>
																	<Type>String</Type>
																	<ToolTip>Replace with text for the first item in the menu.</ToolTip>
																	<Default>"&amp;First Item"</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>form</ID>
																	<Type>Form</Type>
																	<ToolTip>Replace with the form where the context menu should appear.</ToolTip>
																	<Default>Me</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">Dim newMenu As New ContextMenuStrip()
$form$.ContextMenuStrip = newMenu

Dim firstItem As New ToolStripMenuItem()
Dim secondItem As New ToolStripMenuItem()
firstItem.Text = $firstItem$
secondItem.Text = $secondItem$

newMenu.Items.Add(firstItem)
newMenu.Items.Add(secondItem)</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Add a Shortcut Key to a ToolStripMenuItem</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Add a shortcut to a ToolStripMenuItem. </Description>
														<Shortcut>menuAddShort</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms.Keys</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>menuItemName</ID>
																	<Type>ToolStripMenuItem</Type>
																	<ToolTip>Replace with a dropdown menu item on your form.</ToolTip>
																	<Default>ToolStripMenuItem1</Default>
																</Literal>
																<Literal>
																	<ID>shortcutKey</ID>
																	<Type>Keys</Type>
																	<ToolTip>Replace with the shortcut key you want to use.</ToolTip>
																	<Default>F6</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">$menuItemName$.ShortcutKeys = $shortcutKey$</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Add Menu Items to Windows Forms</Title>
														<Author>Microsoft Corporation</Author>
																<Description>Adds menu items to an existing menu</Description>
														<Shortcut>menuAddItems</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>secondDropDownName</ID>
																	<Type>String</Type>
																	<ToolTip>Replace with text for the second dropdown item in the menu. Use "&amp;" to create accelerator keys.</ToolTip>
																	<Default>"&amp;Second Item"</Default>
																</Literal>
																<Literal>
																	<ID>firstDropDownName</ID>
																	<Type>String</Type>
																	<ToolTip>Replace with text for the first dropdown item in the menu. Use "&amp;" to create accelerator keys.</ToolTip>
																	<Default>"&amp;First Item"</Default>
																</Literal>
																<Literal>
																	<ID>menuStripName</ID>
																	<Type>MenuStrip</Type>
																	<ToolTip>Replace with a MenuStrip on your form.</ToolTip>
																	<Default>MenuStrip1</Default>
																</Literal>
																<Literal>
																	<ID>menuName</ID>
																	<Type>String</Type>
																	<ToolTip>Replace with the name of the added menu. </ToolTip>
																	<Default>"&amp;Menu Name"</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">Dim addedMenuStripItem As New ToolStripMenuItem
Dim firstDropDownItem As New ToolStripMenuItem
Dim secondDropDownItem As New ToolStripMenuItem

addedMenuStripItem.Text = $menuName$
firstDropDownItem.Text = $firstDropDownName$
secondDropDownItem.Text = $secondDropDownName$

$menuStripName$.Items.Add(addedMenuStripItem)

addedMenuStripItem.DropDownItems.Add(firstDropDownItem)
addedMenuStripItem.DropDownItems.Add(secondDropDownItem)</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Delete a ToolStripMenuItem from a MenuStrip</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Deletes a ToolStripMenuItem from an existing MenuStrip.</Description>
														<Shortcut>menuDelete</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>menuStripName</ID>
																	<Type>MenuStrip</Type>
																	<ToolTip>Replace with a MenuStrip on your form.</ToolTip>
																	<Default>MenuStrip1</Default>
																</Literal>
																<Literal>
																	<ID>menuItemName</ID>
																	<Type>ToolStripMenuItem</Type>
																	<ToolTip>Replace with a ToolStripMenuItem on your form.</ToolTip>
																	<Default>ToolStripMenuItem1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method decl" Language="">$menuStripName$.Items.Remove($menuItemName$)</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
										<Member>
											<Name>ProgressBar</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Use a ProgressBar to Track an Iteration</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Increments a ProgressBar by a fixed amount, upon each iteration.</Description>
														<Shortcut>pbIterate</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>minProgress</ID>
																	<Type>Integer</Type>
																	<ToolTip>Replace with an integer minimum value for the ProgressBar range.</ToolTip>
																	<Default>1</Default>
																</Literal>
																<Literal>
																	<ID>maxProgress</ID>
																	<Type>Integer</Type>
																	<ToolTip>Replace with an integer maximum value for the ProgressBar range.</ToolTip>
																	<Default>100000</Default>
																</Literal>
																<Literal>
																	<ID>initValue</ID>
																	<Type>Integer</Type>
																	<ToolTip>Replace with an integer which represents the initial position of the ProgressBar.</ToolTip>
																	<Default>1</Default>
																</Literal>
																<Literal>
																	<ID>step</ID>
																	<Type>Integer</Type>
																	<ToolTip>Replace with an integer specifying the amount that the ProgressBar increases upon each call to PerformStep.</ToolTip>
																	<Default>1</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>progressBar</ID>
																	<Type>ProgressBar</Type>
																	<ToolTip>Replace with a ProgressBar on your form.</ToolTip>
																	<Default>ProgressBar1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">With $progressBar$
    .Minimum = $minProgress$
    .Maximum = $maxProgress$
    .Value = $initValue$
    .Step = $step$

    For i As Integer = .Minimum To .Maximum
        ' Perform one step of the action being tracked.
        .PerformStep()
    Next i

End With</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
										<Member>
											<Name>RadioButton</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Create a RadioButton Group from a String Array</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Creates a Group of RadioButtons from an Array of Strings.</Description>
														<Shortcut>rbString</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms</Assembly>
														</Reference>
														<Reference>
															<Assembly>System.Drawing</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Drawing</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>array</ID>
																	<ToolTip>Replace with your String Array.</ToolTip>
																	<Default>names</Default>
																</Literal>
																<Literal>
																	<ID>topY</ID>
																	<ToolTip>Replace with y value of the topmost RadioButton's position.</ToolTip>
																	<Default>30</Default>
																</Literal>
																<Literal>
																	<ID>x</ID>
																	<ToolTip>Replace with the x value of the RadioButton positions.</ToolTip>
																	<Default>10</Default>
																</Literal>
																<Literal>
																	<ID>spacing</ID>
																	<ToolTip>Replace with the spacing between the RadioButton positions.</ToolTip>
																	<Default>30</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>groupBoxName</ID>
																	<Type>GroupBox</Type>
																	<ToolTip>Replace with GroupBox on your form, that the RadioButtons will be contained in.</ToolTip>
																	<Default>GroupBox1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">Dim radio As RadioButton
Dim y As Integer = $topY$

For Each button As String In $array$
    radio = New RadioButton()
    With radio
        .Location = New Point($x$, y)
		.Text = button
    End With
    y += $spacing$
    Me.$groupBoxName$.Controls.Add(radio)
Next</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
										<Member>
											<Name>RichTextBox</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Format Characters in Bold in a RichTextBox Control</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Adds the text "This text is in bold." to an existing RichTextBox control.</Description>
														<Shortcut>richFormat</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
															<Url />
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>RTFControl</ID>
																	<Type>System.Windows.Forms.RichTextBox</Type>
																	<ToolTip>Replace with an Object value.</ToolTip>
																	<Default>RichTextBox1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">' For more information on the rich text format characters, click: http://www.microsoft.com/downloads/details.aspx?FamilyID=e5b8ebc2-6ad6-49f0-8c90-e4f763e3f04f&amp;DisplayLang=en
$RTFControl$.Rtf = "{\rtf1\ansi This is in \b bold\b0.}"</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Load an RTF File into a RichTextBox Control</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Loads a file in RTF format into a RichTextBox control.</Description>
														<Shortcut>richLoad</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
															<Url />
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>Filename</ID>
																	<Type>String</Type>
																	<ToolTip>Replace with the file name.</ToolTip>
																	<Default>"RichTextDocument.rtf"</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>RTFControl</ID>
																	<Type>System.Windows.Forms.RichTextBox</Type>
																	<ToolTip>Replace with a RichTextBox control on your form.</ToolTip>
																	<Default>RichTextBox1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">$RTFControl$.LoadFile($Filename$)</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Position the Cursor in a RichTextBox</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Positions the cursor in a RichTextBox.</Description>
														<Shortcut>richCursor</Shortcut>
													</Header>
													<Imports>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>Location</ID>
																	<Type>Integer</Type>
																	<ToolTip>Replace with the location to place the cursor.</ToolTip>
																	<Default>5</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>text</ID>
																	<Type>RichTextBox</Type>
																	<ToolTip>Replace with a RichTextBox control on your form.</ToolTip>
																	<Default>RichTextBox1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">$text$.Focus()
$text$.Select($Location$, 0)</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
												<Snippet>
													<Header>
														<Title>Save the Contents of a RichTextBox to a RTF File</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Saves the content of the RichText box to a RTF file.</Description>
														<Shortcut>richSave</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
															<Url />
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>Filename</ID>
																	<Type>String</Type>
																	<ToolTip>Replace with the file name.</ToolTip>
																	<Default>"FileName.rtf"</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>RTFControl</ID>
																	<Type>System.Windows.Forms.RichTextBox</Type>
																	<ToolTip>Replace with a RichTextBox control on your form.</ToolTip>
																	<Default>RichTextBox1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">$RTFControl$.SaveFile($Filename$)</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
										<Member>
											<Name>TextBox</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Enter Multiline String into Multiline TextBox</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Enters a multiline string into a multiline textbox.</Description>
														<Shortcut>tbArray</Shortcut>
													</Header>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>arrayName</ID>
																	<ToolTip>Replace with an Array of Strings to populate the lines of yourTextBox.</ToolTip>
																	<Default>names</Default>
																</Literal>
															</Literals>
															<Literals>
																<Literal>
																	<ID>textboxName</ID>
																	<Type>TextBox</Type>
																	<ToolTip>Replace with a multiline TextBox on your form.</ToolTip>
																	<Default>TextBox1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">$textboxName$.Lines = $arrayName$</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
										<Member>
											<Name>TreeView</Name>
											<Path />
											<ImageIndex>45</ImageIndex>
											<CodeSnippets>
												<Snippet>
													<Header>
														<Title>Determine the Selected Node in a TreeView</Title>
														<Author>Microsoft Corporation</Author>
														<Description>Determines the selected node in a TreeView control and assigns it to a variable.</Description>
														<Shortcut>tvSelect</Shortcut>
													</Header>
													<References>
														<Reference>
															<Assembly>System.Windows.Forms.dll</Assembly>
														</Reference>
													</References>
													<Imports>
														<Import>
															<Namespace>System.Windows.Forms</Namespace>
														</Import>
														<Import>
															<Namespace>Microsoft.VisualBasic</Namespace>
														</Import>
														<Import>
															<Namespace>System</Namespace>
														</Import>
													</Imports>
													<Declarations>
														<Declaration>
															<Literals>
																<Literal>
																	<ID>treeViewName</ID>
																	<Type>TreeView</Type>
																	<ToolTip>Replace with a treeview on your form.</ToolTip>
																	<Default>TreeView1</Default>
																</Literal>
															</Literals>
														</Declaration>
													</Declarations>
													<Code Delimiter="$" Kind="method body" Language="">Dim selectedNode As TreeNode
selectedNode = $treeViewName$.SelectedNode</Code>
													<ImageIndex>43</ImageIndex>
								</Snippet>
											</CodeSnippets>
										</Member>
									</CodeSnippetMembers>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Add a ToolTip to a Windows Forms Control</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Adds a ToolTip to a Windows Forms Control.</Description>
												<Shortcut>controlTip</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>text</ID>
															<Type>String</Type>
															<ToolTip>Replace with a String to display in the ToolTip.</ToolTip>
															<Default>"ToolTip Text"</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>control</ID>
															<Type>Control</Type>
															<ToolTip>Replace with a control on your form.</ToolTip>
															<Default>Button1</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim tooltip As New ToolTip()
tooltip.SetToolTip($control$, $text$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Drawing</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Create a Bitmap at Run Time</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates and fills a Bitmap object and displays it in an existing Windows Forms PictureBox control.</Description>
												<Shortcut>drawBitmap</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Width</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with width, in pixels, of the bitmap.</ToolTip>
															<Default>10</Default>
														</Literal>
														<Literal>
															<ID>Height</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with height, in pixels, of the bitmap.</ToolTip>
															<Default>10</Default>
														</Literal>
														<Literal>
															<ID>pixelColor</ID>
															<Type>System.Drawing.Color</Type>
															<ToolTip>Replace with background color for the bitmap.</ToolTip>
															<Default>Color.White</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>control</ID>
															<Type>PictureBox</Type>
															<ToolTip>Replace with a Control.</ToolTip>
															<Default>PictureBox1</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim flag As New Bitmap($Width$, $Height$)
Dim x As Integer
Dim y As Integer
' Make the entire bitmap white.
For x = 0 To flag.Height - 1
    For y = 0 To flag.Width - 1
        flag.SetPixel(x, y, $pixelColor$)
    Next
Next

' Draw a diagonal red stripe.
For x = 0 To flag.Height - 1
    flag.SetPixel(x, x, Color.Red)
Next
$control$.Image = flag


											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Create a Custom Brush</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates a TextureBrush object with an image file.</Description>
												<Shortcut>drawCustBrush</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing.Drawing2D</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Filename</ID>
															<Type>String</Type>
															<ToolTip>Replace with file name.</ToolTip>
															<Default>"ImageFile.bmp"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim texture As New TextureBrush(Image.FromFile($Filename$))
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Create a Pen</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates a Pen object.</Description>
												<Shortcut>drawPen</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>color</ID>
															<Type>System.Drawing.Color</Type>
															<ToolTip>Replace with the color of the pen.</ToolTip>
															<Default>Color.Tomato</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim tomatoPen As System.Drawing.Pen
tomatoPen = New System.Drawing.Pen($color$)

											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Create a Solid Brush</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates a SolidBrush object.</Description>
												<Shortcut>drawBrush</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>color</ID>
															<Type>System.Drawing.Color</Type>
															<ToolTip>Replace with the color of the brush to be created.</ToolTip>
															<Default>Color.PeachPuff</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim aBrush As System.Drawing.SolidBrush
aBrush = New System.Drawing.SolidBrush($color$)

											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Create a Triangle Shape using a GraphicsPath Object</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Draws a triangle by connecting a series of points.</Description>
												<Shortcut>drawTri</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing.Drawing2D</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Location1</ID>
															<ToolTip>Replace with starting coordinates of the first line segment.</ToolTip>
															<Default>0, 0</Default>
														</Literal>
														<Literal>
															<ID>Location2</ID>
															<ToolTip>Replace with starting coordinates of the second line segment.</ToolTip>
															<Default>100, 0</Default>
														</Literal>
														<Literal>
															<ID>Location3</ID>
															<ToolTip>Replace with starting coordinates of the third line segment.</ToolTip>
															<Default>100, 100</Default>
														</Literal>
														<Literal>
															<ID>Location4</ID>
															<ToolTip>Replace with starting coordinates of the fourth line segment.</ToolTip>
															<Default>0, 0</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>PictureBox</ID>
															<Type>System.Windows.Forms.PictureBox</Type>
															<ToolTip>Replace with an object that has a CreateGraphics method.</ToolTip>
															<Default>PictureBox1</Default>
														</Literal>
														<Literal>
															<ID>Pen</ID>
															<Type>System.Drawing.Pen</Type>
															<ToolTip>Replace with a pen.</ToolTip>
															<Default>Pens.Black</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim path As New GraphicsPath()
Dim points() As Point = { _
    New Point($Location1$), _
    New Point($Location2$), _
    New Point($Location3$), _
    New Point($Location4$)}
path.AddLines(points)

Dim surface As Graphics = $PictureBox$.CreateGraphics
surface.DrawPath($Pen$, path)
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Display an Animated GIF</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Displays an animated GIF.</Description>
												<Shortcut>drawGif</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>image</ID>
															<ToolTip>Replace with image filename.</ToolTip>
															<Default>"test.gif"</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>pic</ID>
															<Type>PictureBox</Type>
															<ToolTip>Replace with PictureBox</ToolTip>
															<Default>PictureBox1</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">$pic$.Image() = Image.FromFile($image$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Draw a Filled Ellipse on a Windows Form</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Draws a filled ellipse on a form.</Description>
												<Shortcut>drawEll</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>location</ID>
															<ToolTip>Replace with coordinates for location and size of the ellipse.</ToolTip>
															<Default>0, 0, 200, 300</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>color</ID>
															<Type>System.Drawing.Color</Type>
															<ToolTip>Replace with the brush color.</ToolTip>
															<Default>Color.Red</Default>
														</Literal>
														<Literal>
															<ID>form</ID>
															<Type>System.Windows.Forms.Form</Type>
															<ToolTip>Replace with a reference for the form or control to draw the ellipse on.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Using aBrush As New SolidBrush($color$), _
    formGraphics As Graphics = $form$.CreateGraphics()

    formGraphics.FillEllipse(aBrush, New Rectangle($location$))
End Using
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Draw a Filled Rectangle on a Windows Form</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Draws a filled rectangle on a form.</Description>
												<Shortcut>drawRect</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>size</ID>
															<ToolTip>Replace with coordinates for location and size of the ellipse.</ToolTip>
															<Default>0, 0, 200, 300</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>color</ID>
															<Type>System.Drawing.Color</Type>
															<ToolTip>Replace with the brush color.</ToolTip>
															<Default>Color.Red</Default>
														</Literal>
														<Literal>
															<ID>form</ID>
															<Type>System.Windows.Forms.Form</Type>
															<ToolTip>Replace with a reference for the form or control to draw the ellipse on.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Using redBrush As New SolidBrush($color$), _
    formGraphics As Graphics = $form$.CreateGraphics()
    formGraphics.FillRectangle(redBrush, New Rectangle($size$))
End Using
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Draw a Line on a Windows Form</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Draws a line on a form.</Description>
												<Shortcut>drawLine</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>location</ID>
															<ToolTip>Replace with coordinates for the start and end points of the line.</ToolTip>
															<Default>0, 0, 200, 200</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>color</ID>
															<Type>System.Drawing.Color</Type>
															<ToolTip>Replace with the brush color.</ToolTip>
															<Default>Color.Red</Default>
														</Literal>
														<Literal>
															<ID>form</ID>
															<Type>System.Windows.Forms.Form</Type>
															<ToolTip>Replace with a reference for the form or control to draw the ellipse on.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Using redPen As New Pen($color$), _
    formGraphics As Graphics = $form$.CreateGraphics()
    formGraphics.DrawLine(redPen, $location$)
End Using
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Draw a Pie Chart</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Draws a pie chart.</Description>
												<Shortcut>drawPie</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>Percent1</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with the percentage of the pie.</ToolTip>
															<Default>10</Default>
														</Literal>
														<Literal>
															<ID>Percent2</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with the percentage of the pie.</ToolTip>
															<Default>20</Default>
														</Literal>
														<Literal>
															<ID>Percent3</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with the percentage of the pie.</ToolTip>
															<Default>70</Default>
														</Literal>
														<Literal>
															<ID>Color1</ID>
															<Type>Color</Type>
															<ToolTip>Replace with the color for the section.</ToolTip>
															<Default>Color.Red</Default>
														</Literal>
														<Literal>
															<ID>Color2</ID>
															<Type>Color</Type>
															<ToolTip>Replace with the color for the section.</ToolTip>
															<Default>Color.CadetBlue</Default>
														</Literal>
														<Literal>
															<ID>Color3</ID>
															<Type>Color</Type>
															<ToolTip>Replace with the color for the section.</ToolTip>
															<Default>Color.Khaki</Default>
														</Literal>
														<Literal>
															<ID>XLocation</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with X coordinate of the drawing location.</ToolTip>
															<Default>10</Default>
														</Literal>
														<Literal>
															<ID>YLocation</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with Y coordinate of the drawing location.</ToolTip>
															<Default>10</Default>
														</Literal>
														<Literal>
															<ID>Width</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with width.</ToolTip>
															<Default>150</Default>
														</Literal>
														<Literal>
															<ID>Height</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with height.</ToolTip>
															<Default>150</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">    ' Shows how to call the DrawPieChart method
    Public Sub DrawPieChartHelper()
        Dim percents() As Integer = {$Percent1$, $Percent2$, $Percent3$}
        Dim colors() As Color = {$Color1$, $Color2$, $Color3$}
        Dim graphics As Graphics = Me.CreateGraphics
        Dim location As Point = New Point($XLocation$, $YLocation$)
        Dim size As Size = New Size($Width$, $Height$)
        DrawPieChart(percents, colors, graphics, location, size)
    End Sub


' Draws a pie chart.
Public Sub DrawPieChart(ByVal percents() As Integer, ByVal colors() As Color, _
ByVal surface As Graphics, ByVal location As Point, ByVal pieSize As Size)
    ' Check if sections add up to 100.
    Dim sum As Integer = 0
    For Each percent As Integer In percents
        sum += percent
    Next

    If sum &lt;> 100 Then
        Throw New ArgumentException("Percentages do not add up to 100.")
    End If

    If percents.Length &lt;> colors.Length Then
        Throw New ArgumentException("There must be the same number of percents and colors.")
    End If

    Dim percentTotal As Integer = 0
    For percent As Integer = 0 To percents.Length() - 1
        surface.FillPie( _
            New SolidBrush(colors(percent)), _
            New Rectangle(location, pieSize), CType(percentTotal * 360 / 100, Single), CType(percents(percent) * 360 / 100, Single))
        percentTotal += percents(percent)
    Next
    Return
End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Draw a Rubber Band Rectangle</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Draws a rubber band rectangle on the form.</Description>
												<Shortcut>drawBand</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Drawing</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method decl" Language="">Dim originalPoint As Point = New Point()
Dim lastPoint As Point = New Point()
Dim mouseIsDown As Boolean

Public Sub MyMouseDown(ByVal sender As Object, ByVal e As MouseEventArgs) Handles MyBase.MouseDown

    mouseIsDown = True
    originalPoint.X = e.X
    originalPoint.Y = e.Y
    lastPoint.X = -1
    lastPoint.Y = -1

End Sub

Private Sub MyDrawReversibleRectangle(ByVal point1 As Point, ByVal point2 As Point)

    Dim rect As Rectangle = New Rectangle()

    point1 = PointToScreen(point1)
    point2 = PointToScreen(point2)

    If point1.X &lt; point2.X Then
        rect.X = point1.X
        rect.Width = point2.X - point1.X
    Else
        rect.X = point2.X
        rect.Width = point1.X - point2.X
    End If

    If point1.Y &lt; point2.Y Then
        rect.Y = point1.Y
        rect.Height = point2.Y - point1.Y
    Else
        rect.Y = point2.Y
        rect.Height = point1.Y - point2.Y
    End If

    ControlPaint.DrawReversibleFrame(rect, _
 Color.Yellow, FrameStyle.Thick)

End Sub

Public Sub MyMouseUp(ByVal sender As Object, ByVal e As MouseEventArgs) Handles Me.MouseUp

    mouseIsDown = False

    If lastPoint.X &lt;> -1 Then
        Dim currentPoint As Point = New Point(e.X, e.Y)
        MyDrawReversibleRectangle(originalPoint, lastPoint)
    End If

    lastPoint.X = -1
    lastPoint.Y = -1
    originalPoint.X = -1
    originalPoint.Y = -1

End Sub

Public Sub MyMouseMove(ByVal sender As Object, ByVal e As MouseEventArgs) Handles Me.MouseMove

    Dim currentPoint As Point = New Point(e.X, e.Y)

    If mouseIsDown Then

        If lastPoint.X &lt;> -1 Then
            MyDrawReversibleRectangle(originalPoint, lastPoint)
        End If

        lastPoint = currentPoint
        MyDrawReversibleRectangle(originalPoint, currentPoint)
    End If

End Sub

Protected Overrides Sub OnLoad(ByVal e As System.EventArgs)
    mouseIsDown = False
End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Draw a Shape with Gradient Fill</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Draws a shape with gradient fill.</Description>
												<Shortcut>drawGrad</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Drawing</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing.Drawing2D</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>x</ID>
															<ToolTip>Replace with x-coorditnate of the left side of the rectangle.</ToolTip>
															<Default>0</Default>
														</Literal>
														<Literal>
															<ID>y</ID>
															<ToolTip>Replace with y-coorditnate of the top of the rectangle.</ToolTip>
															<Default>0</Default>
														</Literal>
														<Literal>
															<ID>width</ID>
															<ToolTip>Replace with width of the rectangle.</ToolTip>
															<Default>100</Default>
														</Literal>
														<Literal>
															<ID>height</ID>
															<ToolTip>Replace with the height of the rectangle.</ToolTip>
															<Default>100</Default>
														</Literal>
														<Literal>
															<ID>color1</ID>
															<ToolTip>Replace with the first color of the gradient.</ToolTip>
															<Default>Color.Blue</Default>
														</Literal>
														<Literal>
															<ID>color2</ID>
															<ToolTip>Replace with the second color of the gradient.</ToolTip>
															<Default>Color.Black</Default>
														</Literal>
														<Literal>
															<ID>form</ID>
															<Type>Form</Type>
															<ToolTip>Replace with form or control to draw the shape on</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">    Dim rect As New Rectangle($x$, $y$, $width$, $height$)
    Dim gc As Graphics = $form$.CreateGraphics

    Dim gradientBrush As New LinearGradientBrush(rect, $color1$, $color2$, LinearGradientMode.Horizontal)
    gc.FillRectangle(gradientBrush, rect)
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Draw Outlined Ellipse</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Draws outlined ellipses on a form.</Description>
												<Shortcut>drawOutEll</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>location1</ID>
															<ToolTip>Replace with coordinates for location and size of the shape.</ToolTip>
															<Default>0, 0, 200, 300</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>color1</ID>
															<Type>System.Drawing.Color</Type>
															<ToolTip>Replace with the pen color.</ToolTip>
															<Default>Color.Red</Default>
														</Literal>
														<Literal>
															<ID>form</ID>
															<Type>System.Windows.Forms.Form</Type>
															<ToolTip>Replace with a reference for the form or control to draw the ellipse on.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">    Using redPen As New Pen($color1$), _
        formGraphics As Graphics = $form$.CreateGraphics()
        formGraphics.DrawEllipse(redPen, New Rectangle($location1$))
    End Using
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Draw Outlined Rectangle</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Draws outlined rectangle on a form.</Description>
												<Shortcut>drawOutRect</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>location2</ID>
															<ToolTip>Replace with coordinates for location and size of the shape.</ToolTip>
															<Default>0, 0, 200, 300</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>form</ID>
															<Type>System.Windows.Forms.Form</Type>
															<ToolTip>Replace with a reference for the form or control to draw the ellipse on.</ToolTip>
															<Default>Me</Default>
														</Literal>
														<Literal>
															<ID>color2</ID>
															<Type>System.Drawing.Color</Type>
															<ToolTip>Replace with the pen color.</ToolTip>
															<Default>Color.Red</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">    Using redPen As New Pen($color2$), _
        formGraphics As Graphics = $form$.CreateGraphics()
        formGraphics.DrawRectangle(redPen, New Rectangle($location2$))
    End Using</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Draw Text on a Windows Form</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Draws text on a form.</Description>
												<Shortcut>drawText</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>FontName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the font name and size.</ToolTip>
															<Default>"Arial"</Default>
														</Literal>
														<Literal>
															<ID>FontSize</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with the font size.</ToolTip>
															<Default>16</Default>
														</Literal>
														<Literal>
															<ID>Xlocation</ID>
															<Type>Single</Type>
															<ToolTip>Replace with the X coordinate for the where the text will appear.</ToolTip>
															<Default>150.0</Default>
														</Literal>
														<Literal>
															<ID>Ylocation</ID>
															<Type>Single</Type>
															<ToolTip>Replace with the Y coordinate for the where the text will appear.</ToolTip>
															<Default>50.0</Default>
														</Literal>
														<Literal>
															<ID>color</ID>
															<ToolTip>Replace with the color of the text.</ToolTip>
															<Default>Color.Red</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>text</ID>
															<Type>String</Type>
															<ToolTip>Replace with the text to be written.</ToolTip>
															<Default>"hello"</Default>
														</Literal>
														<Literal>
															<ID>form</ID>
															<Type>System.Windows.Forms.Form</Type>
															<ToolTip>Replace with a reference for the form or control to draw the text on.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">    Dim drawFormat As New StringFormat()

    Using formGraphics As Graphics = $form$.CreateGraphics(), _
        drawFont As New System.Drawing.Font($FontName$, $FontSize$), _
        drawBrush As New SolidBrush($color$)

        formGraphics.DrawString($text$, drawFont, drawBrush, _
            $Xlocation$, $Ylocation$, drawFormat)
    End Using
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Draw Vertical Text on a Windows Form</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Draws text on a form in a vertical orientation.</Description>
												<Shortcut>drawVertText</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>FontName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the font name and size.</ToolTip>
															<Default>"Arial"</Default>
														</Literal>
														<Literal>
															<ID>FontSize</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with the font size.</ToolTip>
															<Default>16</Default>
														</Literal>
														<Literal>
															<ID>Xlocation</ID>
															<Type>Single</Type>
															<ToolTip>Replace with the X coordinate for the where the text will appear.</ToolTip>
															<Default>150.0</Default>
														</Literal>
														<Literal>
															<ID>Ylocation</ID>
															<Type>Single</Type>
															<ToolTip>Replace with the Y coordinate for the where the text will appear.</ToolTip>
															<Default>50.0</Default>
														</Literal>
														<Literal>
															<ID>color</ID>
															<ToolTip>Replace with the color of the text.</ToolTip>
															<Default>Color.Red</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>text</ID>
															<Type>String</Type>
															<ToolTip>Replace with the text to be written.</ToolTip>
															<Default>"hello"</Default>
														</Literal>
														<Literal>
															<ID>form</ID>
															<Type>System.Windows.Forms.Form</Type>
															<ToolTip>Replace with a reference for the form or control to draw the text on.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">    Dim drawFormat As New StringFormat()

    Using formGraphics As Graphics = $form$.CreateGraphics(), _
        drawFont As New System.Drawing.Font($FontName$, $FontSize$), _
        drawBrush As New SolidBrush($color$)

        drawFormat.FormatFlags = StringFormatFlags.DirectionVertical
        formGraphics.DrawString($text$, drawFont, drawBrush, _
            $Xlocation$, $Ylocation$, drawFormat)
    End Using
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Fonts</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Create a Font</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates a font by using three overloads of the Font constructor.</Description>
												<Shortcut>fontCreate</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>fontName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the font name.</ToolTip>
															<Default>"Courier New"</Default>
														</Literal>
														<Literal>
															<ID>fontSize</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with the font size.</ToolTip>
															<Default>12</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>fontStyle</ID>
															<Type>FontStyle</Type>
															<ToolTip>Replace with the font style.</ToolTip>
															<Default>FontStyle.Italic</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim italicFont As New Font($fontName$, $fontSize$, $fontStyle$)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Forms</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Add a Windows Forms Control at Run Time</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates a new instance of a Windows forms TextBox control at run time.</Description>
												<Shortcut>formAdd</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>text</ID>
															<Type>String</Type>
															<ToolTip>The text to be displayed in the Windows Forms control.</ToolTip>
															<Default>"TextBox1"</Default>
														</Literal>
														<Literal>
															<ID>locationX</ID>
															<Type>Integer</Type>
															<ToolTip>The X coordinate of control's location.</ToolTip>
															<Default>64</Default>
														</Literal>
														<Literal>
															<ID>locationY</ID>
															<Type>Integer</Type>
															<ToolTip>The Y coordinate of the control's location.</ToolTip>
															<Default>40</Default>
														</Literal>
														<Literal>
															<ID>width</ID>
															<Type>Integer</Type>
															<ToolTip>The width of control.</ToolTip>
															<Default>100</Default>
														</Literal>
														<Literal>
															<ID>height</ID>
															<Type>Integer</Type>
															<ToolTip>The height of control.</ToolTip>
															<Default>20</Default>
														</Literal>
														<Literal>
															<ID>controlName</ID>
															<Type>String</Type>
															<ToolTip>The variable name of the control.</ToolTip>
															<Default>TextBox1</Default>
														</Literal>
														<Literal>
															<ID>tabIndex</ID>
															<Type>Integer</Type>
															<ToolTip>The the tab order value.</ToolTip>
															<Default>0</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>controlType</ID>
															<Type>Control</Type>
															<ToolTip>Replace with the Type of control to add.</ToolTip>
															<Default>TextBox</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">    Dim $controlName$ As New $controlType$()
    With $controlName$
        .Location = New Point($locationX$, $locationY$)
        .Size = New Size($width$, $height$)
        .TabIndex = $tabIndex$
        .Text = $text$
    End With
    Controls.Add($controlName$)

											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Arrange MDI Child Forms</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Arranges the child forms in a cascading layout.</Description>
												<Shortcut>mdiArrange</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>form</ID>
															<Type>Form</Type>
															<ToolTip>The child MDI form.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">$form$.LayoutMdi(MdiLayout.Cascade)
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Convert Mouse Coordinates to Screen Coordinates</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Converts mouse coordinates from a mouse event into screen coordinates.</Description>
												<Shortcut>formMouse</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>formName</ID>
															<Type>Form</Type>
															<ToolTip>Refers to the form this code is added to.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Private Sub $formName$_MouseDown(ByVal sender As Object, _
ByVal e As System.Windows.Forms.MouseEventArgs) _
Handles $formName$.MouseDown
    Dim screenPoint As Point
    screenPoint = $formName$.PointToScreen(New Point(e.X, e.Y))
End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Create MDI Child Forms</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Creates and displays a new MDI child form.</Description>
												<Shortcut>mdiNew</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>formName</ID>
															<Type>Form</Type>
															<ToolTip>Replace with a reference to the form that is the parent of the MDI child form. That form needs to have IsMDIContainer = True.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim newMDIChild As New Form()
newMDIChild.MdiParent = $formName$
newMDIChild.Show()
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Create Transparent Windows Forms</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Sets the opacity of a form to make it transparent.</Description>
												<Shortcut>formTrans</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>opacity</ID>
															<Type>Double</Type>
															<ToolTip>Replace with desired opacity between 0 and 1.</ToolTip>
															<Default>0.83</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>formName</ID>
															<Type>Form</Type>
															<ToolTip>Replace with a reference to the form that will be transparent.</ToolTip>
															<Default>frmTransparentForm</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">$formName$.Opacity = $opacity$

											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Determine the Active MDI Child and Control</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Retrieves the active MDI child form and the active control on the child form.</Description>
												<Shortcut>mdiActive</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>formName</ID>
															<Type>Form</Type>
															<ToolTip>Replace with a reference to the MDI parent form.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">Dim activeChild As Form = $formName$.ActiveMdiChild

Dim activeControl As Control = Nothing
If Not activeChild IsNot Nothing Then
    activeControl = activeChild.ActiveControl
End If
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Determine Which Control on a Windows Form is Selected</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Finds the selected control on a form.</Description>
												<Shortcut>formSelect</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>formName</ID>
															<Type>Form</Type>
															<ToolTip>Replace with a form object.</ToolTip>
															<Default>Me</Default>
														</Literal>
														<Literal>
															<ID>selectedControl</ID>
															<Type>Control</Type>
															<ToolTip>Stores the control currently selected on the form.</ToolTip>
															<Default>selectedControl</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">$selectedControl$ = $formName$.ActiveControl</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Determine Which Modifier Key Was Pressed</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Monitors for modifier keys such as the SHIFT, ALT, and CTRL keys.</Description>
												<Shortcut>formKey</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>modifierKey</ID>
															<Type>Keys</Type>
															<ToolTip>The modifier key that is being checked for.</ToolTip>
															<Default>Keys.Shift</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>formName</ID>
															<Type>System.Windows.Forms.Form</Type>
															<ToolTip>Replace with a reference to a form.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Private Sub $formName$_KeyPress(ByVal sender As Object, _
ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles $formName$.KeyPress

    If (Control.ModifierKeys And $modifierKey$) = $modifierKey$ Then

    End If

End Sub
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Display a Windows Form </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Displays a windows form.</Description>
												<Shortcut>formNew</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>formName</ID>
															<Type>Form</Type>
															<ToolTip>Replace with Form type or a type that derives from Form.</ToolTip>
															<Default>Form</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">$formName$.Show()</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Eliminate the TitleBar from a Form</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Eliminates the TitleBar from a Form</Description>
												<Shortcut>formTitle</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>formName</ID>
															<Type>Form</Type>
															<ToolTip>Replace with Form object.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">$formName$.FormBorderStyle = Windows.Forms.FormBorderStyle.None</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Keep a Windows Form on Top</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Shows how the TopMost property controls whether a form is a top-most form. A top-most form will float above other, non–top-most forms even when it is not active. </Description>
												<Shortcut>formTop</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>topBoolean</ID>
															<Type>Boolean</Type>
															<ToolTip>This value determines whether the form is top-most (true) or not (false).</ToolTip>
															<Default>True</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>formName</ID>
															<Type>Form</Type>
															<ToolTip>Replace with a reference to the form that needs to be top-most.</ToolTip>
															<Default>theTopForm</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">$formName$.TopMost = $topboolean$</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Move a Window by Dragging the Client Area of the Form</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Moves a form by dragging any part of it with the mouse. This feature is particularly useful when the form has no title bar.</Description>
												<Shortcut>formDrag</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>mouseOffset</ID>
															<Type>Point</Type>
															<ToolTip>The offset of the mouse cursor.</ToolTip>
															<Default>mouseOffset</Default>
														</Literal>
														<Literal>
															<ID>formName</ID>
															<Type>Form</Type>
															<ToolTip>The form in which the snippet is inserted.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method decl" Language="">Private Sub $formName$_MouseDown(ByVal sender As Object, _
    ByVal e As MouseEventArgs) _
    Handles MyBase.MouseDown

    $mouseOffset$ = New Point(-e.X, -e.Y)
End Sub

Private Sub $formName$_MouseMove(ByVal sender As Object, _
    ByVal e As MouseEventArgs) _
    Handles MyBase.MouseMove

    If e.Button = MouseButtons.Left Then
        Dim mousePos As Point = Control.MousePosition
        mousePos.Offset($mouseOffset$.X, $mouseOffset$.Y)
        Location = mousePos
    End If
End Sub</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Play a Beep From a Windows Form</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Plays a beep.</Description>
												<Shortcut>formBeep</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">Beep()
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Resize Windows Forms</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Resizes a form.</Description>
												<Shortcut>formResize</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>newWidth</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with the new width.</ToolTip>
															<Default>100</Default>
														</Literal>
														<Literal>
															<ID>newHeight</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with the new height.</ToolTip>
															<Default>100</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>formName</ID>
															<Type>Form</Type>
															<ToolTip>Replace with a reference to a form.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">$formName$.Size = New Size($newWidth$, $newHeight$)
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Restrict a Control's Acceptable Keystrokes</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Overrides the default ProcessCmdKey function of a Windows Forms Control and restricts user input to numeric and navigation keys.</Description>
												<Shortcut>formRestrict</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>baseClass</ID>
															<Type>String</Type>
															<ToolTip>Replace with the type of the class you want to restrict.</ToolTip>
															<Default>ComboBox</Default>
														</Literal>
														<Literal>
															<ID>restrictedControlClass</ID>
															<Type>String</Type>
															<ToolTip>The name of the derived class.</ToolTip>
															<Default>restrictedComboBoxClass</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="type decl" Language="">Class $restrictedControlClass$
    Inherits $baseClass$
    Const WM_KEYDOWN As Integer = &amp;H100

    Protected Overrides Function ProcessCmdKey _
        (ByRef msg As Message, _
        ByVal keyData As Keys) As Boolean

        If msg.Msg = WM_KEYDOWN Then
            Return Not ((keyData >= Keys.D0 And keyData &lt;= Keys.D9) _
                Or keyData = Keys.Back Or keyData = Keys.Left _
                Or keyData = Keys.Right Or keyData = Keys.Up _
                Or keyData = Keys.Down Or keyData = Keys.Delete
        End If
        Return MyBase.ProcessCmdKey(msg, keyData)
    End Function
End Class
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve Information from the Parent MDI Form of a Dialog Box</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Retrieves information from the parent MDI form.</Description>
												<Shortcut>formBox</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>formName</ID>
															<Type>Form</Type>
															<ToolTip>Replace with a reference to the form you are trying to find the parent of.</ToolTip>
															<Default>Me</Default>
														</Literal>
														<Literal>
															<ID>text</ID>
															<Type>String</Type>
															<ToolTip>Stores the text of the parent form.</ToolTip>
															<Default>text</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">$text$ = $formName$.ParentForm.Text
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Retrieve the Result for Dialog Boxes</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Determines how a dialog box was closed.</Description>
												<Shortcut>formDlg</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>dialogResult</ID>
															<Type>DialogResult</Type>
															<ToolTip>The result of the closed dialog being checked for.</ToolTip>
															<Default>DialogResult.OK</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>dialogName</ID>
															<Type>Form</Type>
															<ToolTip>Replace with the type name of the form you want to create and display.</ToolTip>
															<Default>dialog</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">If $dialogName$.ShowDialog = $dialogResult$ Then

End If
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Set the Screen Location of Windows Forms</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Sets the location, in pixels, of the the top-left corner of the form. </Description>
												<Shortcut>formLoc</Shortcut>
											</Header>
											<References>
												<Reference>
													<Assembly>System.Drawing.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.Windows.Forms.dll</Assembly>
												</Reference>
												<Reference>
													<Assembly>System.dll</Assembly>
												</Reference>
											</References>
											<Imports>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
												<Import>
													<Namespace>System.Drawing</Namespace>
												</Import>
												<Import>
													<Namespace>System.Windows.Forms</Namespace>
												</Import>
												<Import>
													<Namespace>System</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>newX</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with new X value.</ToolTip>
															<Default>100</Default>
														</Literal>
														<Literal>
															<ID>newY</ID>
															<Type>Integer</Type>
															<ToolTip>Replace with new Y value.</ToolTip>
															<Default>100</Default>
														</Literal>
													</Literals>
													<Literals>
														<Literal>
															<ID>formName</ID>
															<Type>Form</Type>
															<ToolTip>Replace with the type of the form that you want to create and display.</ToolTip>
															<Default>Me</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">$formName$.DesktopLocation = New Point($newX$, $newY$)
											</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
								<Member>
									<Name>Sound</Name>
									<Path />
									<ImageIndex>45</ImageIndex>
									<CodeSnippets>
										<Snippet>
											<Header>
												<Title>Loop a Sound Playing on a Windows Form</Title>
												<Author>Microsoft Corporation</Author>
												<Description>Plays a looping sound in the background.</Description>
												<Shortcut>sndLoop</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>FileName</ID>
															<Type>String</Type>
															<ToolTip>Replace with the name of the sound file.</ToolTip>
															<Default>"SoundFile.wav"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">My.Computer.Audio.Play($FileName$, AudioPlayMode.BackgroundLoop)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Play a Sound </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Plays a sound from a file.</Description>
												<Keywords>
												</Keywords>
												<Shortcut>sndPlay</Shortcut>
											</Header>
											<Declarations>
												<Declaration>
													<Literals>
														<Literal>
															<ID>filename</ID>
															<Type />
															<ToolTip>Replace with the name of the sound file.</ToolTip>
															<Default>"ringout.wav"</Default>
														</Literal>
													</Literals>
												</Declaration>
											</Declarations>
											<Code Delimiter="$" Kind="method body" Language="">My.Computer.Audio.Play($filename$,  AudioPlayMode.WaitToComplete)</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
										<Snippet>
											<Header>
												<Title>Stop Playing Sounds in the Background </Title>
												<Author>Microsoft Corporation</Author>
												<Description>Stops a sound playing in the background.</Description>
												<Shortcut>sndStop</Shortcut>
											</Header>
											<Imports>
												<Import>
													<Namespace>System</Namespace>
												</Import>
												<Import>
													<Namespace>Microsoft.VisualBasic</Namespace>
												</Import>
											</Imports>
											<Code Delimiter="$" Kind="method body" Language="">My.Computer.Audio.Stop()</Code>
											<ImageIndex>43</ImageIndex>
								</Snippet>
									</CodeSnippets>
								</Member>
							</CodeSnippetMembers>
						</Member>
						<Member>
							<Name>XML</Name>
							<Path />
							<ImageIndex>45</ImageIndex>
							<CodeSnippets>
								<Snippet>
									<Header>
										<Title>Add an Element to a XML Document</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Adds a new element to an XML document instance.</Description>
										<Shortcut>xmlAdd</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Xml</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Element</ID>
													<Type>String</Type>
													<ToolTip>Replace with the name of the new element.</ToolTip>
													<Default>"Keyword"</Default>
												</Literal>
												<Literal>
													<ID>Value</ID>
													<Type>String</Type>
													<ToolTip>Replace with the text of the new element.</ToolTip>
													<Default>"Value"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>XmlDoc</ID>
													<Type>XmlDocument</Type>
													<ToolTip>Replace with an XmlDocument instance.</ToolTip>
													<Default>xmlDoc</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim newElement As XmlNode
newElement = $XmlDoc$.CreateElement($Element$)
newElement.InnerText = $Value$
$XmlDoc$.AppendChild(newElement)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Enumerate Attributes of an XML Node</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Enumerates the attributes of an XmlNode.</Description>
										<Shortcut>xmlEnum</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.XML.dll</Assembly>
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Xml</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>NodeName</ID>
													<Type>XmlNode</Type>
													<ToolTip>Replace with an XmlNode object.</ToolTip>
													<Default>node</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">For Each attribute As XmlAttribute In $NodeName$.Attributes

Next</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Find a Node in XML Data Using the Element Name</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Locates an element in an XML file by Element name.</Description>
										<Shortcut>xmlFind</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.XML.dll</Assembly>
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Xml</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>TagName</ID>
													<Type>String</Type>
													<ToolTip>Replace with the name of the element (not the entire XPath).</ToolTip>
													<Default>"ElementName"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>XmlVariable</ID>
													<Type>XmlDocument</Type>
													<ToolTip>Replace with an XmlDocument variable.</ToolTip>
													<Default>xmlDoc</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim nodes As XmlNodeList
nodes = $XmlVariable$.GetElementsByTagName($TagName$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Infer and create a Schema from an XML file.</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Infers a Schema from an existing XML file and saves it as a seperate schema file.</Description>
										<Shortcut>xmlInfer</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
										<Import>
											<Namespace>System.Xml</Namespace>
										</Import>
										<Import>
											<Namespace>System.Xml.Schema</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>XmlFile</ID>
													<Type>String</Type>
													<ToolTip>Replace with the xml file to infer schema from.</ToolTip>
													<Default>"sample.xml"</Default>
												</Literal>
												<Literal>
													<ID>XsdFile</ID>
													<Type>String</Type>
													<ToolTip>Replace with the xsd filename to save the schema to.</ToolTip>
													<Default>"sampleSchema.xsd"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">' Gets the schema.
Dim infer As New XmlSchemaInference()
Dim sc As New XmlSchemaSet()
sc = infer.InferSchema(New XmlTextReader($xmlFile$))

' Writes the schema.
Dim w As XmlWriter = XmlWriter.Create(New StreamWriter($XsdFile$))
Dim schema As XmlSchema
For Each schema In sc.Schemas()
    schema.Write(w)
Next schema</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Iterate named nodes in XML document</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Iterates the elements in an XML document by element name.</Description>
										<Shortcut>xmlIter</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.XML.dll</Assembly>
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Xml</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>TagName</ID>
													<Type>String</Type>
													<ToolTip>Replace with the name of the element (not the entire XPath).</ToolTip>
													<Default>"ElementName"</Default>
												</Literal>
											</Literals>
											<Literals>
												<Literal>
													<ID>XmlVariable</ID>
													<Type>XmlDocument</Type>
													<ToolTip>Replace with an XmlDocument variable.</ToolTip>
													<Default>xmlDoc</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">For Each node As XmlNode In $xmlVariable$.GetElementsByTagName($TagName$)

        Next</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Navigate with XPathNavigator</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Iterates through the nodes of an XML document using the XPathNavigator.</Description>
										<Shortcut>xmlNavDoc</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.XML.dll</Assembly>
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Xml</Namespace>
										</Import>
										<Import>
											<Namespace>System.Xml.XPath</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>xmlDoc</ID>
													<Type>XmlDocument</Type>
													<ToolTip>Replace with an XMLDocument instance.</ToolTip>
													<Default>xmlDoc</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">' Create an XpathNavigator on XmlDocument.
        Dim nav As XPathNavigator = $xmlDoc$.CreateNavigator()

        ' Move to the first non-comment element.
        nav.MoveToChild(XPathNodeType.Element)

        Dim nodeIterator As XPathNodeIterator = nav.SelectChildren(XPathNodeType.Element)
        While nodeIterator.MoveNext

        End While</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Read Class Data from an XML File</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Reads class data that was previously written to an XML file using the XmlSerializer class.</Description>
										<Keywords>
										</Keywords>
										<Shortcut>xmlReadClass</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
											<Version />
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Xml.Serialization</Namespace>
										</Import>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>classType</ID>
													<Type />
													<ToolTip>Replace with the name of the class to be deserialized.</ToolTip>
													<Default>TheClass</Default>
												</Literal>
												<Literal>
													<ID>filename</ID>
													<Type>String</Type>
													<ToolTip>Replace with the name of the file that contains the serialized data.</ToolTip>
													<Default>"ClassData.xml"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim reader As New XmlSerializer(GetType($ClassType$))
        Dim file As New StreamReader($filename$)
        Dim fileData As $ClassType$
        fileData = CType(reader.Deserialize(file), $ClassType$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Read XML from a File Using the XmlTextReader</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Uses the XMLTextReader class to extract the contents from an XML file.</Description>
										<Keywords>
										</Keywords>
										<Shortcut>xmlReadTxt</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
											<Version />
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Xml</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>filename</ID>
													<Type>String</Type>
													<ToolTip>Replace with the name of the file that contains the XML.</ToolTip>
													<Default>"Snippet.xml"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim reader As New XmlTextReader($filename$)
Dim contents As String

contents = reader.ReadInnerXML</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Read XML from a String</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Reads XML data from a string.</Description>
										<Shortcut>xmlReadString</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
										<Import>
											<Namespace>System.Xml</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>XmlString</ID>
													<Type>String</Type>
													<ToolTip>Replace with code to initialize string with XML.</ToolTip>
													<Default>"&lt;book/&gt;"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">' Create the reader.
Dim reader As XmlReader = XmlReader.Create(New StringReader($xmlString$))
While reader.Read()

End While</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Read XML from a URL</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Read XML data from a location defined as an URL.</Description>
										<Shortcut>xmlReadUrl</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Xml</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>Url</ID>
													<Type>String</Type>
													<ToolTip>Replace with an URL.</ToolTip>
													<Default>"http://www.contoso.com/books.xml"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim myUrl As String = $Url$
Dim reader As XmlReader = XmlReader.Create(myUrl)
While reader.Read

End While</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Select Nodes with XPathNavigator</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Creates an iterator to walkthrough selected nodes.</Description>
										<Shortcut>xmlNavNodes</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.XML.dll</Assembly>
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Xml.XPath</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>FileName</ID>
													<Type>String</Type>
													<ToolTip>Replace this with your string.</ToolTip>
													<Default>"data.xml"</Default>
												</Literal>
												<Literal>
													<ID>NodePath</ID>
													<Type>String</Type>
													<ToolTip>Replace this with your string.</ToolTip>
													<Default>"parent/child"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim pathExpr As XPathExpression
Dim document As New XPathDocument($FileName$)

' Create an XPathNavigator.
Dim pathNavigator As XPathNavigator = document.CreateNavigator()

' Get the Book elements.
Dim selectExpr As String = $NodePath$

' Ensure we are at the root node.
pathNavigator.MoveToRoot()

pathExpr = pathNavigator.Compile(selectExpr)

' Create an XPathNodeIterator to walk over the selected nodes.
Dim nodeIterator As XPathNodeIterator = pathNavigator.Select(pathExpr)
While nodeIterator.MoveNext

End While</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Transform XML into HTML using a XSL Stylesheet</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Transforms XML into HTML using a XSL stylesheet.</Description>
										<Shortcut>xmlXsl</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
										<Import>
											<Namespace>System.Xml.Xsl</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>OutputFile</ID>
													<Type>String</Type>
													<ToolTip>Replace this with name of the output file.</ToolTip>
													<Default>"output.html"</Default>
												</Literal>
												<Literal>
													<ID>xslFile</ID>
													<Type>String</Type>
													<ToolTip>Replace this with xsl stylesheet filename.</ToolTip>
													<Default>"stylesheet.xsl"</Default>
												</Literal>
												<Literal>
													<ID>xmlFile</ID>
													<Type>String</Type>
													<ToolTip>Replace this with name of the XML data file.</ToolTip>
													<Default>"data.xml"</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Using stream As FileStream = File.Open($outputFile$, FileMode.Create)
            ' Create XsltCommand and compile stylesheet.
            Dim processor As New XslCompiledTransform()
            processor.Load($xslFile$)
            ' Transform the file.
            processor.Transform($xmlFile$, Nothing, stream)
        End Using</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Transform XML into HTML using XSLT</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Transforms XML into HTML using XSLT.</Description>
										<Shortcut>xmlXslt</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.Xml.Xsl</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>xslt</ID>
													<Type />
													<ToolTip>Replace with path to XSLT file.</ToolTip>
													<Default>"theXsltFile.xslt"</Default>
													<Function />
												</Literal>
												<Literal>
													<ID>xml</ID>
													<Type />
													<ToolTip>Replace with path to XML file.</ToolTip>
													<Default>"theXmlFile.xml"</Default>
													<Function />
												</Literal>
												<Literal>
													<ID>output</ID>
													<Type />
													<ToolTip>Replace with output filename.</ToolTip>
													<Default>"theOutputFile.html"</Default>
													<Function />
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method body" Language="">Dim xslt As New XslCompiledTransform

        xslt.Load($xslt$)
        xslt.Transform($xml$, $output$)</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
								<Snippet>
									<Header>
										<Title>Write Class Data to an XML File</Title>
										<Author>Microsoft Corporation</Author>
										<Description>Writes the data from a class to an XML file using the XmlSerializer class.</Description>
										<Keywords>
										</Keywords>
										<Shortcut>xmlWriteClass</Shortcut>
									</Header>
									<References>
										<Reference>
											<Assembly>System.Xml.dll</Assembly>
											<Version />
											<Url />
										</Reference>
									</References>
									<Imports>
										<Import>
											<Namespace>System.XML.Serialization</Namespace>
										</Import>
										<Import>
											<Namespace>System.IO</Namespace>
										</Import>
									</Imports>
									<Declarations>
										<Declaration>
											<Literals>
												<Literal>
													<ID>class</ID>
													<Type />
													<ToolTip>Replace with the type name of the class to be serialized.</ToolTip>
													<Default>ArrayList</Default>
												</Literal>
												<Literal>
													<ID>filename</ID>
													<Type />
													<ToolTip>Replace with name of the file to write the data to.</ToolTip>
													<Default>"SerializedData.xml"</Default>
												</Literal>
												<Literal>
													<ID>dataInstance</ID>
													<Type />
													<ToolTip>Replace with the instance of the class containing the data.</ToolTip>
													<Default>dataToWrite</Default>
												</Literal>
											</Literals>
										</Declaration>
									</Declarations>
									<Code Delimiter="$" Kind="method decl" Language="">Dim writer As New XMLSerializer(GetType($Class$))
Dim file As New StreamWriter($filename$)
writer.Serialize(file, $dataInstance$)
file.Close()</Code>
									<ImageIndex>43</ImageIndex>
								</Snippet>
							</CodeSnippets>
						</Member>
					</CodeSnippetMembers>
</CodeSnippetCollection>
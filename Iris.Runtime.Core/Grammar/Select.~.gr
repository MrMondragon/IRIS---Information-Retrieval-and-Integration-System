"Name"         = 'SQL 2007'
"Version"      = '2007'
"Start Symbol" = <Select Stm>

! =============================================================================
! Comments
! =============================================================================

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '--'

! =============================================================================
! Terminals
! =============================================================================

{String Ch 1}      = {Printable} - ["]
{String Ch 2}      = {Printable} - ['']
{Id Ch Standard}   = {Alphanumeric} + [_]
{Id Ch Extended}   = {Printable} - ['['] - [']']

StringLiteral   = '"'{String Ch 1}*'"' | ''{String Ch 2}*''
IntegerLiteral  = {Digit}+
RealLiteral     = {Digit}+'.'{Digit}+

!----- Identifiers in SQL are very complex. 

Id             = ({Letter}{Id Ch Standard}* | '['{Id Ch Extended}+']')  ('.'({Letter}{Id Ch Standard}* | '['{Id Ch Extended}+']'))?

! =============================================================================
! Select Statement
! =============================================================================

<Select Stm>    ::= SELECT <Columns> <Into Clause> <From Clause> <Where Clause> <Group Clause> <Having Clause> <Order Clause> <Union>

<Columns>       ::= <Restriction> '*'
                  | <Restriction> <Column List>

<Column List>   ::= <Column Item> ',' <Column List>
                  | <Column Item>

<Column Item>   ::= <Column Source>
                  | <Column Source> Id      !ALIAS   
                  
<Column Source> ::= <Aggregate> 
                  | Id                

<Restriction>   ::= ALL
                  | DISTINCT
                  | TOP IntegerLiteral
                  | TOP IntegerLiteral PERCENT
                  |

<Aggregate>     ::= Count  '(' '*' ')'           
                  | Count  '(' <Expression> ')'
                  | Avg    '(' <Expression> ')'
                  | Min    '(' <Expression> ')'
                  | Max    '(' <Expression> ')'
                  | StDev  '(' <Expression> ')'
                  | StDevP '(' <Expression> ')'
                  | Sum    '(' <Expression> ')'
                  | Var    '(' <Expression> ')'
                  | VarP   '(' <Expression> ')'

<Into Clause>   ::= INTO Id
                  |
                  
<From Member>    ::=  <Id List>
                  | '('<Select Stm>')' Id
                  | '('<Select Stm>')' as Id

<From List>      ::= <From Member> ',' <From List>
                  | <From Member>
                  

<From Clause>   ::= FROM <From List> <Join Chain>


<Join Chain>    ::= <Join> <Join Chain>
                  |

<Join>          ::= INNER JOIN <From List> ON Id '=' Id
                  | LEFT OUTER JOIN <From List> ON Id '=' Id
                  | RIGHT OUTER JOIN <From List> ON Id '=' Id
                  |       JOIN <From List> ON Id '=' Id

<Where Clause>  ::= WHERE <Expression>
                  |

<Group Clause>  ::= GROUP BY <Id List>
                  |

<Order Clause>  ::= ORDER BY <Order List>
                  |

<Order List>    ::= ID <Order Type> ',' <Order List>
                  | ID <Order Type>

<Order Type>    ::= ASC
                  | DESC
                  |

<Having Clause> ::= HAVING <Expression>
                  |

<Union>    ::= UNION <Select Stm>
                  | UNION ALL <Select Stm>
                  |

! ============================================================================= 
! Expressions
! =============================================================================

<Expression>  ::= <And Exp> OR <Expression>
                | <And Exp>

<And Exp>     ::= <Not Exp> AND <And Exp>
                | <Not Exp>

<Not Exp>     ::= NOT <Pred Exp>
                | <Pred Exp>

<Pred Exp>    ::= <Add Exp> BETWEEN <Add Exp> AND <Add Exp>
                | <Add Exp> NOT BETWEEN <Add Exp> AND <Add Exp>
                | <Value> IS NOT NULL
                | <Value> IS NULL
                | <Add Exp> LIKE StringLiteral
                | <Add Exp> IN   <Tuple>
                | <Add Exp> '='  <Add Exp>
                | <Add Exp> '<>' <Add Exp>
                | <Add Exp> '!=' <Add Exp>
                | <Add Exp> '>'  <Add Exp>
                | <Add Exp> '>=' <Add Exp>
                | <Add Exp> '<'  <Add Exp>
                | <Add Exp> '<=' <Add Exp>
                | <Add Exp>

<Add Exp>     ::= <Add Exp> '+' <Mult Exp>
                | <Add Exp> '-' <Mult Exp>
                | <Mult Exp>

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 
                | <Mult Exp> '/' <Negate Exp>
                | <Negate Exp>

<Negate Exp>  ::= '-' <Value>
                | <Value>
        
<Value>       ::= <Tuple>
                | ID
                | IntegerLiteral
                | RealLiteral
                | StringLiteral
                | NULL

<Tuple>       ::= '(' <Select Stm> ')'
                | '(' <Expr List> ')'

<Expr List>  ::= <Expression> ',' <Expr List>
               | <Expression>

<Id List>     ::= <Id Member> ',' <Id List> 
                | <Id Member>

<Id Member>   ::= Id
                | Id Id

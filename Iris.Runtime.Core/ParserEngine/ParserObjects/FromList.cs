///////////////////////////////////////////////////////////
//  FromList.cs
//  Implementation of the Class FromList
//  Generated by Enterprise Architect
//  Created on:      04-Jan-2007 21:41:42
//  Original author: Marcelo
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using Iris.Runtime.Core.Expressions;
using System;

namespace Iris.Runtime.Core.ParserObjects
{
  [Serializable]
  public class FromList : FromMember
  {

    private string joinType;
    private Expression onSection;
    private List<FromMember> members;

    public List<FromMember> Members
    {
      get { return members; }
    }

    public FromList(string aJoinType, Expression aOnSection)
    {
      members = new List<FromMember>();
      joinType = aJoinType;
      onSection = aOnSection;
    }

    public string JoinType
    {
      get
      {
        return joinType;
      }
      set
      {
        joinType = value;
      }
    }

    public Expression OnSection
    {
      get
      {
        return onSection;
      }
      set
      {
        onSection = value;
      }
    }

    public override string GetText()
    {
      string text = JoinType+" ";
      foreach (FromMember table in Members)
      {
        if (table is FromList)
        {
          FromList fl = (FromList)table;
          if (!string.IsNullOrEmpty(fl.JoinType))
            text = text.Substring(0, text.Length - 1)+" ";
        }
        if (!table.CrossJoin)
          text += table.GetText() + ",";
        else
          text += table.GetText() + " CROSS JOIN ";
      }
      text = text.Substring(0, text.Length - 1);

      if (onSection != null)
        text += " ON " + onSection.GetText();

      return text;
    }


  }//end FromList

}//end namespace Parser